@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.12.0"

@node Rhythms
@section Rhythms

@lilypondfile[quote]{rhythms-headword.ly}

This section discusses rhythms, rests, durations, beaming and bars.

@menu
* Writing rhythms::
* Writing rests::
* Displaying rhythms::
* Beams::
* Bars::
* Special rhythmic concerns::
@end menu


@node Writing rhythms
@subsection Writing rhythms

@menu
* Durations::
* Tuplets::
* Scaling durations::
* Ties::
@end menu

@node Durations
@unnumberedsubsubsec Durations

@cindex durations, of notes
@cindex note durations
@cindex length of notes
@cindex note lengths

@funindex \longa
@funindex longa
@funindex \breve
@funindex breve
@funindex \maxima
@funindex maxima

Durations are designated by numbers and dots.  Durations are entered
as their reciprocal values.  For example, a quarter note is entered
using a @code{4} (since it is a 1/4 note), and a half note is entered
using a @code{2} (since it is a 1/2 note).  For notes longer than a
whole you must use the @code{\longa} (a double breve) and
@code{\breve} commands.  Durations as short as 128th notes may be
specified.  Shorter values are possible, but only as beamed notes.

@c Two 64th notes are needed to obtain beams
@lilypond[quote,verbatim,relative=2]
\time 8/1
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c128 c128
@end lilypond

Here are the same durations with automatic beaming turned off.

@c not strictly "writing rhythms"; more of a "displaying" thing,
@c but it's ok here.  -gp
@lilypond[quote,verbatim,relative=2]
\time 8/1
\autoBeamOff
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c128 c128
@end lilypond

A note with the duration of a quadruple breve may be entered with
@code{\maxima}, but this is supported only within ancient music
notation.  For details, see @ref{Ancient notation}.

@cindex duration, default
@cindex default note duration
@cindex note duration, default

If the duration is omitted, it is set to the previously
entered duration.  The default for the first note is a quarter
note.

@lilypond[quote,verbatim,relative=2]
a a a2 a a4 a a1 a
@end lilypond

@cindex notes, dotted
@cindex dotted notes
@cindex notes, double-dotted
@cindex double-dotted notes

@funindex .

To obtain dotted note lengths, place a dot (@code{.}) after the
duration.  Double-dotted notes are specified by appending two
dots, and so on.

@lilypond[quote,verbatim,relative=2]
a4 b c4. b8 a4. b4.. c8.
@end lilypond

Some durations cannot be represented with just binary durations
and dots; they can be represented only by tying two or more
notes together.  For details, see @ref{Ties}.

For ways of specifying durations for the syllables of lyrics and
ways of aligning lyrics to notes, see @ref{Vocal music}.

Optionally, notes can be spaced strictly proportionately to their
duration.  For details of this and other settings which control
proportional notation, see @ref{Proportional notation}.

@funindex \dotsUp
@funindex dotsUp
@funindex \dotsDown
@funindex dotsDown
@funindex \dotsNeutral
@funindex dotsNeutral

Dots are normally moved up to avoid staff lines, except in
polyphonic situations.  Dots may be manually placed above or below
the staff; see @ref{Direction and placement}.


@predefined
@code{\autoBeamOn},
@code{\autoBeamOff},
@code{\dotsUp},
@code{\dotsDown},
@code{\dotsNeutral}.
@endpredefined


@seealso
Music Glossary:
@rglos{breve},
@rglos{longa},
@rglos{maxima},
@rglos{note value},
@rglos{Duration names notes and rests}.

Notation Reference:
@ref{Automatic beams},
@ref{Ties},
@ref{Stems},
@ref{Writing rhythms},
@ref{Writing rests},
@ref{Vocal music},
@ref{Ancient notation},
@ref{Proportional notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Dots},
@rinternals{DotColumn}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited:
rests from 128th to maxima (8 x whole) may be printed.


@node Tuplets
@unnumberedsubsubsec Tuplets

@cindex tuplets
@cindex triplets

@funindex \times
@funindex times

Tuplets are made from a music expression by multiplying all the
durations with a fraction:

@example
\times @var{fraction} @{ @var{music} @}
@end example

@noindent
The duration of @var{music} will be multiplied by the
fraction.  The fraction's denominator will be printed over or
under the notes, optionally with a bracket.  The most common
tuplet is the triplet in which 3 notes have the duration of 2, so
the notes are 2/3 of their written length.

@lilypond[quote,verbatim,relative=2]
a2 \times 2/3 { b4 b b }
c4 c \times 2/3 { b4 a g }
@end lilypond

@cindex tuplet bracket placement

@funindex \tupletUp
@funindex tupletUp
@funindex \tupletDown
@funindex tupletDown
@funindex \tupletNeutral
@funindex tupletNeutral

Tuplet brackets may be manually placed above or below the staff;
see @ref{Direction and placement}.

Tuplets may be nested:

@lilypond[quote,verbatim,relative=2]
\autoBeamOff
c4 \times 4/5 { f8 e f \times 2/3 { e[ f g] } } f4 |
@end lilypond

Modifying nested tuplets which begin at the same musical moment
must be done with @code{\tweak}.

To modify the duration of notes without printing a tuplet bracket,
see @ref{Scaling durations}.


@predefined
@code{\tupletUp},
@code{\tupletDown},
@code{\tupletNeutral}.
@endpredefined


@snippets

@cindex tuplet formatting
@cindex triplet formatting

@funindex tupletNumberFormatFunction
@funindex tupletSpannerDuration

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{entering-several-tuplets-using-only-one--times-command.ly}

@cindex Tuplet number changes

@funindex TupletNumber

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-the-tuplet-number.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{non-default-tuplet-numbers.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{permitting-line-breaks-within-beamed-tuplets.ly}


@seealso
Music Glossary:
@rglos{triplet},
@rglos{tuplet},
@rglos{polymetric}.

Learning Manual:
@rlearning{Tweaking methods}.

Notation Reference:
@ref{Time administration},
@ref{Scaling durations},
@ref{The tweak command},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TupletBracket},
@rinternals{TupletNumber},
@rinternals{TimeScaledMusic}.


@cindex grace notes within tuplet brackets

@knownissues
When the first note on a staff is a grace note followed by a
tuplet the grace note must be placed before the @code{\times}
command to avoid errors.  Anywhere else, grace notes may be
placed within tuplet brackets.


@node Scaling durations
@unnumberedsubsubsec Scaling durations

@cindex scaling durations
@cindex durations, scaling

You can alter the duration of single notes, rests or chords by a
fraction @code{N/M} by appending @code{*N/M} (or @code{*N} if @code{M}
is 1) to the duration.  This will not affect the appearance of the
notes or rests produced, but the altered duration will be used in
calculating the position within the measure and setting the duration
in the MIDI output.  Multiplying factors may be combined such as
@code{*L*M/N}.

In the following example, the first three notes take up exactly
two beats, but no triplet bracket is printed.

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Alter durations to triplets
a4*2/3 gis4*2/3 a4*2/3
% Normal durations
a4 a4
% Double the duration of chord
<a d>4*2
% Duration of quarter, appears like sixteenth
b16*4 c4
@end lilypond

The duration of skip or spacing notes may also be modified by
a multiplier.  This is useful for skipping many measures, e.g.,
@code{s1*23}.

@cindex compressing music
@cindex expanding music

@funindex \scaleDurations
@funindex scaleDurations

Longer stretches of music may be compressed by a fraction in the
same way, as if every note, chord or rest had the fraction as a
multiplier.  This leaves the appearance of the music unchanged but
the internal duration of the notes will be multiplied by the
fraction @emph{num}/@emph{den}.  The spaces around the dot are
required.  Here is an example showing how music can be compressed
and expanded:

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Normal durations
<c a>4 c8 a
% Scale music by *2/3
\scaleDurations #'(2 . 3) {
  <c a f>4. c8 a f
}
% Scale music by *2
\scaleDurations #'(2 . 1) {
  <c' a>4 c8 b
}
@end lilypond

One application of this command is in polymetric
notation, see @ref{Polymetric notation}.


@seealso
Notation Reference:
@ref{Tuplets},
@ref{Invisible rests},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.


@node Ties
@unnumberedsubsubsec Ties

@cindex tie

@funindex ~

A tie connects two adjacent note heads of the same pitch.  The tie
in effect extends the duration of a note.

@warning{Ties should not be confused with @emph{slurs}, which
indicate articulation, or @emph{phrasing slurs}, which indicate
musical phrasing.  A tie is just a way of extending a note
duration, similar to the augmentation dot.}

A tie is entered using the tilde symbol (@code{~}).

@lilypond[quote,verbatim,relative=2]
a2 ~ a
@end lilypond

Ties are used either when the note crosses a bar line, or when
dots cannot be used to denote the rhythm.  Ties should also be
used when note values cross larger subdivisions of the measure:

@lilypond[verbatim,quote]
\relative c' {
  r8 c8 ~ c2 r4 |
  r8^"not" c2 ~ c8 r4
}
@end lilypond

If you need to tie many notes across bar lines, it may be
easier to use automatic note splitting, see @ref{Automatic note
splitting}.  This mechanism automatically splits long notes, and
ties them across bar lines.

@cindex ties and chords
@cindex chords and ties

When a tie is applied to a chord, all note heads whose pitches
match are connected.  When no note heads match, no ties will be
created.  Chords may be partially tied by placing the tie inside
the chord.

@lilypond[quote,verbatim,relative=1]
<c e g> ~ <c e g>
<c~ e g~ b> <c e g b>
@end lilypond

@cindex repeating ties
@cindex ties, repeating
@cindex volta brackets and ties
@cindex ties and volta brackets

@funindex \repeatTie
@funindex repeatTie

When a second alternative of a repeat starts with a tied note, you
have to specify the repeated tie as follows:

@lilypond[quote,relative=2,verbatim]
\repeat volta 2 { c g <c e>2 ~ }
\alternative {
  % First alternative: following note is tied normally
  { <c e>2. r4 }
  % Second alternative: following note has a repeated tie
  { <c e>2\repeatTie d4 c } }
@end lilypond

@cindex laissez vibrer
@cindex ties, laissez vibrer

@funindex \laissezVibrer
@funindex laissezVibrer

@notation{L.v.}@: ties (@notation{laissez vibrer}) indicate that
notes must not be damped at the end.  It is used in notation for
piano, harp and other string and percussion instruments.  They can
be entered as follows:

@lilypond[quote,verbatim,relative=1]
<c f g>1\laissezVibrer
@end lilypond

@cindex ties, placement

@funindex \tieUp
@funindex tieUp
@funindex \tieDown
@funindex tieDown
@funindex \tieNeutral
@funindex tieNeutral

Ties may be manually placed above or below the staff; see
@ref{Direction and placement}.

@cindex ties, appearance
@cindex ties, dotted
@cindex ties, dashed
@cindex dashed ties
@cindex dotted ties

@funindex \tieDotted
@funindex tieDotted
@funindex \tieDashed
@funindex tieDashed
@funindex \tieSolid
@funindex tieSolid

Ties may be made dashed, dotted, or a combination of solid and
dashed.

@lilypond[quote, verbatim, relative=1]
\tieDotted
c2 ~ c
\tieDashed
c2 ~ c
\tieHalfDashed
c2 ~ c
\tieHalfSolid
c2 ~ c
\tieSolid
c2 ~ c
@end lilypond

Custom dash patterns can be specified:

@lilypond[quote, verbatim, relative=1]
\tieDashPattern #0.3 #0.75
c2 ~ c
\tieDashPattern #0.7 #1.5
c2 ~ c
\tieSolid
c2 ~ c
@end lilypond

Dash pattern definitions for ties have the same structure as
dash pattern definitions for slurs.
For more information about complex dash patterns,
see the snippets under @ref{Slurs}.

@predefined
@code{\tieUp},
@code{\tieDown},
@code{\tieNeutral},
@code{\tieDotted},
@code{\tieDashed},
@code{\tieDashPattern},
@code{\tieHalfDashed},
@code{\tieHalfSolid},
@code{\tieSolid}.
@endpredefined


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{using-ties-with-arpeggios.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{engraving-ties-manually.ly}


@seealso
Music Glossary:
@rglos{tie},
@rglos{laissez vibrer}.

Notation Reference:
@ref{Slurs},
@ref{Automatic note splitting}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{LaissezVibrerTie},
@rinternals{LaissezVibrerTieColumn},
@rinternals{TieColumn},
@rinternals{Tie}.


@knownissues

Switching staves when a tie is active will not produce a slanted
tie.

Changing clefs or octavations during a tie is not really
well-defined.  In these cases, a slur may be preferable.



@node Writing rests
@subsection Writing rests

Rests are entered as part of the music in music expressions.

@menu
* Rests::
* Invisible rests::
* Full measure rests::
@end menu

@node Rests
@unnumberedsubsubsec Rests

@cindex rest
@cindex rest, entering durations
@cindex maxima rest
@cindex longa rest
@cindex breve rest

@funindex \rest
@funindex rest
@funindex r
@funindex \maxima
@funindex maxima
@funindex \longa
@funindex longa
@funindex \breve
@funindex breve

Rests are entered like notes with the note name @code{r}.
Durations longer than a whole rest use the predefined
commands shown:

@c \time 16/1 is used to avoid spurious bar lines
@c and long tracts of empty measures
@lilypond[fragment,quote,verbatim]
\new Staff {
  % These two lines are just to prettify this example
  \time 16/1
  \override Staff.TimeSignature #'stencil = ##f
  % Print a maxima rest, equal to four breves
  r\maxima
  % Print a longa rest, equal to two breves
  r\longa
  % Print a breve rest
  r\breve
  r1 r2 r4 r8 r16 r32 r64 r128
}
@end lilypond

@cindex rest, multi-measure
@cindex rest, whole-measure

Whole measure rests, centered in the middle of the measure, must be
entered as multi-measure rests.  They can be used for a single
measure as well as many measures and are discussed in @ref{Full
measure rests}.

@cindex rest, specifying vertical position

To explicitly specify a rest's vertical position, write a note
followed by @code{\rest}.  A rest of the duration of the note will
be placed at the staff position where the note would appear.  This
allows for precise manual formatting of polyphonic music, since the
automatic rest collision formatter will not move these rests.

@lilypond[quote,verbatim,relative=2]
a4\rest d4\rest
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{rest-styles.ly}


@seealso
Music Glossary:
@rglos{breve},
@rglos{longa},
@rglos{maxima}.

Notation Reference:
@ref{Full measure rests}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Rest}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited: there
are rests from 128th to maxima (8 x whole).


@node Invisible rests
@unnumberedsubsubsec Invisible rests

@cindex skip
@cindex invisible rest
@cindex rest, invisible
@cindex spacer note
@cindex spacer rest

@funindex s
@funindex \skip
@funindex skip

An invisible rest (also called a @q{spacer rest}) can be entered
like a note with the note name@tie{}@code{s}:

@lilypond[verbatim,quote,relative=2]
c4 c s c
s2 c
@end lilypond

@cindex lyrics, skip

Spacer rests are available only in note mode and chord mode.  In
other situations, for example, when entering lyrics, @code{\skip}
is used to skip a musical moment.  @code{\skip} requires an
explicit duration.

@lilypond[quote,verbatim,relative=2]
<<
  {
    a2 \skip2 a2 a2
  }
  \new Lyrics {
    \lyricmode {
      foo2 \skip 1 bla2
    }
  }
>>
@end lilypond

A spacer rest implicitly causes @code{Staff} and @code{Voice}
contexts to be created if none exist, just like notes and rests
do:

@lilypond[quote,verbatim,fragment]
s1 s s
@end lilypond

@code{\skip} simply skips musical time; it creates no output of
any kind.

@lilypond[quote,verbatim,fragment]
% This is valid input, but does nothing
\skip 1 \skip1 \skip 1
@end lilypond


@seealso
Learning Manual:
@rlearning{Visibility and color of objects}.

Notation Reference:
@ref{Hidden notes},
@ref{Visibility of objects}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{SkipMusic}.


@node Full measure rests
@unnumberedsubsubsec Full measure rests

@cindex multi-measure rests
@cindex full-measure rests
@cindex rest, multi-measure
@cindex rest, full-measure
@cindex whole rest for a full measure
@cindex rest, whole for a full measure

@funindex R

Rests for one or more full measures are entered like notes with
the note name uppercase @code{R}:

@lilypond[quote,verbatim,relative=2]
% Rest measures contracted to single measure
\compressFullBarRests
R1*4
R1*24
R1*4
b2^"Tutti" b4 a4
@end lilypond

The duration of full-measure rests is identical to the duration
notation used for notes.  The duration in a multi-measure rest must
always be an integral number of measure-lengths, so augmentation dots
or fractions must often be used:

@lilypond[quote,fragment,verbatim]
\compressFullBarRests
\time 2/4
R1 | R2 |
\time 3/4
R2. | R2.*2 |
\time 13/8
R1*13/8 | R1*13/8*12 |
\time 10/8
R4*5*4 |
@end lilypond

A full-measure rest is printed as either a whole or breve rest,
centered in the measure, depending on the time signature.

@lilypond[quote,verbatim,fragment]
\time 4/4
R1 |
\time 6/4
R1*3/2 |
\time 8/4
R1*2 |
@end lilypond

@cindex multi-measure rest, expanding
@cindex multi-measure rest, contracting

@funindex \expandFullBarRests
@funindex expandFullBarRests
@funindex \compressFullBarRests
@funindex compressFullBarRests

By default a multi-measure rest is expanded in the printed score to
show all the rest measures explicitly.  Alternatively, a multi-measure
rest can be shown as a single measure containing a multi-measure rest
symbol, with the number of measures of rest printed above the measure:

@lilypond[quote,fragment,verbatim]
% Default behavior
\time 3/4 r2. | R2.*2 |
\time 2/4 R2 |
\time 4/4
% Rest measures contracted to single measure
\compressFullBarRests
r1 | R1*17 | R1*4 |
% Rest measures expanded
\expandFullBarRests
\time 3/4
R2.*2 |
@end lilypond


@cindex text on multi-measure rest
@cindex multi-measure rest, attaching text
@cindex script on multi-measure rest
@cindex multi-measure rest, script
@cindex fermata on multi-measure rest
@cindex multi-measure rest, attaching fermata
@cindex markup on multi-measure rest
@cindex multi-measure rest with markup

@funindex \fermataMarkup
@funindex fermataMarkup
@funindex MultiMeasureRestText

Markups can be added to multi-measure rests.
The predefined command @code{\fermataMarkup}
is provided for adding fermatas.

@lilypond[quote,verbatim,fragment]
\compressFullBarRests
\time 3/4
R2.*10^\markup { \italic "ad lib." }
R2.^\fermataMarkup
@end lilypond

@warning{
Markups attached to a multi-measure rest are
objects of type @code{MultiMeasureRestText}, not
@code{TextScript}.  Overrides must be directed to the correct
object, or they will be ignored.  See the following example.
}

@lilypond[quote,verbatim,fragment]
% This fails, as the wrong object name is specified
\override TextScript #'padding = #5
R1^"wrong"
% This is correct and works
\override MultiMeasureRestText #'padding = #5
R1^"right"
@end lilypond

When a multi-measure rest immediately follows a @code{\partial}
setting, resulting bar-check warnings may not be displayed.


@funindex \textLengthOn
@funindex textLengthOn
@funindex \textLengthOff
@funindex textLenthOff
@funindex \fermataMarkup
@funindex fermataMarkup
@funindex \compressFullBarRests
@funindex compressFullBarRests
@funindex \expandFullBarRests
@funindex expandFullBarRests

@predefined
@code{\textLengthOn},
@code{\textLengthOff},
@code{\fermataMarkup},
@code{\compressFullBarRests},
@code{\expandFullBarRests}.
@endpredefined


@snippets

@cindex church rest
@cindex rest, church
@cindex kirchenpausen

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-form-of-multi-measure-rests.ly}

@cindex multi-measure rests, positioning
@cindex positioning multi-measure rests

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{positioning-multi-measure-rests.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{multi-measure-rest-markup.ly}


@seealso
Music Glossary:
@rglos{multi-measure rest}.

Notation Reference:
@ref{Durations},
@ref{Text},
@ref{Formatting text},
@ref{Text scripts}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{MultiMeasureRest},
@rinternals{MultiMeasureRestNumber},
@rinternals{MultiMeasureRestText}.


@cindex fingerings and multi-measure rests
@cindex multi-measure rests and fingerings

@knownissues

If an attempt is made to use fingerings (e.g.,
@code{R1*10-4}) to put numbers over multi-measure rests, the
fingering numeral (4) may collide with the bar counter
numeral (10).

@cindex condensing rests
@cindex rest, condensing ordinary

There is no way to automatically condense multiple ordinary rests
into a single multi-measure rest.

@cindex rest, collisions of

Multi-measure rests do not take part in rest collisions.

@node Displaying rhythms
@subsection Displaying rhythms

@menu
* Time signature::
* Upbeats::
* Unmetered music::
* Polymetric notation::
* Automatic note splitting::
* Showing melody rhythms::
@end menu

@node Time signature
@unnumberedsubsubsec Time signature

@cindex time signature
@cindex meter

@funindex \time
@funindex time

The time signature is set as follows:

@lilypond[quote,verbatim,relative=2]
\time 2/4 c2
\time 3/4 c2.
@end lilypond

@cindex time signature, visibility of

Time signatures are printed at the beginning of a piece
and whenever the time signature changes.  If a change takes place
at the end of a line a warning time signature sign is printed
there.  This default behavior may be changed, see
@ref{Visibility of objects}.

@lilypond[quote,verbatim,relative=2]
\time 2/4
c2 c
\break
c c
\break
\time 4/4
c c c c
@end lilypond

@cindex time signature style
@cindex meter style

@funindex \numericTimeSignature
@funindex numericTimeSignature
@funindex \defaultTimeSignature
@funindex defaultTimeSignature

The time signature symbol that is used in 2/2 and 4/4 time can be
changed to a numeric style:

@lilypond[quote,verbatim,relative=2]
% Default style
\time 4/4 c1
\time 2/2 c1
% Change to numeric style
\numericTimeSignature
\time 4/4 c1
\time 2/2 c1
% Revert to default style
\defaultTimeSignature
\time 4/4 c1
\time 2/2 c1
@end lilypond


Mensural time signatures are covered in
@ref{Mensural time signatures}.


@predefined
@code{\numericTimeSignature},
@code{\defaultTimeSignature}.
@endpredefined


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-the-time-signature-without-affecting-the-beaming.ly}

@cindex compound time signatures
@cindex time signature, compound

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{compound-time-signatures.ly}

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{time-signature-printing-only-the-numerator-as-a-number-instead-of-the-fraction.ly}


@seealso
Music Glossary:
@rglos{time signature}

Notation Reference:
@ref{Mensural time signatures},
@ref{Time administration}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator}.


@node Upbeats
@unnumberedsubsubsec Upbeats

@cindex anacrusis
@cindex upbeat
@cindex partial measure
@cindex measure, partial
@cindex pickup measure
@cindex measure, change length

@funindex measurePosition
@funindex \partial
@funindex partial

Partial or pick-up measures, such as an anacrusis or upbeat, are
entered using the @code{\partial} command, with the syntax

@example
\partial @var{duration}
@end example

@noindent
where @code{duration} is the rhythmic length of the interval
before the start of the first complete measure:

@lilypond[quote,verbatim,relative=2]
\partial 4 e4 |
a2. c,4 |
@end lilypond

The partial measure can be any duration less than a full measure:

@lilypond[quote,verbatim,relative=2]
\partial 8*3 c8 d e |
a2. c,4 |
@end lilypond

Internally, @code{\partial} is translated into

@example
\set Timing.measurePosition = -@var{duration}
@end example

@noindent
The property @code{measurePosition} contains a rational number
indicating how much of the measure has passed at this point.  Note
that this is set to a negative number by the @code{\partial}
command: i.e., @code{\partial 4} is internally translated to
@code{-4}, meaning @qq{there is a quarter note left in the measure.}


@seealso
Music Glossary:
@rglos{anacrusis}.

Notation Reference:
@ref{Grace notes}.

Snippets:
@rlsr{Rhythms}.

Internal Reference:
@rinternals{Timing_translator}.


@knownissues

The @code{\partial} command is intended to be used only at the
beginning of a piece.  If you use it after the beginning, some
odd warnings may occur.

@node Unmetered music
@unnumberedsubsubsec Unmetered music

@cindex bar lines, turning off
@cindex bar numbering, turning off
@cindex cadenza
@cindex unmetered music

@funindex \cadenzaOn
@funindex cadenzaOn
@funindex \cadenzaOff
@funindex cadenzaOff

Bar lines and bar numbers are calculated automatically.  For
unmetered music (some cadenzas, for example), this is not desirable.
To turn off automatic calculation of bar lines and bar numbers,
use the command @code{\cadenzaOn}, and use @code{\cadenzaOff}
to turn them on again.

@lilypond[verbatim,relative=2,fragment]
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Bar numbering is resumed at the end of the cadenza as if the
cadenza were not there:

@lilypond[verbatim,relative=2,fragment]
% Show all bar numbers
\override Score.BarNumber #'break-visibility = #all-visible
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Note that these predefined commands affect all staves in the
score, even when they are placed in just one @code{Voice}
context.  To change this, move the @code{Timing_translator}
from the @code{Score} context to the @code{Staff} context, as
shown in @ref{Polymetric notation}.

@predefined
@code{\cadenzaOn},
@code{\cadenzaOff}.
@endpredefined


@seealso
Music Glossary:
@rglos{cadenza}.

Notation Reference:
@ref{Visibility of objects},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.


@cindex cadenza line breaks
@cindex cadenza page breaks
@cindex unmetered music, line breaks
@cindex unmetered music, page breaks
@cindex breaks in unmetered music
@cindex line breaks in cadenzas
@cindex page breaks in cadenzas
@cindex line breaks in unmetered music
@cindex page breaks in unmetered music

@knownissues

LilyPond will insert line breaks and page breaks only at a
bar line.  Unless the unmetered music ends before the end of the
staff line, you will need to insert invisible bar lines with

@example
\bar ""
@end example

@noindent
to indicate where breaks can occur.

You must explicitly create a @code{Voice} context when starting a
piece with @code{\cadenzaOn}, otherwise strange errors may occur.

@lilypond[verbatim,relative=2,fragment]
\new Voice \relative c'{
  \cadenzaOn
  c16^"Solo Free Time" d e f g2. \bar "||"
  \cadenzaOff
}
@end lilypond


@node Polymetric notation
@unnumberedsubsubsec Polymetric notation

@c This section necessarily uses \set
@c This is acceptable  -td

@cindex double time signatures
@cindex signatures, polymetric
@cindex time signatures, polymetric
@cindex time signatures, double
@cindex polymetric signatures
@cindex meter, polymetric

@funindex timeSignatureFraction
@funindex \scaleDurations
@funindex scaleDurations
@funindex \times
@funindex times

Polymetric notation is supported, either explicitly or by modifying
the visible time signature symbol and scaling the note durations.

@strong{@i{Staves with different time signatures, equal measure lengths}}

This notation can be created by setting a common time signature
for each staff but replacing the symbol manually by setting
@code{timeSignatureFraction} to the desired fraction and scaling
the printed durations in each staff to the common time
signature; see @ref{Time signature}.  The scaling is done with
@code{\scaleDurations}, which is used in a similar way to
@code{\times}, but does not create a tuplet bracket; see
@ref{Scaling durations}.

@cindex beaming in polymetric music
@cindex beaming in polymetric meter

In this example, music with the time signatures of 3/4, 9/8, and
10/8 are used in parallel.  In the second staff, shown durations
are multiplied by 2/3, as 2/3 * 9/8 = 3/4, and in the third
staff, shown durations are multiplied by 3/5, as 3/5 * 10/8 = 3/4.
It will often be necessary to insert beams manually, as the
duration scaling affects the autobeaming rules.

@lilypond[quote,verbatim,fragment]
\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c c c |
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(9 . 8)
    \scaleDurations #'(2 . 3)
    \repeat unfold 6 { c8[ c c] }
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(10 . 8)
    \scaleDurations #'(3 . 5) {
      \repeat unfold 2 { c8[ c c] }
      \repeat unfold 2 { c8[ c] } |
      c4. c4. \times 2/3 { c8[ c c] } c4
    }
  }
>>
@end lilypond

@strong{@i{Staves with different time signatures, unequal bar lengths}}

Each staff can be given its own independent time signature by
moving the @code{Timing_translator} and the
@code{Default_bar_line_engraver} to the @code{Staff} context.

@lilypond[quote,verbatim]
\layout {
  \context {
    \Score
    \remove "Timing_translator"
    \remove "Default_bar_line_engraver"
  }
  \context {
    \Staff
    \consists "Timing_translator"
    \consists "Default_bar_line_engraver"
  }
}

% Now each staff has its own time signature.

\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c4 c c |
  }
  \new Staff {
    \time 2/4
    c4 c |
    c4 c |
    c4 c |
  }
  \new Staff {
    \time 3/8
    c4. |
    c8 c c |
    c4. |
    c8 c c |
  }
>>
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{compound-time-signatures.ly}


@seealso
Music Glossary:
@rglos{polymetric},
@rglos{polymetric time signature},
@rglos{meter}.

Notation Reference:
@ref{Time signature},
@ref{Scaling durations}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator},
@rinternals{Default_bar_line_engraver},
@rinternals{Staff}.


@knownissues

When using different time signatures in parallel, notes
at the same moment will be be placed at the same horizontal
location.  However, the bar lines in the different staves
will cause the note spacing to be less regular in each of the
individual staves than would be normal without the different
time signatures.

@node Automatic note splitting
@unnumberedsubsubsec Automatic note splitting

@cindex notes, splitting
@cindex splitting notes

@funindex Note_heads_engraver
@funindex Completion_heads_engraver

Long notes which overrun bar lines can be converted automatically
to tied notes.  This is done by replacing the
@code{Note_heads_engraver} with the
@code{Completion_heads_engraver}.  In the following
example, notes crossing the bar lines are split and tied.

@lilypond[quote,verbatim,relative=1]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
}

{ c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 }
@end lilypond

This engraver splits all running notes at the bar line, and
inserts ties.  One of its uses is to debug complex scores: if the
measures are not entirely filled, then the ties show exactly how
much each measure is off.


@seealso
Music Glossary:
@rglos{tie}

Learning Manual:
@rlearning{Engravers explained},
@rlearning{Adding and removing engravers}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Note_heads_engraver},
@rinternals{Completion_heads_engraver},
@rinternals{Forbid_line_break_engraver}.


@knownissues

Not all durations (especially those containing tuplets) can be
represented exactly with normal notes and dots, but the
@code{Completion_heads_engraver} will not insert tuplets.

The @code{Completion_heads_engraver} only affects notes; it does not
split rests.


@node Showing melody rhythms
@unnumberedsubsubsec Showing melody rhythms

@cindex melody rhythms, showing
@cindex rhythms, showing melody

Sometimes you might want to show only the rhythm of a melody.  This
can be done with the rhythmic staff.  All pitches of notes on such a
staff are squashed, and the staff itself has a single line

@lilypond[quote,relative=1,verbatim]
<<
  \new RhythmicStaff {
    \new Voice = "myRhythm" {
      \time 4/4
      c4 e8 f g2
      r4 g g f
      g1
    }
  }
  \new Lyrics {
    \lyricsto "myRhythm" {
      This is my song
      I like to sing
    }
  }
>>
@end lilypond

@cindex guitar chord charts
@cindex strumming rhythms, showing
@cindex guitar strumming rhythms, showing

@funindex Pitch_squash_engraver
@funindex \improvisationOn
@funindex improvisationOn
@funindex \improvisationOff
@funindex improvisationOff

Guitar chord charts often show the strumming rhythms.  This can
be done with the @code{Pitch_squash_engraver} and
@code{\improvisationOn}.


@lilypond[quote,verbatim]
<<
  \new ChordNames {
    \chordmode {
      c1 f g c
    }
  }

  \new Voice \with {
    \consists Pitch_squash_engraver
  } \relative c'' {
    \improvisationOn
    c4 c8 c c4 c8 c
    f4 f8 f f4 f8 f
    g4 g8 g g4 g8 g
    c4 c8 c c4 c8 c
  }
>>
@end lilypond


@predefined
@code{\improvisationOn},
@code{\improvisationOff}.
@endpredefined


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{guitar-strum-rhythms.ly}


@seealso
Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{RhythmicStaff},
@rinternals{Pitch_squash_engraver}.


@node Beams
@subsection Beams

@menu
* Automatic beams::
* Setting automatic beam behavior::
* Manual beams::
* Feathered beams::
@end menu

@node Automatic beams
@unnumberedsubsubsec Automatic beams

By default, beams are inserted automatically:

@cindex beams, manual
@cindex manual beams
@cindex beams, setting rules for
@cindex beams, custom rules for

@funindex \autoBeamOn
@funindex autoBeamOn
@funindex \autoBeamOff
@funindex autoBeamOff

@lilypond[quote,verbatim,relative=2]
\time 2/4 c8 c c c
\time 6/8 c c c c8. c16 c8
@end lilypond

If these automatic decisions are not satisfactory, beaming can be
entered explicitly; see @ref{Manual beams}.  Beams @emph{must} be
entered manually if beams are to be extended over rests.

If automatic beaming is not required, it may be turned off with
@code{\autoBeamOff} and on with @code{\autoBeamOn}:

@lilypond[quote,relative=1,verbatim]
c4 c8 c8. c16 c8. c16 c8
\autoBeamOff
c4 c8 c8. c16 c8.
\autoBeamOn
c16 c8
@end lilypond

@cindex melismata, beams
@cindex beams and melismata

@warning{If beams are used to indicate melismata in songs, then
automatic beaming should be switched off with @code{\autoBeamOff}
and the beams indicated manually.}

Beaming patterns that differ from the automatic defaults can be
created; see @ref{Setting automatic beam behavior}.


@predefined
@code{\autoBeamOff},
@code{\autoBeamOn}.
@endpredefined


@snippets

@cindex line breaks and beams
@cindex beams and line breaks

@funindex breakable

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beams-across-line-breaks.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-beam-knee-gap.ly}


@seealso
Notation Reference:
@ref{Manual beams},
@ref{Setting automatic beam behavior}.

Installed Files:
@file{scm/@/auto@/-beam@/.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Auto_beam_engraver},
@rinternals{Beam_engraver},
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface},
@rinternals{unbreakable-spanner-interface}.


@knownissues

Beams can collide with note heads and accidentals in other voices.


@node Setting automatic beam behavior
@unnumberedsubsubsec Setting automatic beam behavior


@cindex automatic beams, tuning
@cindex tuning automatic beaming
@cindex automatic beam generation
@cindex autobeam
@cindex lyrics and beaming

@funindex autoBeaming
@funindex beamSettings
@funindex measureLength
@funindex beatLength
@funindex \time
@funindex time
@funindex \set
@funindex set

The placement of automatic beams is determined by the time signature.
Three types of rules are used for determining the end of automatic
beams: @emph{default} rules
for the time signature, @emph{explicit} rules for the beam in the time
signature, and the @emph{beatLength} for the time signature.

The following rules, in order of priority, apply when determining
the appearance of beams:

@itemize
@item
If a manual beam is specified with @code{[..]} set the beam
as specified, otherwise

@item
if @code{\autoBeamOff} is in force do not beam, otherwise

@item
if an explicit beam-ending rule is defined for the beam type
in the time signature, use it to determine the valid
places where beams may end, otherwise

@item
if a default beam-ending rule is defined in the time signature,
use it to group notes with beams, otherwise

@item
use the value of @code{beatLength} to group notes with beams

@end itemize

@i{@strong{Modifying the grouping of beats}}

By default @code{beatLength} is
derived from the time signature set by the @code{\time} command.
The @code{beatLength} is set to be one over the denominator
of the time signature.

@code{beatLength} is a @i{moment},
a unit of musical duration.  A quantity of type @i{moment} is
created by the scheme function @code{ly:make-moment}.  For more
information about this function, see @ref{Time administration}.

Autobeam and beam subdivide settings are stored in the
@code{beamSettings} property.  Default values of @code{beamSettings}
are determined in @file{scm/@/beam@/-settings@/.scm}.  Entries in
@code{beamSettings} are indexed by time signature and
rule type.

Time signature should be a scheme pair , e.g. @code{#'(4 . 4)}.

Rule type should be @code{#'end} for beam ending and @code{#'subdivide} for
beam subdivision.

The ending and subdivision rules consist of a scheme alist
(or list of pairs) that
indicates the beam type and the grouping to be applied to that
beam type.

@example
#'((beam-type1 . grouping-1)
   (beam-type2 . grouping-2)
   (beam-type3 . grouping-3))
@end example

Beam type is either a scheme pair indicating the duration
of the beam, e.g. @code{(1 . 16)}, or @code{*} to indicate a
default rule, which applies to all beams if no explicit rule is
defined.

Grouping is a scheme list indicating the grouping to be applied to
the beam.  For default rules (where beam type is
@code{*}, the grouping is in units of @code{beatLength}.
For explicit rules, the grouping is in units of the beam type.

For reference, the default beaming rules are found in
@file{scm/beam-settings.scm}.

Beam settings are changed with
@code{\overrideBeamSettings} and @code{\revertBeamSettings}.

@warning{
The ending and subdivision settings must be
@emph{complete} rules.  That is, every rule that should apply to
the current time signature must be included in the setting.
It is not possible to change the grouping of only one beam type
for a given time signature.  While this may seem cumbersome,
it means that the current beaming settings need not be known
in order to specify a new beaming pattern.}

@lilypond[quote,relative=2,verbatim]
\time 5/16
c8^"beats" c16 c8 |
\overrideBeamSettings #'Score #'(5 . 16) #'end #'((* . (2 3)))
c8^"(2+3)" c16 c8
\overrideBeamSettings #'Score #'(5 . 16) #'end #'((* . (3 2)))
c8^"(3+2)" c16 c8
@end lilypond

Beam setting changes can be limited to specific contexts.  If no
setting is included in a lower-level context, the setting of the
enclosing context will apply.

@lilypond[quote, verbatim,relative=1]
\new Staff <<
  \time 7/8
  \new Voice = one {
    \relative c'' {
      \overrideBeamSettings #'Staff #'(7 . 8) #'end #'((* . (2 3 2)))
        a8 a a a a a a
    }
  }
  \new Voice  = two {
    \relative c' {
      \voiceTwo
      \overrideBeamSettings #'Voice #'(7 . 8) #'end #'((* . (1 3 3)))
      f8 f f f f f f
    }
  }
>>
@end lilypond

When multiple voices are used the @code{Staff} context must be
specified if the beaming is to be applied to all voices in the
staff:

@lilypond[quote,verbatim,relative=2]
\time 7/8
% rhythm 3-1-1-2
% Context Voice specified --  does not work correctly
% Because of autogenerated voices, all beating will
% be at beatLength (1 . 8)
\overrideBeamSettings #'Voice #'(7 . 8) #'end #'((* . (3 1 1 2)))
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>

% Works correctly with context Staff specified
\overrideBeamSettings #'Staff #'(7 . 8) #'end #'((* . (3 1 1 2)))
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>
@end lilypond

@funindex revertBeamSettings

Beam settings can be reverted to get back to default behavior.  This
is accomplished by using @code{\revertBeamSettings}.  The arguments
are the same as for @code{\overrideBeamSettings}, except no value
for @var{grouping} is given:

@example
\revertBeamSettings context time-signature rule-type
@end example


@lilypond[quote,verbatim,relative=2]
\time 4/4
\repeat unfold 8 {a8}
% set default rule for (1 1 1 1) grouping
\overrideBeamSettings #'Score #'(4 . 4) #'end #'((* . (1 1 1 1)))
\repeat unfold 8 {a8}
% revert the new rule
\revertBeamSettings #'Score #'(4 . 4) #'end
\repeat unfold 8 {a8}
@end lilypond


@predefined
@code{\overrideBeamSettings},
@code{\revertBeamSettings}.
@endpredefined


@snippets

@cindex beams, subdividing

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{sub-dividing-beams.ly}

@cindex measure groupings
@cindex beats, grouping
@cindex grouping beats
@cindex measure sub-grouping

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{conducting-signs,-measure-grouping-signs.ly}

@cindex beam, last in score
@cindex beam, last in polyphonic voice

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beam-endings-in-score-context.ly}


@seealso
Installed files:
@file{scm/beam-settings.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Auto_beam_engraver},
@rinternals{Beam},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface}.


@knownissues

If a score ends while an automatic beam has not been ended and is
still accepting notes, this last beam will not be typeset at all.
The same holds for polyphonic voices, entered with @code{<<
@dots{} \\ @dots{} >>}.  If a polyphonic voice ends while an
automatic beam is still accepting notes, it is not typeset.


@node Manual beams
@unnumberedsubsubsec Manual beams

@cindex beams, manual
@cindex manual beams

@funindex ]
@funindex [

In some cases it may be necessary to override the automatic
beaming algorithm.  For example, the autobeamer will not put beams
over rests or bar lines, and in choral scores the beaming is
often set to follow the meter of the lyrics rather than the
notes.  Such beams can be specified manually by
marking the begin and end point with @code{[} and @code{]}.

@lilypond[quote,relative=1,verbatim]
r4 r8[ g' a r8] r8 g[ | a] r8
@end lilypond

@cindex manual beams, direction shorthand for

Beaming direction can be set manually using direction indicators:

@lilypond[quote,relative=2,verbatim]
c8^[ d e] c,_[ d e f g]
@end lilypond

@funindex \noBeam
@funindex noBeam

Individual notes may be marked with @code{\noBeam} to prevent them
from being beamed:

@lilypond[quote,verbatim,relative=2]
\time 2/4
c8 c\noBeam c c
@end lilypond

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Even more strict manual control with the beams can be achieved by
setting the properties @code{stemLeftBeamCount} and
@code{stemRightBeamCount}.  They specify the number of beams to
draw on the left and right side, respectively, of the next note.
If either property is set, its value will be used only once, and
then it is erased.  In this example, the last @code{f} is printed
with only one beam on the left side, i.e., the eighth-note beam of
the group as a whole.

@lilypond[quote,relative=2,verbatim]
a8[ r16 f g a]
a8[ r16
\set stemLeftBeamCount = #2
\set stemRightBeamCount = #1
f16
\set stemLeftBeamCount = #1
g16 a]
@end lilypond


@predefined
@code{\noBeam}.
@endpredefined


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{flat-flags-and-beam-nibs.ly}


@seealso
Notation Reference:
@ref{Direction and placement}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{Beam_engraver},
@rinternals{beam-interface},
@rinternals{Stem_engraver}.


@node Feathered beams
@unnumberedsubsubsec Feathered beams

@cindex beams, feathered
@cindex feathered beams

@funindex \featherDurations
@funindex featherDurations
@funindex grow-direction

Feathered beams are used to indicate that a small group of notes
should be played at an increasing (or decreasing) tempo, without
changing the overall tempo of the piece.  The extent of the
feathered beam must be indicated manually using @code{[} and
@code{]}, and the beam feathering is turned on by specifying a
direction to the @code{Beam} property @code{grow-direction}.

If the placement of the notes and the sound in the MIDI output is to
reflect the ritardando or accelerando indicated by the feathered beam
the notes must be grouped as a music expression delimited by braces
and preceded by a @code{featherDurations} command which specifies
the ratio between the durations of the first and last notes in the
group.

The square brackets show the extent of the beam and the braces show
which notes are to have their durations modified.  Normally these
would delimit the same group of notes, but this is not required: the
two commands are independent.

In the following example the eight 16th notes occupy exactly the
same time as a half note, but the first note is one half as long
as the last one, with the intermediate notes gradually
lengthening.  The first four 32nd notes gradually speed up, while
the last four 32nd notes are at a constant tempo.

@lilypond[relative=1,verbatim,quote]
\override Beam #'grow-direction = #LEFT
\featherDurations #(ly:make-moment 2 1)
{ c16[ c c c c c c c] }
\override Beam #'grow-direction = #RIGHT
\featherDurations #(ly:make-moment 2 3)
{ c32[ d e f] }
% revert to non-feathered beams
\override Beam #'grow-direction = #'()
{ g32[ a b c] }
@end lilypond

@noindent
The spacing in the printed output represents the
note durations only approximately, but the MIDI output is exact.


@predefined
@code{\featherDurations}.
@endpredefined

@seealso
Snippets:
@rlsr{Rhythms}.


@knownissues

The @code{\featherDurations} command only works with very short
music snippets, and when numbers in the fraction are small.


@node Bars
@subsection Bars


@menu
* Bar lines::
* Bar numbers::
* Bar and bar number checks::
* Rehearsal marks::
@end menu

@node Bar lines
@unnumberedsubsubsec Bar lines

@cindex bar lines
@cindex measure lines
@cindex closing bar lines
@cindex bar lines, closing
@cindex double bar lines
@cindex bar lines, double
@cindex repeat bars

@funindex \bar
@funindex bar

Bar lines delimit measures, and are also used to indicate
repeats.  Normally, simple bar lines are automatically inserted
into the printed output at places based on the current time
signature.

The simple bar lines inserted automatically can be changed to
other types with the @code{\bar} command.  For example, a closing
double bar line is usually placed at the end of a piece:

@lilypond[quote,relative=1,verbatim]
e4 d c2 \bar "|."
@end lilypond

It is not invalid if the final note in a measure does not
end on the automatically entered bar line: the note is assumed
to carry over into the next measure.  But if a long sequence
of such carry-over measures appears the music can appear compressed
or even flowing off the page.  This is because automatic line
breaks happen only at the end of complete measures, i.e., where
all notes end before the end of a measure.

@warning{An incorrect duration can cause line breaks to be
inhibited, leading to a line of highly compressed music or
music which flows off the page.}

@cindex line breaks
@cindex bar lines, invisible
@cindex measure lines, invisible

Line breaks are also permitted at manually inserted bar lines
even within incomplete measures.  To allow a line break without
printing a bar line, use the following:

@example
\bar ""
@end example

@noindent
This will insert an invisible bar line and allow (but not
force) a line break to occur at this point.  The bar number
counter is not increased.  To force a line break see
@ref{Line breaking}.

@cindex manual bar lines
@cindex manual measure lines
@cindex bar lines, manual
@cindex measure lines, manual

This and other special bar lines may be inserted manually at any
point.  When they coincide with the end of a measure they replace
the simple bar line which would have been inserted there
automatically.  When they do not coincide with the end of a measure
the specified bar line is inserted at that point in the printed
output.

Note that manual bar lines are purely visual.  They do not affect
any of the properties that a normal bar line would affect, such as
measure numbers, accidentals, line breaks, etc.  They do not affect
the calculation and placement of subsequent automatic bar lines.
When a manual bar line is placed where a normal bar line already
exists, the effects of the original bar line are not altered.

Two types of simple bar lines and five types of double bar lines are
available for manual insertion:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|"
f1 \bar "."
g1 \bar "||"
a1 \bar ".|"
b1 \bar ".|."
c1 \bar "|.|"
d1 \bar "|."
e1
@end lilypond

@noindent
together with dotted and dashed bar lines:

@lilypond[quote,relative=1,verbatim]
f1 \bar ":"
g1 \bar "dashed"
a1
@end lilypond

@noindent
and five types of repeat bar line:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|:"
g1 \bar ":|:"
a1 \bar ":|.|:"
b1 \bar ":|.:"
c1 \bar ":|"
d1
@end lilypond

Additionally, a bar line can be printed as a simple tick:
@lilypond[quote,relative=1,verbatim]
f1 \bar "'"
@end lilypond
However, as such ticks are typically used in Gregorian chant, it is
preferable to use @code{\divisioMinima} there instead, described in
the section @ref{Divisiones} in Gregorian chant.


@cindex repeats

Although the bar line types signifying repeats may be inserted
manually they do not in themselves cause LilyPond to recognize
a repeated section.  Such repeated sections are better entered
using the various repeat commands (see @ref{Repeats}), which
automatically print the appropriate bar lines.

In addition, you can specify @code{"||:"}, which is equivalent to
@code{"|:"} except at line breaks, where it gives a double bar
line at the end of the line and a start repeat at the beginning of
the next line.

@lilypond[quote,relative=2,verbatim]
c4 c c c
\bar "||:"
c4 c c c \break
\bar "||:"
c4 c c c
@end lilypond

In scores with many staves, a @code{\bar} command in one staff is
automatically applied to all staves.  The resulting bar lines are
connected between different staves of a @code{StaffGroup},
@code{PianoStaff}, or @code{GrandStaff}.

@lilypond[quote,relative=1,verbatim]
<<
  \new StaffGroup <<
    \new Staff {
      e4 d
      \bar "||"
      f4 e
    }
    \new Staff { \clef bass c4 g e g }
  >>
  \new Staff { \clef bass c2 c2 }
>>
@end lilypond


@cindex default bar lines, changing
@cindex bar lines, default, changing

@snippets

@funindex whichBar
@funindex defaultBarType
@funindex \bar
@funindex bar
@funindex bartype

The command @code{\bar }@var{bartype} is a shortcut for
@code{\set Timing.whichBar = }@var{bartype}.  A bar line is
created whenever the @code{whichBar} property is set.

The default bar type used for automatically inserted bar lines is
@code{"|"}.  This may be changed at any time
with @code{\set Timing.defaultBarType = }@var{bartype}.


@seealso
Notation Reference:
@ref{Line breaking},
@ref{Repeats},
@ref{Grouping staves}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{BarLine} (created at @code{Staff} level),
@rinternals{SpanBar} (across staves),
@rinternals{Timing_translator} (for Timing properties).


@node Bar numbers
@unnumberedsubsubsec Bar numbers

@cindex bar numbers
@cindex measure numbers
@cindex numbers, bar
@cindex numbers, measure

@funindex currentBarNumber

Bar numbers are typeset by default at the start of every line except
the first line.  The number itself is stored in the
@code{currentBarNumber} property, which is normally updated
automatically for every measure.  It may also be set manually:

@lilypond[verbatim,quote,relative=1]
c1 c c c
\break
\set Score.currentBarNumber = #50
c1 c c c
@end lilypond

@cindex bar numbers, regular spacing

@funindex barNumberVisibility
@funindex BarNumber

Bar numbers can be typeset at regular intervals instead of just at
the beginning of every line.  To do this the default behavior
must be overridden to permit bar numbers to be printed at places
other than the start of a line.  This is controlled by the
@code{break-visibility} property of @code{BarNumber}.  This takes
three values which may be set to @code{#t} or @code{#f} to specify
whether the corresponding bar number is visible or not.  The order
of the three values is @code{end of line visible}, @code{middle of
line visible}, @code{beginning of line visible}.  In the following
example bar numbers are printed at all possible places:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber #'break-visibility = #'#(#t #t #t)
\set Score.currentBarNumber = #11
% Permit first bar number to be printed
\bar ""
c1 | c | c | c
\break
c1 | c | c | c
@end lilypond


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{printing-the-bar-number-for-the-first-measure.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{printing-bar-numbers-at-regular-intervals.ly}

@cindex measure number, format
@cindex bar number, format

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{printing-bar-numbers-inside-boxes-or-circles.ly}

@cindex bar number alignment

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{aligning-bar-numbers.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{removing-bar-numbers-from-a-score.ly}


@seealso
Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{BarNumber},
@rinternals{Bar_number_engraver}.


@cindex bar number collision
@cindex collision, bar number

@knownissues

Bar numbers may collide with the top of the @code{StaffGroup} bracket,
if there is one.  To solve this, the @code{padding} property of
@code{BarNumber} can be used to position the number correctly.  See
@rinternals{StaffGroup} and @rinternals{BarNumber} for more.


@node Bar and bar number checks
@unnumberedsubsubsec Bar and bar number checks

@cindex bar check
@cindex bar number check
@cindex measure check
@cindex measure number check

@funindex barCheckSynchronize
@funindex |

Bar checks help detect errors in the entered durations.  A bar check
may be entered using the bar symbol, @code{|}, at any place where a
bar line is expected to fall.  If bar check lines are encountered at
other places, a list of warnings is printed in the log file, showing
the line numbers and lines in which the bar checks failed.  In the
next example, the second bar check will signal an error.

@example
\time 3/4 c2 e4 | g2 |
@end example

Bar checks can also be used in lyrics:

@example
\lyricmode @{
  \time 2/4
  Twin -- kle | Twin -- kle |
@}
@end example

An incorrect duration can result in a completely garbled score,
especially if the score is polyphonic, so a good place to start
correcting input is by scanning for failed bar checks and
incorrect durations.

If successive bar checks are off by the same musical interval,
only the first warning message is displayed.  This allows the
warning to focus on the source of the timing error.


@funindex |
@funindex pipeSymbol

It is also possible to redefine the action taken when a bar check
or pipe symbol, @code{|}, is encountered in the input, so that
it does something other than a bar check.  This is done by
assigning a music expression to @code{pipeSymbol}.
In the following example @code{|} is set to insert a double bar
line wherever it appears in the input, rather than checking
for end of bar.

@lilypond[quote,verbatim]
pipeSymbol = \bar "||"
{
  c'2 c'2 |
  c'2 c'2
  c'2 | c'2
  c'2 c'2
}
@end lilypond

@funindex \barNumberCheck
@funindex barNumberCheck

When copying large pieces of music, it can be helpful to check that
the LilyPond bar number corresponds to the original that you are
entering from.  This can be checked with @code{\barNumberCheck}, for
example,

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
will print a warning if the @code{currentBarNumber} is not 123
when it is processed.


@seealso
Snippets:
@rlsr{Rhythms}.


@node Rehearsal marks
@unnumberedsubsubsec Rehearsal marks

@cindex rehearsal marks
@cindex mark, rehearsal

@funindex \mark
@funindex mark

To print a rehearsal mark, use the @code{\mark} command.

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
The letter@tie{}@q{I} is skipped in accordance with engraving
traditions.  If you wish to include the letter @q{I}, then use

@example
\set Score.markFormatter = #format-mark-alphabet
@end example

The mark is incremented automatically if you use @code{\mark
\default}, but you can also use an integer argument to set the
mark manually.  The value to use is stored in the property
@code{rehearsalMark}.

@cindex rehearsal mark format
@cindex rehearsal mark style
@cindex style, rehearsal mark
@cindex format, rehearsal mark
@cindex mark, rehearsal, style
@cindex mark, rehearsal, format
@cindex rehearsal mark, manual
@cindex mark, rehearsal, manual
@cindex custom rehearsal mark
@cindex manual rehearsal mark

The style is defined by the property @code{markFormatter}.  It is
a function taking the current mark (an integer) and the current
context as argument.  It should return a markup object.  In the
following example, @code{markFormatter} is set to a pre-defined
procedure.  After a few measures, it is set to a procedure that
produces a boxed number.

@lilypond[quote,verbatim,relative=2]
\set Score.markFormatter = #format-mark-numbers
c1 \mark \default
c1 \mark \default
\set Score.markFormatter = #format-mark-box-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-letters
c1
@end lilypond

The file @file{scm/@/translation@/-functions@/.scm} contains the
definitions of @code{format-mark-numbers} (the default format),
@code{format-mark-box-numbers}, @code{format-mark-letters} and
@code{format-mark-box-letters}.  These can be used as inspiration
for other formatting functions.

You may use @code{format-mark-barnumbers},
@code{format-mark-box-barnumbers}, and
@code{format-mark-circle-barnumbers} to get bar numbers instead of
incremented numbers or letters.

Other styles of rehearsal mark can be specified manually:

@example
\mark "A1"
@end example

@noindent
Note that @code{Score.markFormatter} does not affect marks specified
in this manner.  However, it is possible to apply a @code{\markup} to the
string.

@example
\mark \markup@{ \box A1 @}
@end example

@cindex segno
@cindex coda
@cindex D.S. al Fine
@cindex fermata
@cindex music glyphs
@cindex glyphs, music

@funindex \musicglyph
@funindex musicglyph

Music glyphs (such as the segno sign) may be printed inside a
@code{\mark}

@lilypond[quote,verbatim,relative=1]
c1 \mark \markup { \musicglyph #"scripts.segno" }
c1 \mark \markup { \musicglyph #"scripts.coda" }
c1 \mark \markup { \musicglyph #"scripts.ufermata" }
c1
@end lilypond

@noindent
See @ref{The Feta font}, for a list of symbols which may be
printed with @code{\musicglyph}.

For common tweaks to the positioning of rehearsal marks, see
@ref{Formatting text}.


@seealso
Notation Reference:
@ref{The Feta font},
@ref{Formatting text}.

Installed Files:
@file{scm/@/translation@/-functions@/.scm} contains
the definitions of @code{format-mark-numbers} and
@code{format-mark-letters}.  They can be used as inspiration for
other formatting functions.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{MarkEvent},
@rinternals{Mark_engraver},
@rinternals{RehearsalMark}.


@node Special rhythmic concerns
@subsection Special rhythmic concerns


@menu
* Grace notes::
* Aligning to cadenzas::
* Time administration::
@end menu

@node Grace notes
@unnumberedsubsubsec Grace notes

@cindex ornaments
@cindex grace notes
@cindex appoggiatura
@cindex acciaccatura

@funindex \grace
@funindex grace

Grace notes are ornaments that are written out. Grace notes
are printed in a smaller font and take up no logical time
in a measure.

@lilypond[quote,relative=2,verbatim]
c4 \grace c16 c4
\grace { c16[ d16] } c2
@end lilypond

LilyPond also supports two special types of grace notes, the
@emph{acciaccatura} -- an unmeasured grace note indicated by a slurred
small note with a slashed stem -- and the @emph{appoggiatura}, which
takes a fixed fraction of the main note and appears in small print
without a slash.

@lilypond[quote,relative=2,verbatim]
\grace c8 b4
\acciaccatura d8 c4
\appoggiatura e8 d4
\acciaccatura { g16[ f] } e4
@end lilypond

The placement of grace notes is synchronized between different
staves.  In the following example, there are two sixteenth grace
notes for every eighth grace note

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e2 \grace { c16[ d e f] } e2 }
  \new Staff { c2 \grace { g8[ b] } c2 }
>>
@end lilypond

@cindex grace notes, following

@funindex \afterGrace
@funindex afterGrace

If you want to end a note with a grace, use the @code{\afterGrace}
command.  It takes two arguments: the main note, and the grace
notes following the main note.

@lilypond[quote,verbatim,relative=2]
c1 \afterGrace d1 { c16[ d] } c1
@end lilypond

This will put the grace notes after a space lasting 3/4 of the
length of the main note.  The default fraction 3/4 can be changed by
setting @code{afterGraceFraction}.  The following example shows
the results from setting the space at the default,  at 15/16, and
finally at 1/2 of the main note.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 15 16))
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 1 2))
    c1 \afterGrace d1 { c16[ d] } c1
  }
>>
@end lilypond

The space between the main note and the grace note may also be
specified using spacers. The following example places the grace
note after a space lasting 7/8 of the main note.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  <<
    { d1^\trill_( }
    { s2 s4. \grace { c16[ d] } }
  >>
  c1)
}
@end lilypond

@cindex tweaking grace notes
@cindex grace notes, tweaking
@cindex grace notes, changing layout settings

A @code{\grace} music expression will introduce special
typesetting settings, for example, to produce smaller type, and
set directions.  Hence, when introducing layout tweaks to
override the special settings, they should be placed inside
the grace expression.  The overrides should also be reverted
inside the grace expression.  Here, the grace note's default stem
direction is overridden and then reverted.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  \acciaccatura {
    \stemDown
    f16->
    \stemNeutral
  }
  g4 e c2
}
@end lilypond


@cindex stem, with slash


@snippets

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{using-grace-note-slashes-with-normal-heads.ly}

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{tweaking-grace-layout-within-music.ly}

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{redefining-grace-note-global-defaults.ly}

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{positioning-grace-notes-with-floating-space.ly}


@seealso
Music Glossary:
@rglos{grace notes},
@rglos{acciaccatura},
@rglos{appoggiatura}.

Installed Files:
@file{ly/@/grace@/-init@/.ly}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{GraceMusic},
@rinternals{Grace_beam_engraver},
@rinternals{Grace_engraver},
@rinternals{Grace_spacing_engraver}.


@knownissues

@cindex acciaccatura, multi-note
@cindex multi-note acciaccatura
@cindex grace-note synchronization

A multi-note beamed @i{acciaccatura} is printed without a slash,
and looks exactly the same as a multi-note beamed
@i{appoggiatura}.

@c TODO Add link to LSR snippet to add slash when available

Grace note synchronization can also lead to surprises.  Staff
notation, such as key signatures, bar lines, etc., are also
synchronized.  Take care when you mix staves with grace notes and
staves without, for example,

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e4 \bar "|:" \grace c16 d2. }
  \new Staff { c4 \bar "|:" d2. }
>>
@end lilypond

@noindent
This can be remedied by inserting grace skips of the corresponding
durations in the other staves.  For the above example

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e4 \bar "|:" \grace c16 d2. }
  \new Staff { c4 \bar "|:" \grace s16 d2. }
>>
@end lilypond

Grace sections should only be used within sequential music
expressions.  Nesting or juxtaposing grace sections is not
supported, and might produce crashes or other errors.

@node Aligning to cadenzas
@unnumberedsubsubsec Aligning to cadenzas

@cindex cadenza
@cindex cadenza, aligning to
@cindex aligning to cadenza

In an orchestral context, cadenzas present a special problem: when
constructing a score that includes a measured cadenza or other solo
passage, all other instruments should skip just as many notes as the
length of the cadenza, otherwise they will start too soon or too late.

One solution to this problem is to use the functions
@code{mmrest-of-length} and @code{skip-of-length}.  These Scheme
functions take a defined piece of music as an argument and generate a
multi-measure rest or @code{\skip} exactly as long as the piece.

@lilypond[verbatim,quote]
MyCadenza = \relative c' {
  c4 d8 e f g g4
  f2 g4 g
}

\new GrandStaff <<
  \new Staff {
    \MyCadenza c'1
    \MyCadenza c'1
  }
  \new Staff {
    #(ly:export (mmrest-of-length MyCadenza))
    c'1
    #(ly:export (skip-of-length MyCadenza))
    c'1
  }
>>
@end lilypond


@seealso
Music Glossary:
@rglos{cadenza}.

Snippets:
@rlsr{Rhythms}.


@node Time administration
@unnumberedsubsubsec Time administration

@cindex time administration
@cindex timing (within the score)
@cindex music, unmetered
@cindex unmetered music

@funindex currentBarNumber
@funindex measurePosition
@funindex measureLength

Time is administered by the @code{Timing_translator}, which by
default is to be found in the @code{Score} context.  An alias,
@code{Timing}, is added to the context in which the
@code{Timing_translator} is placed.

The following properties of @code{Timing} are used
to keep track of timing within the score.

@cindex bar number
@cindex measure number

@table @code
@item currentBarNumber
The current measure number.  For an example showing the
use of this property see @ref{Bar numbers}.

@item measureLength
The length of the measures in the current time signature.  For a
4/4 time this is@tie{}1, and for 6/8 it is 3/4.  Its value
determines when bar lines are inserted and how automatic beams
should be generated.

@item measurePosition
The point within the measure where we currently are.  This
quantity is reset by subtracting @code{measureLength} whenever
@code{measureLength} is reached or exceeded.  When that happens,
@code{currentBarNumber} is incremented.

@item timing
If set to true, the above variables are updated for every time
step.  When set to false, the engraver stays in the current
measure indefinitely.

@end table

Timing can be changed by setting any of these variables
explicitly.  In the next example, the default 4/4 time
signature is printed, but @code{measureLength} is set to 5/4.
At 4/8 through the third measure, the @code{measurePosition} is
advanced by 1/8 to 5/8, shortening that bar by 1/8.
The next bar line then falls at 9/8 rather than 5/4.

@lilypond[quote,verbatim,relative=1]
\set Score.measureLength = #(ly:make-moment 5 4)
c1 c4
c1 c4
c4 c4
\set Score.measurePosition = #(ly:make-moment 5 8)
b4 b4 b8
c4 c1
@end lilypond

@noindent
As the example illustrates, @code{ly:make-moment n m} constructs a
duration of n/m of a whole note.  For example,
@code{ly:make-moment 1 8} is an eighth note duration and
@code{ly:make-moment 7 16} is the duration of seven sixteenths
notes.


@seealso
Notation Reference:
@ref{Bar numbers},
@ref{Unmetered music}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Timing_translator},
@rinternals{Score}.

