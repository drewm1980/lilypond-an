@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: 18b8ce48199720c79c5a34ea16814d9015d20e78

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@c \version "2.11.61"

@node Rhythms
@section Rhythms

@lilypondfile[quote]{rhythms-headword.ly}

Dieser Abschnitt erklärt die Eingabe von Rhythmen, Pausen,
Dauern, Bebalkung und Takten.

@menu
* Writing rhythms::             
* Writing rests::               
* Displaying rhythms::          
* Beams::                       
* Bars::                        
* Special rhythmic concerns::   
@end menu


@node Writing rhythms
@subsection Writing rhythms

@menu
* Durations::                   
* Tuplets::                     
* Scaling durations::           
* Ties::                        
@end menu

@node Durations
@unnumberedsubsubsec Durations

@cindex Dauer
@cindex Notenlänge
@funindex \longa
@funindex \breve
@funindex \maxima

Notenlängen (Dauern) werden durch 
Zahlen und Punkte notiert: Dauern werden als reziproke Werte geschrieben. 
Zum Beispiel wird eine Viertelnote mit @code{4} notiert (weil sie eine 
1/4-Note ist), eine halbe Note mit @code{2} (weil sie eine 1/2-Note ist). 
Noten, die länger als eine Ganze sind, müssen mit @code{\longa} 
(für die Longa, also vier Ganze) und 
@code{\breve} (für die Brevis, auch Doppelganze genannt) notiert werden.

@c Two 64th notes are needed to obtain beams
@lilypond[quote,ragged-right,verbatim,fragment,relative=2]
\time 8/1
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c64
@end lilypond

@noindent
Hier die selben Notendauern ohne die Balken.

@c not strictly "writing rhythms"; more of a "displaying" thing,
@c but it's ok here.  -gp
@lilypond[quote,verbatim,relative=2]
\time 8/1
\autoBeamOff
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c64
@end lilypond

Eine Note mit der vierfacheen Dauer einer Brevis kann mit dem
Befehl @code{\maxima} eingegeben werden, aber ihre Darstellung
ist nur für die Alte Musiknotation unterstützt.  Zu Einzelheiten
siehe @ref{Ancient notation}.

Wenn die Dauer hinter einer Notenbezeichnung nicht angegeben ist, 
wird die Dauer der vorhergehenden Note eingesetzt.  Der Standardwert 
für die erste Note ist eine Viertel.

@lilypond[quote,verbatim,relative=2]
a a a2 a a4 a a1 a
@end lilypond

@funindex .
@cindex Punktierung
@cindex Noten, punktiert

Um punktierte Notendauern zu erhalten, muss einfach nur ein Punkt 
(@code{.}) hinter die Zahl der Dauer gesetzt werden.  Zwei Punkte 
ergeben eine doppelte Punktierung, usw.

@lilypond[quote,verbatim,relative=2]
a4 b c4. b8 a4. b4.. c8.
@end lilypond

Manche Notenlängen können nicht mit binären Dauern und Punkten
dargestellt werden, sie können nur erreicht werden, indem man
Noten überbindet.  Für Einzelheiten siehe @ref{Ties}.

Wie den Silben von Gesangtext eigene Dauern zu gewiesen werden 
können und wie man sie an den Noten ausrichtet ist erklärt in
@ref{Vocal music}.

Optional können Noten streng proportional nach ihrer exakten
Dauer gesetzt werden.  Zu Einzelheiten hierzu und weiteren
Einstellungen für proportionale Notation siehe
@ref{Proportional notation}.

@funindex \dotsUp
@funindex \dotsDown
@funindex \dotsNeutral

Punkte werden normalerweise nach oben verschoben, damit sie die Notenlinien 
nicht berühren.  Fertige Befehle können eingesetzt werden, um
eine bestimmte Richtung manuell zu erzwingen, zu Einzelheiten
siehe @ref{Direction and placement}.

@predefined

@code{\autoBeamOff},
@code{\dotsUp},
@code{\dotsDown},
@code{\dotsNeutral}.

@seealso

Glossar:
@rglos{breve},
@rglos{longa},
@rglos{note value},
@rglos{Duration names notes and rests}.

Notationsreferenz:
@ref{Automatic beams},
@ref{Ties},
@ref{Writing rhythms},
@ref{Writing rests},
@ref{Vocal music},
@ref{Ancient notation},
@ref{Proportional notation}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Dots},
@rinternals{DotColumn}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
Es gibt keine grundlegende Grenze für die Dauer von Pausen
(sowohl kürzer als auch länger), aber die Anzahl an Symbolen
ist begrenzt: Einzelne Pausen können von 128stel bis zur
Maxima (8 Ganze) gesetzt werden.



@node Tuplets
@unnumberedsubsubsec Tuplets

@cindex N-tolen
@cindex Triolen
@cindex Rhythmische Aufteilungen
@funindex \times

Triolen und andere rhythmische Aufteilungen werden aus einem musikalischen 
Ausdruck erstellt, indem dessen Tondauern mit einem Bruch multipliziert werden.

@example
\times @var{Bruch} @var{musikalischer Ausdruck}
@end example

@noindent
Die Dauer eines @var{musikalischen Ausdrucks} wird mit dem Bruch multipliziert. 
Der Nenner des Bruchs wird über (oder unter) den Noten ausgegeben,
optional mit einer eckigen Klammer, die die Noten einfasst.
Die üblichste Aufteilung ist die 
Triole, in welcher drei Noten die Länge von zwei haben, der Wert jeder 
einzelnen Note ist also 2/3 der notierten Länge.

@lilypond[quote,verbatim,relative=2]
a2 \times 2/3 { b4 b b }
c4 c \times 2/3 { b4 a g }
@end lilypond

@funindex \tupletUp
@funindex \tupletDown
@funindex \tupletNeutral

Die automatische Platzierung der Triolenklammer über oder unter
den Noten kann manuell geändert werden mit definierten Befehlen,
siehe @ref{Direction and placement}.


N-tolen können ineinander geschachtelt werden:

@lilypond[quote,verbatim,relative=2]
\autoBeamOff
c4 \times 4/5 { f8 e f \times 2/3 { e[ f g] } } f4 |
@end lilypond

Wenn man die Eigenschaften von N-tolen verändern will, die zum
selben musikalischen Zeitpunkt beginnen, muss @code{\tweak}
eingesetzt werden.

Um die Dauern von Noten zu ändern, ohne die N-tolen-Klammern
zu setzen, siehe @ref{Scaling durations}.

@predefined

@code{\tupletUp},
@code{\tupletDown},
@code{\tupletNeutral}.


@snippets

@cindex N-tole, Formatierung
@cindex Triole, Formatierung
@cindex Formatierung von Triolen

@funindex tupletNumberFormatFunction
@funindex tupletSpannerDuration

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{entering-several-tuplets-using-only-one--times-command.ly}

@funindex TupletNumber

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-the-tuplet-number.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{permitting-line-breaks-within-beamed-tuplets.ly}

@seealso

Glossar:
@rglos{triplet},
@rglos{tuplet},
@rglos{polymetric}.

Handbuch zum Lernen:
@rlearning{Tweaking methods}.

Notationrreferenz:
@ref{Time administration},
@ref{Scaling durations},
@ref{The tweak command},
@ref{Polymetric notation}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{TupletBracket},
@rinternals{TupletNumber},
@rinternals{TimeScaledMusic}.

@knownissues
@cindex grace notes within tuplet brackets
Wenn die erste Noten eines Systems ein Vorschlag (eine Verzierung)
ist, die von einer N-tole gefolgt ist, muss der Vorschlag
vor den @code{\times}-Befehl gesetzt werden um Fehler zu
vermeiden.  Überall sonst können Vorschläge innerhalb von
N-tolen gesetzt werden.



@node Scaling durations
@unnumberedsubsubsec Scaling durations

@cindex Dauern skalieren
@cindex Skalieren von Dauern

Die Dauer von einzelnen Noten, Pausen oder Akkorden kann mit einem Bruch multipliziert werden, 
indem hinter die Notendauer @qq{*@var{N/M}} (oder @qq{*@var{N}} wenn @var{M} 1 ist) 
geschrieben wird.  Die Erscheinung der Noten oder Pausen wird
dadurch nicht beeinflusst, die neue Dauer wird aber dazu
benutzt, ihre Position im Takt zu errechnen und die neue
Dauer in der MIDI-Ausgabe einzusetzen. Die Faktoren, mit
denen multipliziert wird, können auch kombiniert werden, etwa 
@qq{*L*M*/N}.

Im nächsten Beispiel nehmen die drei ersten Noten genau zwei Schläge ein, 
aber es wird keine Triolenklammer über ihnen ausgegeben.

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Alter durations to triplets
a4*2/3 gis4*2/3 a4*2/3
% Normal durations
a4 a4
% Double the duration of chord
<a d>4*2
% Duration of quarter, appears like sixteenth
b16*4 c4
@end lilypond

Die Dauer von unsichtbaren Noten kann auch mit einem Faktor
beeinflusst werden.  Das ist sinnvoll, wenn man viele Takte
überspringen muss, etwa @code{s1*23}.

@cindex Musik komprimieren
@cindex Komprimieren von Noten
@cindex Noten komprimieren
@funindex \scaleDurations

Längere Notenabschnitte können auf die gleiche Art durch Multiplikation
mit einem Bruch komprimiert werden, als ob jede Note, jeder
Akkord oder jede Pause mit dem Bruch multipliziert würde.
Damit bleibt das Aussehen der Musik unverändert, aber die
interne Dauer der Noten wird mit dem Bruch multipliziert.
Die Leerzeichen um den Punkt im Beispiel sind notwendig.
Hier ein Beispiel, das zeigt, wie Noten komprimiert und
ausgedehnt werden kann:

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Normal durations
<c a>4 c8 a
% Scale music by *2/3
\scaleDurations #'(2 . 3) {
  <c a f>4. c8 a f
}
% Scale music by *2
\scaleDurations #'(2 . 1) {
  <c' a>4 c8 b
}
@end lilypond

@noindent
Eine Anwendung für diesen Befehl ist polymetrische Notation,
siehe @ref{Polymetric notation}.

@seealso

Notationsreferenz:
@ref{Tuplets},
@ref{Invisible rests},
@ref{Polymetric notation}.

Schnipsel:
@rlsr{Rhythms}.


@node Ties
@unnumberedsubsubsec Ties

@cindex Bindebogen
@cindex Überbindung
@funindex ~

Ein Bindebogen verbindet zwei benachbarte Noten der selben 
Tonhöhe.  Als Resultat wird die Dauer der Notenlänge verlängert.
 
@warning{Bindebögen dürfen nicht mit Legatobögen verwechselt werden, durch 
die die Vortragsart bezeichnet wird, noch mit Phrasierungsbögen, 
die musikalische Phrasen anzeigen.  Ein Bindebogen ist nur eine
Art, die Tondauer zu verlängern, ähnlich etwa wie die
Punktierung.}

Ein Bindebogen wird mit der 
Tilde @code{~} (AltGr++) notiert.

@lilypond[quote,verbatim,relative=2]
a2 ~ a
@end lilypond

@noindent
Bindebögen werden eingesetzt, wenn die Note entweder über eine
Taktlinie hinüberreicht, oder wenn die entsprechende Dauer der
Note nicht mit Punktierung erreicht werden kann.  Bindebögen
sollten auch benutzt werden, wenn Notenwerte über die
inneren Unterteilungen von Takten hinüberreichen:

@lilypond[quote]
\relative c' {
  r8 c8 ~ c2 r4 |
  r8^"not" c2 ~ c8 r4
}
@end lilypond

Wenn viele Noten über Taktlinien gebunden werden müssen, kann
es einfacher sein, automatische Notenaufteilung einzustellen,
wie beschrieben in @ref{Automatic note
splitting}.  Mit diesem Mechanismus werden lange Noten
automatisch aufgeteilt, wenn sie über Taktgrenzen reichen.

@cindex Bindebögen und Akkorde
@cindex Überbindungen und Akkorde
@cindex Akkorde und Überbindungen

Wenn ein Bindebogen an einen Akkord gehängt wird, werden alle Noten 
dieses Akkordes übergebunden.  Wenn kein Notenkopf passt, wird auch 
kein Bogen erzeugt.  Noten in Akkorden können auch einzeln übergebunden 
werden, indem sie innerhalb des Akkordes hinter die entsprechende Note 
geschrieben werden.

@lilypond[quote,verbatim,relative=1]
<c e g> ~ <c e g>
<c~ e g~ b> <c e g b>
@end lilypond

@funindex \repeatTie
@cindex Bindebögen wiederholen
@cindex Wiederholung und Bindebögen
@cindex Überbindung und Wiederholungen
@cindex Volta-Klammern und Wiederholungen
@cindex Volta und Überbindung

Wenn die zweite Variante einer Wiederholung mit einer übergebundenen
Note anfängt, muss der Bindebogen wie folgt notiert werden:

@lilypond[quote,relative=2,verbatim]
\repeat volta 2 { c g <c e>2 ~ }
\alternative {
  % First alternative: following note is tied normally
  { <c e>2. r4 }
  % Second alternative: following note has a repeated tie
  { <c e>2\repeatTie d4 c } }
@end lilypond

@cindex Laissez vibrer
@cindex Ausklingen lassen, Bögen
@cindex Bögen, laissez vibrer
@cindex Ausklingen lassen
@funindex \laissezVibrer

So genannte @notation{laissez vibrer}-Bögen werden verwendet um anzuzeigen, dass 
man die Musik ausklingen lassen soll. Sie werden in der Klavier-, Harfen-, 
anderer Saiteninstrument- und Schlagzeugnotation verwendet. Sie können folgendermaßen notiert werden:

@lilypond[quote,verbatim,relative=1]
<c f g>1\laissezVibrer
@end lilypond

@cindex ties, placement
@funindex \tieUp
@funindex \tieDown
@funindex \tieNeutral

Die vertikale Position von Bindebögen kann kontrolliert werden,
siehe die vordefinierten Befehle unten oder für Einzelheiten
@ref{Direction and placement}.

@cindex Bindebögen, Ausehen
@cindex Bindebögen, gestrichelt
@cindex Bindebögen, gepunktet
@cindex Bindebögen, durchgehend
@funindex \tieDotted
@funindex \tieDashed
@funindex \tieSolid

Durchgehende, gepunktete oder gestrichelte Bindebögen können
spezifiziert werden, siehe die vordefinieren Befehle.

@predefined

@code{\tieUp},
@code{\tieDown},
@code{\tieNeutral},
@code{\tieDotted},
@code{\tieDashed},
@code{\tieSolid}.


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{using-ties-with-arpeggios.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{engraving-ties-manually.ly}

@seealso

Glossar:
@rglos{tie},
@rglos{laissez vibrer}.

Notationsreferenz:
@ref{Automatic note splitting}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{LaissezVibrerTie},
@rinternals{LaissezVibrerTieColumn},
@rinternals{TieColumn},
@rinternals{Tie}.

@knownissues

Der Wechsel zwischen Systemen bei aktiver Überbindung produziert keinen 
gekrümmten Bogen.

Änderung von Schlüssel oder Oktavierung zwischen übergebundenen Noten 
ist nicht richtig definiert. In diesen Fällen kann es besser sein, einen 
Legatobogen zu verwenden.


@node Writing rests
@subsection Writing rests

Pausen werden als Teil der musikalischen Ausdrücke zusammen mit
den Noten notiert.

@menu
* Rests::                       
* Invisible rests::             
* Full measure rests::          
@end menu

@node Rests
@unnumberedsubsubsec Rests
@cindex Pausen
@cindex Pausendauern
@cindex Maxima
@cindex Longa
@cindex Brevis

@funindex \rest
@funindex r
@funindex \maxima
@funindex \longa
@funindex \breve

Pausen werden wie Noten eingegeben, ihre Bezeichnung ist @code{r}.
Dauern, die länger als eine Ganze sind, haben die gezeigten
vordefinierten Befehle:

@c \time 16/1 is used to avoid spurious bar lines
@c and long tracts of empty measures
@lilypond[quote,verbatim]
\new Staff {
  % These two lines are just to prettify this example
  \time 16/1
  \override Staff.TimeSignature #'stencil = ##f
  % Print a maxima rest, equal to four breves
  r\maxima
  % Print a longa rest, equal to two breves
  r\longa
  % Print a breve rest
  r\breve
  r1 r2 r4 r8 r16 r32 r64 r128
}
@end lilypond

@cindex Pausen, mehrtaktig
@cindex Ganztaktpausen
@cindex Mehrtaktpausen

Pausen, die ganze Takte ausfüllen und in der Taktmitte zentriert 
werden sollen, müssen als mehrtaktige Pausen eingegeben werden. 
Sie können sowohl für einen einzigen Takt als auch für mehrere 
Takte verwendet werden, Näheres im Abschnitt
@ref{Full measure rests}.

Um die vertikale Position einer Pause explizit festzulegen, 
kann eine Note eingegeben werden, gefolgt vom Befehl @code{\rest}. 
Die Pause wird dann an die Stelle gesetzt, wo sich sonst die 
Note befinden würde.  Damit wird die manuelle Formatierung von mehrstimmiger Musik 
sehr viel einfacher, da die Formatierungsfunktion zur automatischen 
Auflösung von Zusammenstößen diese Pausen nicht mit einbezieht.

@lilypond[quote,verbatim,relative=2]
a4\rest d4\rest
@end lilypond

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{rest-styles.ly}

@seealso

Notationsreferenz:
@ref{Full measure rests}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Rest}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
Es gibt keine gundlegende Grenze für die Dauer von Pausen (sowohl
kürzer als auch länger), aber die Anzahl von Symbolen ist
begrenzt: Es gibt Zeichen für Pausen von einer 128 bis zu einer
Maxima (8 Ganze).


@node Invisible rests
@unnumberedsubsubsec Invisible rests

@cindex Skip
@cindex Überspringen von Zeichen
@cindex Unsichtbare Pausen
@cindex Pausen, unsichtbar
@cindex Platzhalternoten
@funindex \skip
@funindex s

Eine unsichtbare Pause (auch als @qq{skip} oder Überspringung bezeichnet) 
kann wie eine Note eingegeben werden, die Notationsbezeichnung ist @code{s}.

@lilypond[quote,verbatim,relative=2]
a4 a4 s4 a4 \skip 1 a4
@end lilypond

@cindex Gesangstext, überspringen

Die @code{s}-Syntax steht nur im Noten- oder Akkordmodus zur Verfügung. In 
anderen Situationen, z. B. innerhalb eines Liedtextes, muss @code{\skip} 
benutzt werden.  @code{\skip} benötigt eine explizite Dauerangabe.

@lilypond[quote,verbatim,relative=2]
<<
  {
    a2 \skip2 a2 a2
  }
  \new Lyrics {
    \lyricmode {
      foo2 \skip 1 bla2
    }
  }
>>
@end lilypond

Die Überspringung mit @code{s} erstellt @code{Staff} und
@code{Voice}-Kontext, wenn es erforderlich ist, genauso wie Noten und Pausen.

@lilypond[quote,verbatim,fragment]
s1 s s
@end lilypond

Der Überspringungsbefehl (@code{\skip}) ist einfach ein leerer Platzhalter. 
Durch ihn wird 
überhaupt nichts gesetzt, auch keine transparenten Objekte.

@lilypond[quote,verbatim,fragment]
% This is valid input, but does nothing
\skip 1 \skip1 \skip 1
@end lilypond

@seealso

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{SkipMusic}



@node Full measure rests
@unnumberedsubsubsec Full measure rests

@cindex Ganztaktpausen
@cindex Mehrtaktpausen
@cindex Pausen, Ganztakt-
@cindex Pausen, Mehrtakt-
@funindex R

Pausen für einen oder mehrere ganze Takte werden wie
Noten eingegeben, wobei die Bezeichnung ein Großbuchstabe
@code{R} ist:

@lilypond[quote,verbatim,relative=2]
% Rest measures contracted to single measure
\compressFullBarRests
R1*4
R1*24
R1*4
b2^"Tutti" b4 a4
@end lilypond

Die Dauer von Ganztaktpausen wird genauso angegeben wie die
Dauer von Noten.  Die Dauer einer Ganztaktpause muss immer
eine ganze Anzahl an Taktlängen sein, weshalb Punktierungen
und Brüche recht häufig eingesetzt werden müssen.

@lilypond[quote,fragment,verbatim]
\compressFullBarRests
\time 2/4
R1 | R2 |
\time 3/4
R2. | R2.*2 |
\time 13/8
R1*13/8 | R1*13/8*12 |
\time 10/8
R4*5*4 |
@end lilypond

Eine Ganztaktpause wird abhängig von der Taktart entweder als
Ganze oder Brevis-Pause gesetzt, zentriert im Takt.

@lilypond[quote,verbatim,fragment]
\time 4/4
R1 |
\time 6/4
R1*3/2 |
\time 8/4
R1*2 |
@end lilypond
@funindex \expandFullBarRests
@funindex \compressFullBarRests
@cindex Mehrtaktpausen, ausschreiben
@cindex Pausen, mehrere Takte ausschreiben
@cindex Pausen, mehrere Takte komprimieren
@cindex Mehrtaktpausen, komprimieren

In den Standardeinstellungen werden mehrtaktige Pausen
ausgeschrieben gesetzt, sodass sie die entsprechende Anzahl von
Takten einnehmen.  Alternativ kann die mehrtaktige Pause
aber auch nur in einem Takt angezeigt werden, der ein
Mehrtaktpausensymbol geinhaltet, wobei die Anzahl der Takte
der Pausendauer über dem Pausenzeichen ausgegeben wird:

@lilypond[quote,fragment,verbatim]
% Default behavior
\time 3/4 r2. | R2.*2 |
\time 2/4 R2 |
\time 4/4
% Rest measures contracted to single measure
\compressFullBarRests
r1 | R1*17 | R1*4 |
% Rest measures expanded
\expandFullBarRests
\time 3/4
R2.*2 |
@end lilypond


@cindex Text über Mehrtaktpausen
@cindex Mehrtaktpausen, Text hinzufügen
@cindex Beschriftung über Mehrtaktpausen
@cindex Mehrtaktpausen, Beschriftung
@cindex Fermate über Mehrtaktpausen
@cindex Mehrtaktpause mit Fermate

Textbeschriftung kann Mehrtaktpausen mit @code{\markup}
hinzugefügt werden.  Ein 
vordefinierte Befehl @code{\fermataMarkup} fügt eine
Fermate ein.

@lilypond[quote,ragged-right,verbatim,fragment]
\compressFullBarRests
\time 3/4
R2.*10^\markup { \italic "ad lib." }
R2.^\fermataMarkup
@end lilypond

@warning{
Beschriftungen, die an Mehrtaktpausen gehängt werden, sind
Objekte vom Typ @code{MultiMeasureRestText}, nicht vom Typ
@code{TextScript}.  Änderungen etwa mit @code{\override}
müssen auf das richtige Objekt gerichtet werden, damit sie
nicht ignoriert werden.  Siehe auch das folgende Beispiel.
}

@lilypond[quote,ragged-right,verbatim,fragment]
% This fails, as the wrong object name is specified
\override TextScript #'padding = #5
R1^"wrong"
% This is correct and works
\override MultiMeasureRestText #'padding = #5
R1^"right"
@end lilypond

Wenn eine Mehrtaktpause direkt auf einen Auftakt mit @code{\partial}
folgt, werden möglicherweise daraus resultierende
Taktprüfungswarnungen nicht angezeigt.

@predefined
@code{\textLengthOn},
@code{\textLengthOff},
@code{\fermataMarkup},
@code{\compressFullBarRests},
@code{\expandFullBarRests}.

@snippets

@cindex Kirchenpausen
@cindex Pausen, Kirchenstil
@cindex Balkenpausen, mehrtaktig

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-form-of-multi--measure-rests.ly}

@cindex Mehrtaktpausen, Positionierung
@cindex Position von Mehrtaktpausen

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{positioning-multi--measure-rests.ly}

@c TODO -- convert to snippet -- submitted to Neil
Markups attached to a multi-measure rest will be centered above or
below it.  Long markups attached to multi-measure rests do not cause
the measure to expand. To expand a multi-measure rest to fit the markup,
use a spacer rest with an attached markup before the multi-measure rest:

@lilypond[quote,verbatim,relative=2]
\compressFullBarRests
\textLengthOn
s1*0^\markup { [MAJOR GENERAL] }
R1*19
s1*0_\markup { \italic { Cue: ... it is yours } }
s1*0^\markup { A }
R1*30^\markup { [MABEL] }
\textLengthOff
c4^\markup { CHORUS } d f c
@end lilypond

@noindent
Note that the spacer rest causes a bar to be inserted.
Text attached to a spacer rest in this way is left-aligned to the
position where the note would be placed in the measure, but if the
measure length is determined by the length of the text, the text will
appear to be centered.

@seealso

Glossar:
@rglos{multi-measure rest}.

Notationsreferenz:
@ref{Durations},
@ref{Text},
@ref{Formatting text},
@ref{Text scripts}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{MultiMeasureRest},
@rinternals{MultiMeasureRestNumber},
@rinternals{MultiMeasureRestText}.


@knownissues

Wenn man versucht, mit Fingersatz (etwa @code{R1*10-4} Zahlen
über Ganztaktpausen zu setzen, kann die Zahl des Fingersatzes
(4) mit der Taktanzahl (10) zusammenstoßen.

@cindex Zusammenfalten von Pausen
@cindex Pausen, Zusammenfalten

Es gibt keine Möglichkeit, normale Pausen automatisch zu
Ganztaktpausen zu reduzieren.

@cindex Pausen, Zusammenstöße

Ganztaktpausen werden bei der Vermeidung von Zusammenstößen nicht
berücksichtigt.



@node Displaying rhythms
@subsection Displaying rhythms

@menu
* Time signature::              
* Upbeats::                     
* Unmetered music::             
* Polymetric notation::         
* Automatic note splitting::    
* Showing melody rhythms::      
@end menu

@node Time signature
@unnumberedsubsubsec Time signature

@cindex Taktangabe
@cindex Metrum
@funindex \time

Taktangaben könne wie folgt erstellt werden.

@lilypond[quote,verbatim,relative=2]
\time 2/4 c'2
\time 3/4 c'2.
@end lilypond

@cindex Taktangabe, Sichtbarkeit

Taktangaben werden zu Beginn eines Stückes gesetzt und immer dann,
wenn sich die Taktart ändert.  Wenn eine Änderung am Ende einer
Zeile geschieht, wird eine warnende Taktangabe am Ende der Zeile
ausgegeben.  Dieses Verhalten kann verändert werdenm, siehe
@ref{Controlling visibility of objects}.

@lilypond[quote,verbatim,relative=2]
\time 2/4
c2 c
\break
c c
\break
\time 4/4
c c c c
@end lilypond

@funindex \numericTimeSignature
@funindex \defaultTimeSignature
@cindex Stil von Taktangaben
@cindex Taktangaben-Stile

Das Symbol für die Taktarten 2/2 und 4/4 kann in ein Zahlensymbol
umgewandelt werden:

@lilypond[quote,verbatim,relative=2]
% Default style
\time 4/4 c1
\time 2/2 c1
% Change to numeric style
\numericTimeSignature
\time 4/4 c1
\time 2/2 c1
% Revert to default style
\defaultTimeSignature
\time 4/4 c1
\time 2/2 c1
@end lilypond

Symbole für Modus und Proprietas der mensuralen Notation
werden behandelt unter
@ref{Ancient time signatures}.

@predefined

@code{\numericTimeSignature},
@code{\defaultTimeSignature}.

@snippets

@c TODO Send as snippet called "Changing the time signature without affecting the beat length"

The @code{\time} command sets the properties
@code{timeSignatureFraction}, @code{beatLength}, and
@code{measureLength} in the @code{Timing} context, which is
normally aliased to @code{Score}.  Changing the value of
@code{timeSignatureFraction} causes the new time signature symbol
to be printed without changing the other properties:

@lilypond[quote,verbatim,relative=2]
\time 3/4
a16 a a a a a a a a a a a
% Change time signature but keep 3/4 beaming
% due to unchanged beatLength
\set Score.timeSignatureFraction = #'(12 . 16)
a16 a a a a a a a a a a a
\time 12/16
% Lose 3/4 beaming now beatLength has changed to 16
a16 a a a a a a a a a a a
@end lilypond

@cindex compound time signatures
@cindex time signature, compound

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{compound-time-signatures.ly}


@seealso

Glossar:
@rglos{time signature}

Notationsreferenz:
@ref{Ancient time signatures},
@ref{Time administration}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{TimeSignature},
@rinternals{Timing_translator}.



@node Upbeats
@unnumberedsubsubsec Upbeats

@cindex Auftakt
@cindex Takte verkürzen
@cindex partieller Takt
@cindex halber Takt
@cindex Taktlänge ändern
@funindex measurePosition
@funindex \partial

Verkleinerte Takte, wie etwa ein Auftakt, werden mit dem
Befehl @code{\partial} notiert, dessen Syntax lautet:

@example
\partial @var{Dauer}
@end example

wobei @var{Dauer} die rhythmische Länger der Noten darstellt,
die vor dem ersten vollständigen Takt gesetzt werden sollen:

@lilypond[quote,verbatim,relative=2]
\partial 4 e4 |
a2. c,4 |
@end lilypond

Das wird intern übersetzt nach:

@example
\set Timing.measurePosition = -@var{Länge der Dauer}
@end example

Die Eigenschaft @code{measurePosition} (Takt-Position) enthält
eine rationale Zahl, 
die anezigt, wie groß der Abstand zum Taktanfang ist. Deshalb ist 
sie eine negative Zahl; @code{\partial 4} wird also intern übersetzt 
zu: @qq{Eine Viertel bleibt übrig vom ganzen Takt.}

@seealso

Glossar:
@rglos{anacrusis}.

Notationsreferenz:
@ref{Grace notes}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Timing_translator}.

@knownissues

@code{\partial} ist nur für den Anfang eines Stückes vorgesehen. Wenn der 
Befehl innerhalb eines Stückes verwendet wird, können seltsame Warnungen 
auftreten.


@node Unmetered music
@unnumberedsubsubsec Unmetered music

@cindex Kadenz
@cindex Taktlinen, ausschalten
@cindex Taktnummern, ausschalten
@cindex Noten ohne Takt
@cindex Taktart, Noten ohne
@cindex Metrum, Noten ohne
@funindex \cadenzaOn
@funindex \cadenzaOff

Taktlinien und Taktzahlen werden automatisch erzeugt. Für Musik 
ohne Metrum hingegen (etwa Kadenzen) ist das jedoch nicht 
erwünscht. Mit den Befehlen @code{\cadenzaOn} und 
@code{\cadenzaOff} kann dieses Verhalten ausgeschaltet und 
wieder angeschaltet werden.

@lilypond[verbatim,quote,relative=2,fragment]
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Taktnummerierung wird am Ende der Kadenz wieder aufgenommen, als
ob es die Kadenz nicht gegeben hätte:

@lilypond[verbatim,relative=2,fragment]
% Show all bar numbers
\override Score.BarNumber #'break-visibility = #all-visible
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

@predefined

@code{\cadenzaOn},
@code{\cadenzaOff}.

@seealso

Glossar:
@rglos{cadenza}.

@c Notationsreferenz:
@c ref{Controlling visibility of objects}.

Schnipsel:
@rlsr{Rhythms}.

@knownissues

LilyPond fügt Zeilen- und Seitenumbrüche nur an einer Taktlinie 
ein. Wenn die Kadenz nicht vor einem Umbruch endet, müssen Sie 
selber unsichtbare Taktlinien mit

@example
\bar ""
@end example

@noindent
einfügen, um anzuzeigen, wo umgebrochen werden darf.


@node Polymetric notation
@unnumberedsubsubsec Polymetric notation

@cindex doppelte Taktartensymbole
@cindex Taktarten, polymetrisch
@cindex polymetrische Taktarten
@cindex Metrum, polymetrisch
@cindex Unterteilte Taktarten

Polymetrische Notation ist unterstützt, entweder direkt oder
mit einem Textbeschriftungs-Trick.

@strong{Systeme mit unterschiedlichen Taktarten, gleiche
Taktlänge}

Diese Art der Notation kann erstellt werden, indem für jedes
System eine identische Taktart eingestellt wird, aber manuell
für jeden Takt durch Einstellung von @code{timeSignatureFraction}
auf den gewünschten Bruch geändert und dann die Länge der
Noten entsprechenden skaliert wird.  Letzteres geschieht mit dem Befehl
@code{\scaleDurations}, der auf ähnliche Weise wie @code{\times}
benutzt wird, aber keine Klammer über den Noten ausgibt. Siehe
auch @ref{Scaling durations}.

In diesem Beispiel werden Noten mit den Taktarten 3/4, 9/8 und
10/8 parallel benutzt.  Im zweiten System werden die gezeigten
Dauern mit 2/3 multipliziert, da 2/3x9/8=3/4, und im dritten
System werden die gezeigten Dauern mit 3/5 multipliziert, da
3/5x10/8=3/4.

@lilypond[quote,verbatim,fragment]
\relative c' { <<
  \new Staff {
    \time 3/4
    c4 c c |
    c c c |
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(9 . 8)
    \scaleDurations #'(2 . 3)
      \repeat unfold 6 { c8[ c c] }
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(10 . 8)
    \scaleDurations #'(3 . 5) {
      \repeat unfold 2 { c8[ c c] }
      \repeat unfold 2 { c8[ c] } |
      c4. c4. \times 2/3 { c8 c c } c4
    }
  }
>> }
@end lilypond

@strong{Systeme mit unterschiedlichen Taktarten, unterschiedliche
Taktlänge}

Jedes System kann auch eine eigene unabhängige Taktart erhalten.
Dazu muss der @code{Timing_translator} in den @code{Staff}-Kontext
verschoben werden.

@lilypond[quote,verbatim]
\layout {
  \context {
    \Score
    \remove "Timing_translator"
    \remove "Default_bar_line_engraver"
  }
  \context {
    \Staff
    \consists "Timing_translator"
    \consists "Default_bar_line_engraver"
  }
}

% Now each staff has its own time signature.

\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c c c |
  }
  \new Staff {
    \time 2/4
    c4 c |
    c c |
    c c |
  }
  \new Staff {
    \time 3/8
    c4. |
    c8 c c |
    c4. |
    c8 c c |
  }
>>
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{compound-time-signatures.ly}


@seealso

Glossar:
@rglos{polymetric},
@rglos{polymetric time signature},
@rglos{meter}.

Notationreferenz:
@ref{Scaling durations}

Schnipsel:
@rlsr{Rhythms}.

Referenz der Intera:
@rinternals{TimeSignature},
@rinternals{Timing_translator},
@rinternals{Staff}.

@knownissues

Wenn unterschiedliche Taktarten paralell benutzt werden, werden
Noten auf demselben musikalischen Moment horizontal auf die
gleiche Position gesetzt.  Die unterschiedlichen Taktlinien
führen allerdings dazu, dass die Noten nicht ganz so regelmäßig
gesetzt werden, wie es ohne unterschiedliche Taktarten der
Fall wäre.



@node Automatic note splitting
@unnumberedsubsubsec Automatic note splitting

@cindex Noten, aufteilen
@cindex Aufteilen von Noten
@cindex automatisches Aufteilen von Noten

Lange Noten, die über Taktlinien hinüberreichen, können
automatisch in übergebundene Noten aufgeteilt werden. 
Dieses Verhalten erreicht man, indem der  @rinternals{Note_heads_engraver} 
mit dem @rinternals{Completion_heads_engraver} ausgetauscht wird. 
Im nächsten Beispiel werden Noten, die über die Taktlinie dauern, aufgeteilt 
und übergebunden.

@lilypond[quote,verbatim,relative=1]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
}

{ c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 }
@end lilypond

Dieser Engraver teilt alle Noten 
auf, die über eine Taktlinie dauern und fügt Bindebögen hinzu. 
Er kann unter Anderem dann nützlich sein, wenn man komplexe 
Partituren auf Fehler überprüfen möchte: Wenn die Takte nicht 
vollständig gefüllt sind, zeigt die Überbindung genau an, wie viele 
Notenwerte noch in dem jeweiligen Takt fehlen.

@seealso

Glossar: @rglos{tie}

Handbuch zum Lernen:
@rlearning{Engravers explained},
@rlearning{Adding and removing engravers}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Note_heads_engraver},
@rinternals{Completion_heads_engraver},
@rinternals{Forbid_line_break_engraver}.

@knownissues

Nicht alle Notenwerte (besonders wenn sie andere rhythmische 
Aufteilungen beinhalten) können exakt durch normale Noten und 
Punktierungen wiedergegeben werden. Der Engraver setzt aber
trotzdem keine Triolen etc.

@code{Completion_heads_engraver} wirkt sich nur auf Noten aus; 
Pausen werden nicht aufgeteilt.



@node Showing melody rhythms
@unnumberedsubsubsec Showing melody rhythms

Manchmal soll nur der Rhythmus einer Melodie dargestellt werden. Das 
erreicht man mit einem Rhythmus-Notensystem. Alle Tonhöhen werden 
auf eine Linie reduziert und das System hat auch nur eine einzige 
Linie.

@lilypond[quote,relative=1,verbatim]
<<
  \new RhythmicStaff {
    \new Voice = "myRhythm" {
      \time 4/4
      c4 e8 f g2
      r4 g g f
      g1
    }
  }
  \new Lyrics {
    \lyricsto "myRhythm" {
      This is my song
      I like to sing
    }
  }
>>
@end lilypond

Akkordnotation für Gitarren bezeichnet auch oft zusätzlich den
geschlagenen Rhythmus.  Das kann notiert werden unter Verwendung
des @code{Pitch_squash_engraver} und indem  Tonhöhenimprovisation
eingeschaltet wird mit @code{\improvisationOn}.

@lilypond[quote,verbatim]
<<
  \new ChordNames {
    \chordmode {
      c1 f g c
    }
  }

  \new Voice \with {
    \consists Pitch_squash_engraver
  } \relative c'' {
    \improvisationOn
    c4 c8 c c4 c8 c
    f4 f8 f f4 f8 f
    g4 g8 g g4 g8 g
    c4 c8 c c4 c8 c
  }
>>
@end lilypond

@predefined
@code{\improvisationOn},
@code{\improvisationOff}.

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{guitar-strum-rhythms.ly}

@seealso

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{RhythmicStaff},
@rinternals{Pitch_squash_engraver}.



@node Beams
@subsection Beams

@menu
* Automatic beams::             
* Setting automatic beam behavior::  
* Manual beams::                
* Feathered beams::             
@end menu


@node Automatic beams
@unnumberedsubsubsec Automatic beams

LilyPond setzt Balken (engl. beam) automatisch.

@cindex Balken, manuell
@cindex manuelle Balken

@lilypond[quote,verbatim,relative=2]
\time 2/4 c8 c c c
\time 6/8 c c c c8. c16 c8
@end lilypond

Wenn diese automatischen Entscheidungen nicht gut genug sind, können 
die Balken auch explizit eingegeben werden, siehe
@ref{Manual beams}.  Es können auch bestimmte 
Balkenmuster, die sich vom Standard unterscheiden, definiert werden.
Die Standard-Regeln für die gebräuchlichsten Taktarten sind
in der Datei @file{scm/@/auto@/-beam@/.scm} definiert.  Wenn
dort keine Balkenregeln für die aktuelle Taktart vorhanden
sind, wird die Bebalkung geregelt von drei Kontexteigenschaften:
@code{measureLength}, @code{beatLength} und @code{beatGrouping}.
Sowohl die Balkenregeln als auch diese Kontexteigenschaften
können geändert werden, siehe @ref{Setting automatic beam behavior}.

@cindex autoBeamOn
@cindex autoBeamOff

@warning{Wenn Balken eingesetzt werden, um Melismen in Gesang
anzuzeigen, müssen die automatische Bebalkung ausgeschaltet werden
mit dem Befehl @code{\autoBeamOff} und die Balken mit der Hand
eingegeben werden.}

@noindent
Automatische Bebalkung kann mit dem Befehl @code{\autoBeamOff}
aufgehoben werden und mit dem Befehl @code{\autoBeamOn} wieder
eingeschaltet werden.

@lilypond[quote,relative=1,verbatim]
c4 c8 c8. c16 c8. c16 c8
\autoBeamOff
c4 c8 c8. c16 c8.
\autoBeamOn
c16 c8
@end lilypond

@predefined
@code{\autoBeamOff},
@code{\autoBeamOn}.

@snippets

@funindex breakable
@cindex Zeilenumbruch, Balken
@cindex Balken und Zeilenumbrüche

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beams-across-line-breaks.ly}

@cindex Balken mit Knie
@cindex weit außeinander liegende Balken
@cindex auto-knee-gap

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-beam-knee-gap.ly}

@seealso

Notationsreferenz:
@ref{Manual beams},
@ref{Setting automatic beam behavior}.

Installierte Dateien:
@file{scm/auto-beam.scm}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Beam}.


@knownissues

Automatische Bebalkung von weit außeinander liegenden Noten
(wobei der Balken als Knie erscheint) kann nicht mit versteckten
Systemen benutzt werden.  Siehe @ref{Hiding staves}.

Balken können mit Notenköpfen und Versetzungszeichen in anderen
Stimmen zusammenstoßen.



@node Setting automatic beam behavior
@unnumberedsubsubsec Setting automatic beam behavior

@funindex autoBeaming
@funindex autoBeamSettings
@funindex (end * * * *)
@funindex (begin * * * *)

@cindex Automatische Balken, einstellen
@cindex Einstellungen der Bebalkung
@cindex autobeam
@cindex Verändern von automatischer Bebalkung
@cindex Bebalkung, automatisch, Einstellungen
@cindex Text und Balken
@cindex Gesangstext und Balken

Die Position und Länge der automatischen Balken wird bestimmt
von bestimmten Regeln, wie beschrieben in @ref{Automatic beams}.
Es gibt zwei einander ausschließende Arten, diese Regeln zu
verändern.  Mit der ersten Art verändert man Gruppen von
Noten, die einer bestimmten Taktart entsprechend mit Balken
versehen werden.  Das muss manuell getan werden für die Taktarten,
für welche keine fertigen Regeln definiert worden sind.  Die
zweite Methode verändert die Endpunkte der Balken und muss
eingesetzt werden für die Taktarten, für welche schon Regeln
definiert worden sind.  Regeln sind definiert für die Taktarten
3/2, 3/4, 4/4, 2/4, 4/8, 4/16, 6/8, 9/8 und 12/8.

@i{@strong{Die Gruppierung von Noten verändern}}

Wenn keine Regeln für die Beendung von Balken für die aktuelle
Taktart vorhanden sind, wird die Bebalkung von drei 
Kontext-Eigenschaften kontrolliert:
@code{measureLength}, @code{beatLength} und @code{beatGrouping}.
Diese Eigenschaften können in den @code{Score}, @code{Staff} oder
@code{Voice}-Kontexten gesetzt werden, um ihre Wirkungsweise zu
begrenzen.

Durch sie werden die Balken wie folgt bestimmt:

Balken können überall beginnen (außer ein Balken ist schon aktiv).
Balken enden zu den Werten, die @code{beatGrouping} und
@code{beatLength} bestimmten, nach folgenden Regeln:

@itemize

@item Wenn @code{beatGrouping} und @code{beatLength} den gleichen
Wert wie @code{measureLength} haben, wird @code{beatGrouping}
benutzt, um die Endpunkte der Balken zu bestimmen.

@item  Wenn @code{beatGrouping} und @code{beatLength} nicht mit
@code{measureLength} übereinstimmen, wird @code{beatLength}
benutzt, um die Endpunkte der Balken zu bestimmen.

@end itemize

Standardmäßig werden diese Eigenschaften durch die Taktart bestimmt,
die mit @code{\time} gesetzt wurde.  Die @code{measureLength}
(Taktlänge) hat standardmäßig genau die gleiche Länge wie die
Taktlänge, die durch @code{\time} bestimmt wurde, und der
Standardwert für @code{beatLength} (Schlag-Länge) wird durch
den Nenner des Taktart-Bruches bestimmt.

Sowohl @code{measureLength} als auch @code{beatLength} sind
@i{Momente}, Einheiten musikalischer Dauer.  Eine Größe der
Art @i{Moment} wird durch die Scheme-Funktion
@code{ly:make-moment} erstellt.  Für mehr Information zu dieser
Funktion siehe @ref{Time administration}.

@code{beatGrouping} ist eine Liste an Integren, die die Anzahl
von Zählzeiten für jede Gruppe darstellen.

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{grouping-beats.ly}

@c TODO Convert to snippet called "Specifying context with beatGrouping"

By specifying the context, the effect of @code{beatGrouping} can be
limited to the context specified, and values set in higher-level
contexts overridden:

@lilypond[quote,verbatim]
\score {
  \new Staff <<
    \time 7/8
    \new Voice {
      \relative c'' {
        \set Staff.beatGrouping = #'(2 3 2)
        a8 a a a a a a
      }
    }
    \new Voice {
      \relative c' {
        \voiceTwo
        \set Voice.beatGrouping = #'(1 3 3)
        f8 f f f f f f
      }
    }
  >>
}
@end lilypond


@c TODO Send as snippet?

The property @code{measureLength} determines where bar lines
should be inserted and, with @code{beatLength} and
@code{beatGrouping}, how automatic beams should be generated
for time signatures for which no beam end rules are defined.

@lilypond[quote,verbatim,relative=2]
\time 3/4 % auto beam on 1/4 note groups
a16 a a a a a a a a a a a a a a a
\time 12/16 % no defined auto-beaming for this time sig
a16 a a a a a a a a a a a a a a a
\time 3/4
a16 a a a a a a a a a a a a a a a
\set Score.timeSignatureFraction = #'(12 . 16) %keep 3/4 beaming
                                             % due to beatLength
a16 a a a a a a a a a a a a a a a
\set Score.beatLength = #(ly:make-moment 1 8) %beam on 1/8 notes
a16 a a a a a a a a a a a a a a a
\set Score.beatLength = #(ly:make-moment 1 16)
\set Score.beatGrouping = #'(3 4 2 3) %beam on 3/16, 7/16, 9/16, 12/16
a16 a a a a a a a a a a a a a a a
@end lilypond


@c End of snippet

@funindex subdivideBeams

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{sub-dividing-beams.ly}

@cindex measure groupings
@cindex beats, grouping
@cindex grouping beats
@cindex measure sub-grouping

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{conducting-signs,-measure-grouping-signs.ly}


@strong{@i{Die Endpunkte von Balken bestimmen}}

In normalen Taktarten können automatisch gesetzte Balken an jeder
Note beginnen, aber nur an einigen bestimmten Positionen innerhalb
des Taktes beendet werden.  Diese Positionen werden durch die
Eigenschaften in @code{autoBeamSettings} bestimmt.  Sie bestehen
aus einer Liste an Regeln, die bestimmen, wo Balken enden können.
Die Standardeinstellungen dieser automatischen Einstellungen 
befinden sich in der Datei @file{scm/@/auto@/-beam@/.scm}.

Diese Methode @strong{muss} benutzt werden, wenn die Einstellungen
für die Balken in üblichen Taktarten verändert werden sollen, und
sie ist auch in vielen anderen Taktarten gut anzuwenden, wenn
die Taktart sich oft ändert.  Weil die Regeln so formuliert werden
können, dass sie sich auf eine bestimmte Taktart beziehen, müssen
sie nur einmal für jede Taktart definiert werden.  Wenn man das
selbe Ergebnis zu erreichen versucht, indem man die Zählzeiten
gruppiert, müsste man einen @code{\set}-Befehl nach jedem
Taktwechsel benutzen, wenn nicht die Standardwerte für die
Taktart passend sind.

Um eine neue Regel zu der Liste hinzuzufügen, muss folgende
Syntax verwendet werden:

@example
#(override-auto-beam-setting
  '(Balken-Limit
    Balken-Zähler Balken-Nenner
    Taktart-Zähler Taktart-Nenner)
  Moment-Zähler Moment-Nenner [Kontext])
@end example

@noindent
wobei

@itemize

@item @code{Balken-Limit} die Art der Balkenbegrenzung ist.  Das
kann entweder der Wert @code{begin} (Anfang) oder @code{end}
(Ende) sein, aber nur @code{end} hat eine Auswirkung.

@item @code{Balken-Zähler/Balken-Nenner} ist die Balken-Dauer,
auf die die Regel sich bezieht.  Ein Balken hat per Definition
die Dauer seiner kürzesten Note.  Wenn sowohl
@code{Balken-Zähler} als auch @code{Balken-Nenner} auf
 @code{'*'} gesetzt werden, gilt die Regel für alle Dauern.

@item @code{Taktart-Zähler/Taktart-Nenner} bestimmen die
Taktart, auf die die Regel sich bezieht. Wenn @code{Taktart-Zähler}
und @code{Taktart-Nenner} auf @code{'*'} gesetzt werden, gilt
die Regel für alle Taktarten.

@item @code{Moment-Zähler/Moment-Nenner} ist die Position im
Takt, an welcher der Balken aufhören soll.

@item @code{Kontext} ist optional und bestimmt den Kontext, in
welchem die Änderungen vorgenommen werden sollen.  Der
Standard ist @code{'Voice}.

@code{#(score-override-auto-beam-setting '(A B C D) E F)} ist
gleichbedeutend mit
@code{#(override-auto-beam-setting '(A B C D) E F 'Score)}.

@end itemize

Wenn beispielsweise die automatischen Balken immer auf der ersten
Viertel enden sollen, unabhängig von der Taktart oder Dauer
des Balkens, kann

@lilypond[quote,verbatim,relative=2]
a8 a a a a a a a
#(override-auto-beam-setting '(end * * * *) 1 4)
a8 a a a a a a a
@end lilypond

@noindent
benutzt werden.

Balkenregeln können aber auch auf Notengruppen beschränkt werden,
deren kürzeste Note einen bestimmten Wert hat:

@lilypond[quote,verbatim,relative=2]
\time 2/4
% end 1/16 beams for all time signatures at the 1/16 moment
#(override-auto-beam-setting '(end 1 16 * *) 1 16)
a16 a a a a a a a |
a32 a a a a16 a a a a a |
% end 1/32 beams for all time signatures at the 1/16 moment
#(override-auto-beam-setting '(end 1 32 * *) 1 16)
a32 a a a a16 a a a a a |
@end lilypond

Balkenregeln können so definiert werden, dass sie nur in bestimmten
Taktarten angewendet werden:

@lilypond[quote,verbatim,relative=2]
\time 5/8
% end beams of all durations in 5/8 time signature at the 2/8 moment
#(override-auto-beam-setting '(end * * 5 8) 2 8)
c8 c d d d
\time 4/4
e8 e f f e e d d
\time 5/8
c8 c d d d
@end lilypond

Wenn mehrfache Stimmen benutzt werden, muss der @code{Staff}-Kontext
angegeben werden, wenn die Balkenregeln auf alle Stimmen im System
angewendet werden sollen:

@lilypond[quote,verbatim,relative=2]
\time 7/8
% rhythm 3-1-1-2
% Context not specified - does not work correctly
#(override-auto-beam-setting '(end * * 7 8) 3 8)
#(override-auto-beam-setting '(end * * 7 8) 4 8)
#(override-auto-beam-setting '(end * * 7 8) 5 8)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>

% Works correctly with context specified
#(override-auto-beam-setting '(end * * 7 8) 3 8 'Staff)
#(override-auto-beam-setting '(end * * 7 8) 4 8 'Staff)
#(override-auto-beam-setting '(end * * 7 8) 5 8 'Staff)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>
@end lilypond

@c TODO Add example using Score for multiple staves?
@c Hmm.  Not sure it works correctly.  Needs more investigation.

@warning{Wenn eine unerwartete Bebalkung auftritt, schauen Sie
zuerste die Balkeneinstellungen in @file{scm/@/auto@/-beam@/.scm} 
nach, ob sich hier Überschneidungen ergeben, weil die
Balkenenden, die dort definiert sind, auch noch weiterhin
wirksam sind zusätzlich zu den von Ihnen definierten.}

Jede ungewollte oder störende Balkenbeendigung aus den Standard-Eingesllungen
muss für Ihre Taktart rückgängig gemacht werden.  Existierende
automatische Bebalkungsregeln werden entfernt mit folgender
Syntax:

@example
#(revert-auto-beam-setting
  '(Balken-Limit
    Balken-Zähler Balken-Nenner
    Taktart-Zähler Taktart-Nenner)
  Moment-Zähler Moment-Nenner [Kontext])
@end example

@noindent
wobei @code{Balken-Limit}, @code{Balken-Zähler}, @code{Balken-Nenner},
@code{Taktart-Zähler}, @code{Taktart-Nenner}, @code{Moment-Zähler},
@code{Moment-Nenner} sowie @code{Kontext} die gleichen sind
wie oben erklärt.

@lilypond[quote,verbatim,relative=2]
\time 4/4
a16 a a a a a a a a a a a a a a a
% undo a rule ending 1/16 beams in 4/4 time at 1/4 moment
#(revert-auto-beam-setting '(end 1 16 4 4) 1 4)
a16 a a a a a a a a a a a a a a a
@end lilypond

Die Regel in einer @code{revert-auto-beam-setting}-Definition
muss exakt der ursprünglichen Regel entsprechen.  Dabei werden
keine Platzhalter akzeptiert.

@lilypond[quote,verbatim,relative=2]
\time 1/4
#(override-auto-beam-setting '(end 1 16 1 4) 1 8)
a16 a a a
#(revert-auto-beam-setting '(end 1 16 * *) 1 8) % this won't revert it!
a a a a
#(revert-auto-beam-setting '(end 1 16 1 4) 1 8) % this will
a a a a
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beam-grouping-in-7-8-time.ly}


@ignore
@c   Seems like setting beam starting points is no longer
@c   necessary, and/or has no effect.  Remove mention?

The same syntax can be used to specify beam starting points.

@c TODO Does this example add anything?

In this
example, automatic beams can only end on a dotted quarter note
@example
#(override-auto-beam-setting '(end * * * *) 3 8)
#(override-auto-beam-setting '(end * * * *) 1 2)
#(override-auto-beam-setting '(end * * * *) 7 8)
@end example

In 4/4 time signature, this means that automatic beams could end only on
3/8 and on the fourth beat of the measure (after 3/4, that is 2 times
3/8, has passed within the measure).

@end ignore

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{reverting-default-beam-endings.ly}


@predefined

@funindex \autoBeamOff
@code{\autoBeamOff},
@funindex \autoBeamOn
@code{\autoBeamOn}.


@knownissues

Wenn eine Partitur aufhört, während ein automatischer Balken noch
nicht geschlossen ist und noch Noten erwartet, wird dieser letzte
Balken überhaupt nicht ausgegeben.  Das gilt auch für polyphone
Stimmen, die mit @code{<< @dots{} \\ @dots{} >>} gesetzt wurden.
Wenn eine polyphone Stimme endet, während ein Balken noch Noten
erwartet, wird dieser Balken nicht gesetzt.

@seealso

Schnipsel:
@rlsr{Rhythms}.



@node Manual beams
@unnumberedsubsubsec Manual beams

@cindex Balken, manuell
@funindex ]
@funindex [

In einigen Fällen kann es nötig sein, den automatischen Algorithmus 
für die Balken zu überschreiben. Die automatischen Balken werden 
beispielsweise nicht über Pausen oder Taktlinien hinweg gesetzt, und
in Gesang werden die Balken oft nach dem Rhythmus des Textes und
nicht dem der Musik gesetzt. 
Manuell definierte Balken werden mit den Zeichen @code{[} und 
@code{]} (AltGr+8 bzw. 9) markiert.

@lilypond[quote,relative=1,verbatim]
{
  r4 r8[ g' a r8] r8 g[ | a] r8
}
@end lilypond


Einzelne Noten können mit dem Befehl @code{\noBeam} markiert werden, 
damit sie nicht mit einem Balken versehen werden.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\time 2/4 c8 c\noBeam c c
@end lilypond

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Noch bessere manuelle Kontrolle über die Balken kann durch Setzen
der Eigenschaften @code{stemLeftBeamCount} und
@code{stemRightBeamCount} erreicht werden.  Sie bestimmen
die Anzahl von Balken, die rechts und links vom Hals der nächsten
Note gesetzt werden sollen.  Wenn eine Eigenschaften gesetzt ist,
wird ihr Wert nur einmal eingesetzt und dann wieder auf Null gesetzt.
Im folgenden Beispiel hat das letzte @code{f} nur einen Balken
an seiner linken Seite (der als Achtelbalken der gesamten
Gruppe gewertet wird).

@lilypond[quote,relative=2,verbatim]
a8[ r16 f g a]
a8[ r16
\set stemLeftBeamCount = #2
\set stemRightBeamCount = #1
f
\set stemLeftBeamCount = #1
g a]
@end lilypond



@node Feathered beams
@unnumberedsubsubsec Feathered beams

@cindex Balken, gespreizt
@cindex gespreizte Balken
@funindex \featherDurations

Gespreizte Balken werden teilweise eingesetzt um anzuzeigen, dass
kleine Notengruppen in beschleunigendem oder verlangsamendem Tempo
gespielt werden sollen, ohne dass sich das Tempo des Stückes
verändert.  Die Reichweite der gespreizten Balken muss manuell
mit @code{[} und @code{]} angegeben werden und die Spreizung wird
kontrolliert, indem der Balken-Eigenschaft @code{grow-direction}
eine Richtung zugewiesen wird.

Wenn die Anordnung der Noten und die MIDI-Ausgabe das Ritardando
oder Accelerando, wie es die Spreizung angibt, reflektieren soll,
müssen die Noten als ein musikalischer Ausdruck notiert werden,
der von geschweiften Klammern umgeben ist und dem ein
@code{featheredDurations}-(gespreizteDauern)-Befehl vorangestellt
ist, der das Verhaltnis der ersten und letzten Dauer definiert.

Die eckigen Klammern geben die Reichweite des Balkens an und die
geschweiften Klammern zeigen, auf welche Noten sich die Veränderung
der Dauern auswirkt.  Normalerweise bezieht sich das auf die
selbe Notengruppe, aber das ist nicht unbedingt erforderlich: beide
Befehle sind unabhängig voneinander.

Im folgenden Beispiel nehmen die acht 16-Noten exakt die gleiche
Zeit ein wie eine halbe Note, aber die erste Note ist halb so lang
wie die letzte der Gruppe, und die Noten dazwischen werden stufenweise
verlängert.  Die ersten vier 32-Noten beschleunigen stufenweise
das Tempo, während die darauffolgenden vier 32-Noten ein
gleichmäßiges Tempo haben.

@lilypond[relative=1,verbatim,quote]
\override Beam #'grow-direction = #LEFT
\featherDurations #(ly:make-moment 2 1)
{ c16[ c c c c c c c] }
\override Beam #'grow-direction = #RIGHT
\featherDurations #(ly:make-moment 2 3)
{ c32[ d e f] }
% revert to non-feathered beams
\override Beam #'grow-direction = #'()
{ g32[ a b c] }
@end lilypond

@noindent
Die Platzierung der Noten im Druckbild entspricht den Notendauern
nur annähernd, aber die MIDI-Ausgabe ist exakt.

@knownissues

Der @code{\featherDurations}-Befehl funktioniert nur mit kurzen
Notenabschnitten, und wenn die Zahlen in den Brüchen klein
sind.

@seealso

Snippets:
@rlsr{Rhythms}.




@node Bars
@subsection Bars


@menu
* Bar lines::                   
* Bar numbers::                 
* Bar and bar number checks::   
* Rehearsal marks::             
@end menu

@node Bar lines
@unnumberedsubsubsec Bar lines

@cindex Taktlinien
@funindex \bar
@cindex Doppellinie
@cindex Wiederholungszeichen

Taktlinien trennen Takte voneinander, werden aber auch verwendet, 
um Wiederholungen anzuzeigen. Normalerweise werden sie automatisch 
nach Vorgabe der aktuellen Taktart eingefügt.

Die einfachen, automatisch eingefügten Taktlinien können mit dem
@code{\bar}-Befehl geändert werden.  Eine doppelte Taktlinie etwa
wird normalerweise am Ende eines Stückes gesetzt:

@lilypond[quote,relative=1,verbatim]
e4 d c2 \bar "|."
@end lilypond

Es ist kein Fehler, wenn die letzte Note in einem Takt nicht
zur automatische eingefügten Taktlinie aufhört: es wird angenommen,
dass die Note im nächsten Takt weitergeht.  Wenn aber eine ganze
Reihe solcher überlappenden Takte auftritt, können die Noten
gedrungen aussehen oder sogar über den Seitenrand hinausragen.  Das
kommt daher, dass Zeilenumbrüche nur dann vorgenommen werden, wenn
ein vollständiger Takt auftritt, also ein Takt, an dem alle Noten
vor dem Taktstrich zu Ende sind.

@warning{Eine falsche Dauer kann bewirken, dass Zeilenumbrüche
verhindert werden, woraus resultiert, dass die Noten entweder
sehr stark gedrängt auf der Zeile notiert werden, oder die Zeile
über den Seitenrand hinausragt.}

@cindex Zeilenumbrüche
@cindex unsichtbare Taktlinien
@cindex Taktlinien, unsichtbar

Zeilenumbrüche werden erlaubt, wenn eine Taktlinie manuell eingefügt
wird, auch, wenn es sich um keinen vollständigen Takt handelt.  Um
einen Zeilenumbruch zu erlauben, ohne die Taktlinie auszugeben,
kann

@example
\bar ""
@end example

@noindent
benutzt werden.  Damit wird eine unsichtbare Taktlinie an dieser Stelle eingefügt 
und damit ein Zeilenumbruch erlaubt (aber nicht erzwungen), ohne 
dass sich die Anzahl der Takte erhöhen würde.  Um einen
Zeilenumbruch zu erzwingen, siehe
@ref{Line breaking}.

Diese Art von Taktlinien und auch andere besondere Taktlinien
können manuell an jeder Stelle in der Partitur eingefügt werden.
Wenn sie mit dem Ende eines Taktes übereinstimmen, wird die
automatische Taktlinie durch die manuelle ersetzt.  Diese
manuellen Einfügungen haben keine Auswirkung auf die Zählung und
Position der folgenden automatischen Taktlinien.

Manuell können die einfache Taktlinie und zusätzlich fünf Arten
einer doppelten Taktlinie gesetzt werden:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|" g \bar "||" a \bar ".|" b \bar ".|." c \bar "|.|" d \bar "|." e
@end lilypond

Zusätzlich gibt es noch punktierte und gestrichelte Taktlinien:

@lilypond[quote,relative=1,verbatim]
f1 \bar ":" g \bar "dashed" a
@end lilypond

@noindent
und fünf unterschiedliche Wiederholungstaktlinien:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|:" g \bar ":|:" a \bar ":|.|:" b \bar ":|.:" c \bar ":|" d
@end lilypond

@cindex Wiederholungen

Auch wenn die Taktlinien, die Wiederholungen angeben, manuell
eingefügt werden können, wird die Wiederholung dadurch nicht von
LilyPond erkannt.  Wiederholte Stellen werden besser notiert, indem
man die Wiederholguns-Befehle einsetzt, die automatische die
richtigen Taktlinien setzen.  Das ist beschrieben in@ref{Repeats}.

Zusätzlich kann noch @code{"||:"} verwendet werden, dass sich
genauso wie @code{"|:"} verhält, außer bei Zeilenumbrüchen, wo eine
doppelte Taktlinie am Ende der Zeile ausgegeben wird und eine
öffnende Wiederholungslinie am Anfang der nächsten Zeile.

@lilypond[quote,relative=2,verbatim]
\override Score.RehearsalMark #'padding = #3
c c c c
\bar "||:"
c c c c \break
\bar "||:"
c c c c
@end lilypond

In Partituren mit vielen Systemen wird ein @code{\bar}-Befehl in einem 
System automatisch auf alle anderen Systeme angewendet. Die resultierenden 
Taktlinien sind miteinander verbunden innerhalb einer Gruppe 
(@code{StaffGroup}) oder einem Klaviersystem
(@code{PianoStaff} bzw. (@code{GrandStaff}).

@lilypond[quote,fragment,verbatim]
<<
  \new StaffGroup <<
    \new Staff {
      e'4 d'
      \bar "||"
      f' e'
    }
    \new Staff { \clef bass c4 g e g }
  >>
  \new Staff { \clef bass c2 c2 }
>>
@end lilypond


@snippets

@funindex whichBar
@funindex defaultBarType

Der Befehl @code{\bar }@var{Taktart} ist eine Kurzform von:
@code{\set Timing.whichBar = }@var{Taktart}. Immer, wenn 
@code{whichBar} auf einen Wert gesetzt wird, wird eine 
Taktlinie dieses Typs erzeugt.

Die automatische erzeugte Taktlinie ist @code{"|"}.  Das kann
jederzeit durch den Befehl @code{\set Timing.defaultBarType = }
@var{Takstrichart} geändert werden.

@seealso

Notationsreferenz:
@ref{Line breaking},
@ref{Repeats},
@ref{Grouping staves}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{BarLine} (created at
@rinternals{Staff} level), @rinternals{SpanBar} (across
staves), @rinternals{Timing_translator} (for Timing
properties).



@node Bar numbers
@unnumberedsubsubsec Bar numbers

@cindex Taktnummern
@cindex Nummierung von Takten
@funindex currentBarNumber

Taktnummern werden standardmäßig zu Beginn eines jeden Systems
ausgegeben, ausgenommen ist die erste Zeile.  Die Zahl selber
wird in der @code{currentBarNumber}-Eigenschaft gespeichert, die
normalerweise für jeden Takt aktualisiert wird.  Sie kann aber auch
manuell gesetzt werden:

@lilypond[verbatim,quote,fragment,relative=1]
c1 c c c
\break
\set Score.currentBarNumber = #50
c1 c c c
@end lilypond


@snippets

@funindex barNumberVisibility
@cindex Taktnummern, regelmäßiger Abstand

Taktnummern können in regelmäßigem Abstand ausgegeben werden,
anstatt dass sie nur am Beginn des Systems erscheinen.  Um das
zu erreichen, muss die Standardeinstellung verändert werden, um
zu erlauben, dass Taktnummern an anderen Stellen als dem
Beginn von Systemen ausgegeben werden.  Das wird mit der
Eigenschaft @code{break-visibility} von @code{BarNumber} vorgenommen.
Sie braucht drei Werte, die auf @code{#t} (wahr) oder @code{#f}
(falsch) gestellt werden können, womit angegeben wird, ob die
Taktnummer an der entprechenden Stelle sichtbar ist.  Die
Reihenfolge der Werte ist: @var{Ende der Zeile}, @var{Mitte
der Zeile} und @var{Beginn der Zeile}.  Im folgenden
Beispiel werden die Taktlinien überall ausgegeben:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber #'break-visibility = #'#(#t #t #t)
\set Score.currentBarNumber = #11
\bar ""  % Permit first bar number to be printed
c1 c c c
\break
c c c c
@end lilypond

@c  All the rest of these examples will be added to LSR
@c  and moved into the Snippets.  -gp

Im nächsten Beispiel werden die Taktnummern nur für jeden
zweiten Takt gesetzt, außer am Ende der Zeile:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber #'break-visibility = #'#(#f #t #t)
\set Score.currentBarNumber = #11
\bar ""  % Permit first bar number to be printed
% Print a bar number every second measure
\set Score.barNumberVisibility = #(every-nth-bar-number-visible 2)
c1 c c c c
\break
c c c c c
@end lilypond

@cindex Taktnummer, Form
@cindex Aussehen von Taktnummern

The size of the bar number may be changed.  This is illustrated
in the following example, which also shows how to enclose bar
numbers in boxes and circles, and shows an alternative way
of specifying @code{#(#f #t #t)} for @code{break-visibility}.

@lilypond[verbatim,quote,relative=1]
% Prevent bar numbers at the end of a line and permit them elsewhere
\override Score.BarNumber #'break-visibility
  = #end-of-line-invisible

% Increase the size of the bar number by 2
\override Score.BarNumber #'font-size = #2
\repeat unfold 3 { c1 } \bar "|"

% Draw a box round the following bar number(s)
\override Score.BarNumber  #'stencil
  = #(make-stencil-boxer 0.1 0.25 ly:text-interface::print)
\repeat unfold 3 { c1 } \bar "|"

% Draw a circle round the following bar number(s)
\override Score.BarNumber  #'stencil
  = #(make-stencil-circler 0.1 0.25 ly:text-interface::print)
\repeat unfold 4 { c1 } \bar "|."
@end lilypond

@cindex Ausrichtung von Taktlinien
@cindex Taktlinien, Ausrichtung

Bar numbers by default are left-aligned to their parent object.
This is usually the left edge of a line or, if numbers are printed
within a line, the left bar line of the measure.  The numbers may also
be positioned directly on the bar line or right-aligned to the
bar line:

@lilypond[verbatim,quote,relative=1]
\set Score.currentBarNumber = #111
\override Score.BarNumber #'break-visibility = #'#(#t #t #t)
% Increase the size of the bar number by 2
\override Score.BarNumber #'font-size = #2
% Print a bar number every second measure
\set Score.barNumberVisibility = #(every-nth-bar-number-visible 2)
c1 c1
% Center-align bar numbers
\override Score.BarNumber #'self-alignment-X = #0
c1 c1
% Right-align bar numbers
\override Score.BarNumber #'self-alignment-X = #-1
c1 c1
@end lilypond

Bar numbers can be removed entirely by removing the
@code{Bar_number_engraver} from the @code{Score} context.

@lilypond[verbatim,quote]
\layout {
  \context {
    \Score
    \remove "Bar_number_engraver"
  }
}
\relative c''{
  c4 c c c \break
  c4 c c c
}
@end lilypond


@seealso

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{BarNumber}.

@knownissues

Taktnummern können mit der oberen Ecke der Klammer zu Beginn des
Systems zusammenstoßen.  Um das zu verhindert, kann die
@code{padding}-Eigenschaft von @code{BarNumer} verwendet werden,
um die Zahl zu verschieben.

Taktnummern werden nur an Taktzahlen ausgegeben. Um eine Taktzahl
auch am Anfang eines Stückes zu erhalten, muss eine leere
Taktlinie manuell eingefügt werden, und für die aktuelle
Taktzahl (@code{currentBarNumber} muss ein anderer Wert als
@code{1} angegeben werden:

@lilypond[verbatim,quote,relative=1]
\set Score.currentBarNumber = #50
\bar ""
c1 c c c
c1 c c c
\break
@end lilypond


@node Bar and bar number checks
@unnumberedsubsubsec Bar and bar number checks

@cindex Taktüberprüfung
@funindex barCheckSynchronize
@funindex |

Die Taktüberprüfung hilft, Fehler in den Notendauern zu entdecken. 
Eine Taktüberprüfung wird mit dem Taktstrichsymbol @qq{|} (Taste AltGr+<) 
eingegeben. Immer, wenn LilyPond bei der Ausgabe des Notendrucks 
auf dieses Zeichen stößt, sollte hier in den Noten auch ein 
Taktstrich erscheinen. Wenn das nicht der Fall ist, wird eine Warnung 
ausgegeben. Im nächsten Beispiel resultiert die zweite Taktüberprüfung 
in einer Fehlermeldung.

@example
\time 3/4 c2 e4 | g2 |
@end example

Taktüberprüfungen können auch in Gesangstexten verwendet werden:

@example
\lyricmode @{
  \time 2/4
  Twin -- kle | Twin -- kle
@}
@end example

Besonders in mehrstimmiger komplizierter Musik können 
falschen Notenwerte die ganze Partitur durcheinander bringen. 
Es lohnt sich also, die Fehlersuche damit zu beginnen, nicht bestandene 
Taktüberprüfungen zu kontrollieren.

Wenn aufeinander folgende Taktüberprüfungen mit dem gleichen
Abstand Fehler produzieren, wird eventuell nur die erste Warnung
ausgegeben.  Damit wird die Warnung auf den Ursprung de Fehlers
fokussiert.

@funindex |
@funindex pipeSymbol

Es ist auch möglich, die Bedeutung des Symbols @code{|} 
umzudefinieren, so dass hiermit eine andere Aktion als eine
Taktüberprüfung erreicht wird. 
Das geschieht, indem man der Pipe (@code{pipeSymbol} einen musikalischen 
Ausdruck zuweist.  Im nächsten Beispiel wird @code{|} dazu
verwendet, eine doppelte Taktlinie auszugeben, woimmer man
das Zeichen auchsetzt.  Gleichzeitig hört das Zeichen auf,
als Taktüberprüfung zu funktionieren.

@lilypond[quote,verbatim]
pipeSymbol = \bar "||"
{
  c'2 c'2 |
  c'2 c'2
  c'2 | c'2
  c'2 c'2
}
@end lilypond


Wenn man größere Musikstücke kopiert, kann es hilfreich sein, wenn 
LilyPond überprüft, ob die Taktnummer, in der Sie gerade kopieren, 
mit der des Originales übereinstimmt. Das kann mit dem Befehl
@code{\barNumberCheck} folgenderweise überprüft werden:

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
Eine Warnung wird ausgegeben, wenn der interne Zähler 
@code{currentBarNumber} von LilyPond
nicht mit dem Wert 123 übereinstimmt.



@node Rehearsal marks
@unnumberedsubsubsec Rehearsal marks

@cindex Übungszeichen
@cindex Abschnitte markieren
@funindex \mark

Übungszeichen können mit dem @code{\mark}-Befehl ausgegeben werden:

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
Der Buchstabe@tie{}@qq{I} wird ausgelassen, was den allgemeinen
Notensatzregeln entspricht. Wenn Sie dennoch den Buchstaben
@qq{I} benutzen, wollen, müssen Sie

@example
\set Score.markFormatter = #format-mark-alphabet
@end example

@noindent
benutzen.

Das Zeichen wird automatisch erhöht, wenn Sie @code{\mark
\default} schreiben, aber Sie können auch eine beliebige
Ganzzahl als Argument angeben.  Der Wert, der gesetzt werden
soll, wird in der Eigenschaft @code{rehearsalMark} gespeichert.

@cindex Übungszeichen formatieren
@cindex Stil von Übungszeichen
@cindex Übungszeichenstil
@cindex Art der Übungszeichen
@cindex Zeichen, Übung: Formatierung

Der Stil der Übungszeichen wird von der Eigenschaft @code{markFormatter} definiert.  Das ist eine Funktion, die
das aktuelle Zeichen und den aktuellen Kontext als Argument
annimmt.  Sie gibt dann ein Textbeschriftungsobjekt aus.  Im
folgenden Beispiel ist @code{markFormatter} so definiert, dass
eine Zahl ausgegeben wird.  In den folgenden Takten
werden dann andere mögliche Einstellungen gezeigt.

@lilypond[quote,verbatim,relative=2]
\set Score.markFormatter = #format-mark-numbers
c1 \mark \default
c1 \mark \default
\set Score.markFormatter = #format-mark-box-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-letters
c1
@end lilypond

Die Datei @file{scm/@/translation@/-functions@/.scm} beinhaltet
die Definitionen für @code{format-mark-numbers} (erstelle-Zeichen-Nummern),
@code{format-mark-box-numbers} (erstelle-Zeichen-Kasten-Nummern),
@code{format-mark-letters} (erstelle-Zeichen-Buchstaben) und
@code{format-mark-box-letters} (erstelle-Zeichen-Kasten-Buchstaben).  Sie können als Anleitung
für eigene Formatierungsfunktionen dienen.

Die Funktionen @code{format-mark-barnumbers},
@code{format-mark-box-barnumbers}und
@code{format-mark-circle-barnumbers} könenn eingesetzt werden,
um Taktnummern anstelle der fortlaufenden Zahlen bzw. Buchstaben
zu erhalten.

Andere Übungszeichenstile können auch manuell gesetzt werden:

@example
\mark "A1"
@end example

@noindent
@code{Score.markFormatter} hat keine Auswirkungen auf solcherart
definierte Zeichen.  Man kann aber auch mit @code{\markup}
Textbeschriftungsobjekte zu dem selbstdefinierten Zeichen
hinzufügen:

@example
\mark \markup@{ \box A1 @}
@end example

@cindex Segno
@cindex Coda
@cindex D.S al Fine
@cindex Dal Segno

Musikbuchstaben (wie etwa das Segno-Zeichen) können mit dem Befehl
@code{\musicglyph} als ein
@code{\mark}-Zeichen definierte werden:

@lilypond[quote,verbatim,relative=1]
c1 \mark \markup { \musicglyph #"scripts.segno" }
c1 \mark \markup { \musicglyph #"scripts.coda" }
c1 \mark \markup { \musicglyph #"scripts.ufermata" }
c1
@end lilypond

@noindent
Siehe @ref{The Feta font}, wo alle Symbole gezeigt sind, die
mit dem Befehl @code{\musicglyph} ausgegeben werden können.

Übliche Veränderungen der Positionierung von Übungszeichen finden
sich in
@ref{Formatting text}.

@seealso

Notationsreferenz:
@ref{The Feta font},
@ref{Formatting text}.

Installierte Dateien:
@file{scm/@/translation@/-functions@/.scm} beinhaltet die Definition
von @code{format-mark-numbers} und
@code{format-mark-letters}.  Sie können als Anleitung für eigene
Funktionen benutzt werden.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{RehearsalMark}.



@node Special rhythmic concerns
@subsection Special rhythmic concerns


@menu
* Grace notes::                 
* Aligning to cadenzas::        
* Time administration::         
@end menu

@node Grace notes
@unnumberedsubsubsec Grace notes

@funindex \grace
@cindex Verzierungen
@cindex Ziernoten
@cindex Vorhalt
@cindex Vorschlag
@cindex Ornamente

Verzierungen sind ausgeschriebene Verzierungen.  Sie werden in
einer kleineren Schriftgröße gesetzt und nehmen keine logische
Zeit im Takt ein.

@lilypond[quote,relative=2,verbatim]
c4 \grace c16 c4
\grace { c16[ d16] } c2
@end lilypond

LilyPond hat auch Unterstützung für zwei besondere Verzierungen,
den Vorschlag und den Vorhalt.  Der Vorschlag wird durch eine 
verkleinerte Note mit Schrägstrich 
und Bogen notiert.  Der Vorhalt dagegen ist eine Verzierung, die 
einen bestimmten Notenwert der Hauptnote für sich beansprucht. 
Er wird als verkleinerte Note ohne Schrägstrich notiert.

@lilypond[quote,relative=2,verbatim]
\grace c8 b4
\acciaccatura d8 c4
\appoggiatura e8 d4
\acciaccatura { g16[ f] } e4
@end lilypond

Die Position von Verzierungen ist zwischen Notensystemen 
synchronisiert.  Im nächsten Beispiel stehen im einen
System zwei 16-Noten für jede 8-Note des zweiten Systems:

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e2 \grace { c16[ d e f] } e2 }
   \new Staff { c2 \grace { g8[ b] } c2 } >>
@end lilypond

@funindex \afterGrace

@cindex Verzierung, danach
@cindex Nachschlag

Wenn Sie eine Note mit einer Verzierung abschließen wollen, müssen
Sie den @code{\afterGrace}-Befehl benutzen.  Er benötigt zwei
Argumente: die Hauptnote und die Verzierung, die nach der
Hauptnote folgen soll:

@lilypond[quote,verbatim,relative=2]
c1 \afterGrace d1 { c16[ d] } c1
@end lilypond

Damit wird die Verzierung mit einem Abstand von der Hauptnote
gesetzt, der 3/4 der Dauer der Hauptnote entspricht.  Dieser
Standard kann durch Definition von @code{afterGraceFraction}
verändert werden.  Das nächste Beispiel zeigt, wie sich
der Abstand verändert, wenn der Wert 3/4, 15/16 und 1/2 der
Hauptnote beträgt.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 15 16))
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 1 2))
    c1 \afterGrace d1 { c16[ d] } c1
  }
>>
@end lilypond

Der Abstand zwischen der Hauptnote und der Verzierung kann auch
mit unsichtbaren Noten beeinflusst werden.  Im nächsten Beispiel
wird die Verzierung mit einem Abstand von 7/8 zur Hauptnote
gesetzt.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  << { d1^\trill_( }
     { s2 s4. \grace { c16[ d] } } >>
  c1)
}
@end lilypond

Ein @code{\grace}-Notenabschnitt wird nach besonderen Satzregeln 
gesetzt, um z. B. kleinere Noten zu benutzen und die Richtung der 
Hälse einzustellen.  Veränderungen am Layout müssen also innerhalb 
des Verzierungsausdrucks gesetzt werden, damit sie auch eine Auswirkung haben.  Die Veränderungen müssen auch innerhalb des
Verzierungsausdrucks rückgängig gemacht werden.  In diesem
Fall wird die Richtung der Hälse geändert und dann wieder der
Standard eingestellt:

@lilypond[quote,verbatim,relative=2]
\new Voice {
  \acciaccatura {
    \stemDown
    f16->
    \stemNeutral
  }
  g4 e c2
}
@end lilypond

@cindex Hals, mit Schrägstrich
@cindex durchgestrichener Hals
@cindex Notenhals, durchgestrichen


@snippets

The slash through the stem found in @emph{acciaccatura}s can be applied
in other situations:

@lilypond[quote,verbatim,relative=2]
\relative c'' {
  \override Stem #'stroke-style = #"grace"
  c8( d2) e8( f4)
}
@end lilypond

The layout of grace expressions can be changed throughout the
music using the function @code{add-grace-property}.  The following
example undefines the @code{Stem} direction for this grace, so
that stems do not always point up.

@lilypond[quote,verbatim,relative=2]
\relative c'' {
  \new Staff {
    #(add-grace-property 'Voice 'Stem 'direction ly:stem::calc-direction)
    #(remove-grace-property 'Voice 'Stem 'direction)
    \new Voice {
       \acciaccatura { f16 } g4
       \grace { d16[ e] } f4
       \appoggiatura { a,32[ b c d] } e2
    }
  }
}
@end lilypond

Another option is to change the variables @code{startGraceMusic},
@code{stopGraceMusic}, @code{startAcciaccaturaMusic},
@code{stopAcciaccaturaMusic}, @code{startAppoggiaturaMusic},
@code{stopAppoggiaturaMusic}.  The default values of these can be
seen in the file @code{ly/@/grace@/-init@/.ly}.  By redefining
them other effects may be obtained.

Grace notes may be forced to align with regular notes
in other staves:

@lilypond[verbatim,quote]
\relative c'' {
  <<
    \override Score.SpacingSpanner #'strict-grace-spacing = ##t
    \new Staff {
      c4
      \afterGrace c4 { c16[ c8 c16] }
      c4 r
    }
    \new Staff {
      c16 c c c c c c c c4 r
    }
  >>
}
@end lilypond


@seealso

Glossar:
@rglos{grace notes},
@rglos{acciaccatura},
@rglos{appoggiatura}.

Installierte Dateien:
@file{ly/@/grace@/-init@/.ly}.

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{GraceMusic}.


@knownissues

Eine Partitur, die mit einem @code{\grace}-Ausdruck beginnt, benötigt 
eine explizit gesetzte neue Stimme (@code{\new Voice}), sonst werden 
Hauptnote und Verzierung auf verschiedenen Systemen gesetzt.

Ein Vorschlag (@emph{acciaccatura}) mit mehreren Noten und 
Balken wird ohne den Schrägstrich gesetzt und sieht einem
Vorhalt (@emph{appoggiatura}) sehr ähnlich.
@c TODO Add link to LSR snippet to add slash when available

Die Synchronisation von Verzierungen kann auch zu Überraschungen führen. 
Auch andere Symbole der Systeme, wie Vorzeichen, Taktlinien usw., werden 
synchronisiert. Vorsicht ist geboten, wenn nur in bestimmten Systemen 
Verzierungen vorkommen:

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e4 \bar "|:" \grace c16 d4 }
   \new Staff { c4 \bar "|:" d4 } >>
@end lilypond

@noindent
Dem kann abgeholfen werden, indem unsichtbare Verzierungsnoten der selben 
Länge in die anderen Systeme gesetzt werden. Im obigen Beispiel müsste 
also 

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
<< \new Staff { e4 \bar "|:" \grace c16 d4 }
   \new Staff { c4 \bar "|:" \grace s16 d4 } >>
@end lilypond

@noindent gesetzt werden.

Verzierungsabschnitte sollten nur innerhalb von sequentiellen musikalischen 
Ausdrücken benützt werden. Wenn sie ineinandergeschachtelt werden, kann es 
zu Fehlermeldungen oder Abstürzen kommen.


@node Aligning to cadenzas
@unnumberedsubsubsec Aligning to cadenzas

@cindex Kadenz, Ausrichten an
@cindex Ausrichten an Kadenz

In Orchesterpartituren stellen Kadenzen ein besonderes Problem dar:
Wenn in der Partitur ein Instrument eine Kadenz spielt, die notiert
wird, müssen die anderen Stimmen genau die entsprechende Anzahl Noten
überspringen, damit sie nicht zu früh oder zu spät einsetzen.

Eine Lösung ist es, die Funktionen @code{mmrest-of-length} oder
@code{skip-of-length} zu benutzen.  Diese Scheme-Funktionen
brauchen einen definierten Notenabschnitt (eine Variable)
als Argument und produzieren entweder Ganztaktpausen oder leere
Takte, die genauso lang sind wie der Notenabschnitt.

@lilypond[verbatim,quote]
MyCadenza = \relative c' {
  c4 d8 e f g g4
  f2 g4 g
}

\new GrandStaff <<
  \new Staff {
    \MyCadenza c'1
    \MyCadenza c'1
  }
  \new Staff {
    #(ly:export (mmrest-of-length MyCadenza))
    c'1
    #(ly:export (skip-of-length MyCadenza))
    c'1
  }
>>
@end lilypond

@seealso

Glossar:
@rglos{cadenza}.

Schnipsel:
@rlsr{Rhythms}.



@node Time administration
@unnumberedsubsubsec Time administration

@cindex Verwaltung der Zeiteinheiten
@cindex Zeit (in der Partitur)
@cindex Noten ohne Takt
@cindex Takt, Noten ohne
@cindex Noten ohne Metrum
@cindex Metrum, Noten ohne

@funindex currentBarNumber
@funindex measurePosition
@funindex measureLength

Die Zeit in einer Partitur wird vom @code{Timing_translator}
verwaltet, der sich in den Standardeinstellungen im @code{Score}-Kontext
befindet.  Eine Parallelbezeichnung, @code{Timing}, wird
dem Kontext hinzugefügt, in dem sich @code{Timing_translator}
befindet.

Die folgenden Eigenschaften von @code{Timing} werden eingesetzt,
um die Zeit in Partituren zu verwalten.

@cindex Taktnummer

@table @code
@item currentBarNumber (aktuelle Taktnummer)
Die gerade aktuelle Taktzahl.  Für ein Beispiel, das die Benutzung
dieser Eigenschaft zeigt, siehe @ref{Bar numbers}.

@item measureLength (Taktlänge)
Die Länge der Takte mit der aktuellen Taktart.  In einem 4/4-Takt
ist sie 1, in einem 6/8-Takt 3/4.  Dieser Wert bestimmt, wann
eine Taktlinie gezogen wird und wie automatische Balken erstellt
werden sollen.

@item measurePosition (Taktposition)
Der Schlag im Takt zum aktuellen Moment.  Dieser Wert wird
zurückgesetzt, indem @code{measureLength} (die Taktlänge) abgezogen
wird, wenn der Wert von @code{measureLength} erreicht oder
überschritten wird.  Wenn das passiert, wird der Zähler
@code{currentBarNumber} (aktuelle Taktnummer) erhöht.

@item timing (Zeitberechnung)
Wenn auf wahr gesetzt, werden die oben genannten Variablen
zu jedem Zeitpunkt aktualisiert.  Wenn auf falsch gesetzt,
bleibt der Engraver unendlich lange im aktuellen Takt.

@end table

Zeitverwaltung kann geändert werden, indem man diese Variablen
direkt beeinflusst.  Im nächsten Beispiel wird die normale
Taktart mit 4/4 angegeben, aber @code{measureLength} wird
auf 5/4 gesetzt.  An der Stelle 4/8 des dritten Taktes wird die
Taktposition (@code{measurePosition}) um 1/8 auf 5/8 erhöht, so
dass der Takt im Ergebnis 1/8 kürzer ist.  Die nächste Taktlinie
wird dann auch bei 9/8 gezogen und nicht bei 5/4.

@lilypond[quote,verbatim,relative=1]
\set Score.measureLength = #(ly:make-moment 5 4)
c1 c4
c1 c4
c4 c4
\set Score.measurePosition = #(ly:make-moment 5 8)
b4 b4 b8
c4 c1
@end lilypond

@noindent
Wie das Beispiel zeigt, erstellt @code{ly:make-moment n m} 
die Dauer Zähler/Nenner einer ganzen Note.  Zum Beispiel heißt
@code{ly:make-moment 1 8} die Dauer einer Achtelnote, und
@code{ly:make-moment 7 16} die Dauer von sieben Sechszehntelnoten.


@seealso

Notationsreferenz:
@ref{Bar numbers}, @ref{Unmetered music}

Schnipsel:
@rlsr{Rhythms}.

Referenz der Interna:
@rinternals{Timing_translator},
@rinternals{Score}



