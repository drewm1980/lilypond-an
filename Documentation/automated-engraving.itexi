@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@ignore
hmm, the one big page is too big, but it was really inviting to
     read.  this is not.  maybe just scrap this menu and introduction
     to index?
@end ignore

@c @setfilename automated-engraving.info
@c @settitle Obsessed with putting ink on paper
@c @documentencoding UTF-8
@c @documentlanguage en

@c @set web
@c @include macros.itexi

@c @afourpaper

@c @ifnottex
@c @node Top
@c @top
@c @chapheading
@c @end ifnottex

@node automated-engraving
@unnumbered Obsessed with putting ink on paper
@c @finalout

@heading What is behind LilyPond?

@sourceimage{hader-collage,,,.png}

LilyPond is not unique in making music notation: there are a lot of
programs that print music, and nowadays most of the newly printed
music is made with computers.  Unfortunately, that also shows: just
ask any musician that plays classical music: new scores do not look as
nice as old ones.

What is the difference between hand-work and machine work, and what
has caused it?  How can we improve the situation?  This essay explains
problems in music notation (software), and our approach to solving
them.

@menu
* introduction:: Introduction -- what is wrong with computer music notation.
* software:: What is wrong with software -- or how Finale is not the end-all of music software.
* problem-statement:: How not to design software -- or modeling music notation.
* divide-and-conquer:: Divide and conqueror -- a blue print for automated notation.
* implementing-notation:: Impressive, but does it also work in theory -- a practical approach to capturing notation.
* engraving:: Music engraving -- the art of printing music.
* implementing-typography:: Implementing typography -- hackers attack the engraving problem.
* formatting-architecture:: A flexible program architecture -- lets us write engraving software 
* scoring-esthetics:: Beautiful numbers -- how LilyPond participates in the Miss World contests.
* benchmarking:: Notation benchmarking -- is a flexible architecture enough?
* schubert:: Notation benchmarking -- project too?
* typography-features:: Typographical features -- unique to LilyPond.
* input-format:: Input format -- how to enter music. 
* conclusion:: Conclusion.
@end menu

@contents

@c This essay is also available in @ref{big-page.html,one big page}.

@include automated-engraving/introduction.itexi
@include automated-engraving/software.itexi
@include automated-engraving/problem-statement.itexi
@include automated-engraving/divide-and-conquer.itexi
@include automated-engraving/implementing-notation.itexi
@include automated-engraving/engraving.itexi
@include automated-engraving/implementing-typography.itexi
@include automated-engraving/formatting-architecture.itexi
@include automated-engraving/scoring-esthetics.itexi
@include automated-engraving/benchmarking.itexi
@include automated-engraving/schubert.itexi
@include automated-engraving/typography-features.itexi
@include automated-engraving/input-format.itexi
@include automated-engraving/conclusion.itexi
