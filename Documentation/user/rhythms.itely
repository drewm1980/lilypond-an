@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@c \version "2.11.61"

@node Rhythms
@section Rhythms

@lilypondfile[quote]{rhythms-headword.ly}

This section discusses rhythms, rests, durations, beaming and bars.

@menu
* Writing rhythms::
* Writing rests::
* Displaying rhythms::
* Beams::
* Bars::
* Special rhythmic concerns::
@end menu


@node Writing rhythms
@subsection Writing rhythms

@menu
* Durations::
* Tuplets::
* Scaling durations::
* Ties::
@end menu

@node Durations
@unnumberedsubsubsec Durations

@cindex durations, of notes
@cindex note durations

@funindex \longa
@funindex \breve
@funindex \maxima

Durations are designated by numbers and dots.
Durations are entered as their reciprocal values.  For example, a
quarter note is entered using a @code{4} (since it is a 1/4 note),
and a half note is entered using a @code{2} (since it is a 1/2
note).  For notes longer than a whole you must use the
@code{\longa} (a double breve) and @code{\breve} commands.
Durations as short as 64th notes may be specified.  Shorter values
are possible, but only as beamed notes.

@c Two 64th notes are needed to obtain beams
@lilypond[quote,verbatim,relative=2]
\time 8/1
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c64
@end lilypond

@noindent
Here are the same durations with automatic beaming turned off.

@c not strictly "writing rhythms"; more of a "displaying" thing,
@c but it's ok here.  -gp
@lilypond[quote,verbatim,relative=2]
\time 8/1
\autoBeamOff
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c64
@end lilypond

A note with the duration of a quadruple breve may be entered with
@code{\maxima}, but this is supported only within ancient music
notation.  For details, see @ref{Ancient notation}.

If the duration is omitted, it is set to the previously
entered duration.  The default for the first note is a quarter
note.

@lilypond[quote,verbatim,relative=2]
a a a2 a a4 a a1 a
@end lilypond

@cindex notes, dotted
@cindex dotted notes

@funindex .

To obtain dotted note lengths, place a dot (@code{.}) after the
duration.  Double-dotted notes are specified by appending two
dots, and so on.

@lilypond[quote,verbatim,relative=2]
a4 b c4. b8 a4. b4.. c8.
@end lilypond

Some durations cannot be represented with just binary durations
and dots; they can be represented only by tying two or more
notes together.  For details, see @ref{Ties}.

For ways of specifying durations for the syllables of lyrics and
ways of aligning lyrics to notes, see @ref{Vocal music}.

Optionally, notes can be spaced strictly proportionately to their
duration.  For details of this and other settings which control
proportional notation, see @ref{Proportional notation}.

@funindex \dotsUp
@funindex \dotsDown
@funindex \dotsNeutral

Dots are normally moved up to avoid staff lines, except in
polyphonic situations.  Predefined commands are available to
force a particular direction manually, for details
see @ref{Direction and placement}.

@predefined

@code{\autoBeamOff},
@code{\dotsUp},
@code{\dotsDown},
@code{\dotsNeutral}.


@seealso

Music Glossary:
@rglos{breve},
@rglos{longa},
@rglos{note value},
@rglos{Duration names notes and rests}.

Notation Reference:
@ref{Automatic beams},
@ref{Ties},
@ref{Writing rhythms},
@ref{Writing rests},
@ref{Vocal music},
@ref{Ancient notation},
@ref{Proportional notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Dots},
@rinternals{DotColumn}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited:
rests from 128th to maxima (8 x whole) may be printed.


@node Tuplets
@unnumberedsubsubsec Tuplets

@cindex tuplets
@cindex triplets
@funindex \times

Tuplets are made from a music expression by multiplying all the
durations with a fraction:

@example
\times @var{fraction} @{ @var{music} @}
@end example

@noindent
The duration of @var{music} will be multiplied by the
fraction.  The fraction's denominator will be printed over or
under the notes, optionally with a bracket.  The most common
tuplet is the triplet in which 3 notes have the duration of 2, so
the notes are 2/3 of their written length.

@lilypond[quote,verbatim,relative=2]
a2 \times 2/3 { b4 b b }
c4 c \times 2/3 { b4 a g }
@end lilypond

@funindex \tupletUp
@funindex \tupletDown
@funindex \tupletNeutral

The automatic placement of the tuplet bracket above or below the
notes may be overridden manually with predefined commands, for
details see @ref{Direction and placement}.

Tuplets may be nested:

@lilypond[quote,verbatim,relative=2]
\autoBeamOff
c4 \times 4/5 { f8 e f \times 2/3 { e[ f g] } } f4 |
@end lilypond

Modifying nested tuplets which begin at the same musical moment
must be done with @code{\tweak}.

To modify the duration of notes without printing a tuplet bracket,
see @ref{Scaling durations}.

@predefined

@code{\tupletUp},
@code{\tupletDown},
@code{\tupletNeutral}.


@snippets

@cindex tuplet formatting
@cindex triplet formatting

@funindex tupletNumberFormatFunction
@funindex tupletSpannerDuration

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{entering-several-tuplets-using-only-one--times-command.ly}

@funindex TupletNumber

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-the-tuplet-number.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{permitting-line-breaks-within-beamed-tuplets.ly}

@seealso

Music Glossary:
@rglos{triplet},
@rglos{tuplet},
@rglos{polymetric}.

Learning Manual: @rlearning{Tweaking methods}.

Notation Reference:
@ref{Time administration},
@ref{Scaling durations},
@ref{The tweak command},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TupletBracket},
@rinternals{TupletNumber},
@rinternals{TimeScaledMusic}.

@knownissues
@cindex grace notes within tuplet brackets
When the first note on a staff is a grace note followed by a
tuplet the grace note must be placed before the @code{\times}
command to avoid errors.  Anywhere else, grace notes may be
placed within tuplet brackets.


@node Scaling durations
@unnumberedsubsubsec Scaling durations

@cindex scaling durations
@cindex durations, scaling

You can alter the duration of single notes, rests or chords by a
fraction @code{N/M} by appending @code{*N/M} (or @code{*N} if
@code{M} is 1) to the duration.
This will not affect the appearance of the notes or rests
produced, but the altered duration will be used in calculating the
position within the measure and setting the duration in the MIDI
output.  Multiplying factors may be combined such as @code{*L*M/N}.

In the following example, the first three notes take up exactly
two beats, but no triplet bracket is printed.

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Alter durations to triplets
a4*2/3 gis4*2/3 a4*2/3
% Normal durations
a4 a4
% Double the duration of chord
<a d>4*2
% Duration of quarter, appears like sixteenth
b16*4 c4
@end lilypond

The duration of skip or spacing notes may also be modified by
a multiplier.  This is useful for skipping many measures, e.g.,
@code{s1*23}.

@cindex compressing music
@funindex \scaleDurations

Longer stretches of music may be compressed by a fraction in the
same way, as if every note, chord or rest had the fraction as a
multiplier.  This leaves the appearance of the music unchanged but
the internal duration of the notes will be multiplied by the
fraction @emph{num}/@emph{den}.  The spaces around the dot are
required.  Here is an example showing how music can be compressed
and expanded:

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Normal durations
<c a>4 c8 a
% Scale music by *2/3
\scaleDurations #'(2 . 3) {
  <c a f>4. c8 a f
}
% Scale music by *2
\scaleDurations #'(2 . 1) {
  <c' a>4 c8 b
}
@end lilypond

@noindent
One application of this command is in polymetric
notation, see @ref{Polymetric notation}.


@seealso

Notation Reference:
@ref{Tuplets},
@ref{Invisible rests},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.


@node Ties
@unnumberedsubsubsec Ties

@cindex tie
@funindex ~

A tie connects two adjacent note heads of the same pitch.  The tie
in effect extends the duration of a note.

@warning{Ties should not be confused with @emph{slurs}, which
indicate articulation, or @emph{phrasing slurs}, which indicate
musical phrasing.  A tie is just a way of extending a note
duration, similar to the augmentation dot.}

A tie is entered using the tilde symbol @code{~}

@lilypond[quote,verbatim,relative=2]
a2 ~ a
@end lilypond


@noindent
Ties are used either when the note crosses a bar line, or when
dots cannot be used to denote the rhythm.  Ties should also be
used when note values cross larger subdivisions of the measure:

@lilypond[verbatim,quote]
\relative c' {
  r8 c8 ~ c2 r4 |
  r8^"not" c2 ~ c8 r4
}
@end lilypond

If you need to tie many notes across bar lines, it may be
easier to use automatic note splitting, see @ref{Automatic note
splitting}.  This mechanism automatically splits long notes, and
ties them across bar lines.

@cindex ties and chords
@cindex chords and ties

When a tie is applied to a chord, all note heads whose pitches
match are connected.  When no note heads match, no ties will be
created.  Chords may be partially tied by placing the tie inside
the chord.

@lilypond[quote,verbatim,relative=1]
<c e g> ~ <c e g>
<c~ e g~ b> <c e g b>
@end lilypond

@funindex \repeatTie
@cindex repeating ties
@cindex ties, repeating
@cindex volta brackets and ties
@cindex ties and volta brackets

When a second alternative of a repeat starts with a tied note, you
have to specify the repeated tie as follows:

@lilypond[quote,relative=2,verbatim]
\repeat volta 2 { c g <c e>2 ~ }
\alternative {
  % First alternative: following note is tied normally
  { <c e>2. r4 }
  % Second alternative: following note has a repeated tie
  { <c e>2\repeatTie d4 c } }
@end lilypond

@cindex laissez vibrer
@cindex ties, laissez vibrer
@funindex \laissezVibrer

@notation{L.v.} ties (@notation{laissez vibrer}) indicate that
notes must not be damped at the end.  It is used in notation for
piano, harp and other string and percussion instruments.  They can
be entered as follows:

@lilypond[quote,verbatim,relative=1]
<c f g>1\laissezVibrer
@end lilypond

@cindex ties, placement
@funindex \tieUp
@funindex \tieDown
@funindex \tieNeutral

The vertical placement of ties may be controlled, see
Predefined commands, or for details, see
@ref{Direction and placement}.

@cindex ties, appearance
@funindex \tieDotted
@funindex \tieDashed
@funindex \tieSolid

Solid, dotted or dashed ties may be specified, see Predefined
commands.


@predefined

@code{\tieUp},
@code{\tieDown},
@code{\tieNeutral},
@code{\tieDotted},
@code{\tieDashed},
@code{\tieSolid}.


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{using-ties-with-arpeggios.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{engraving-ties-manually.ly}


@seealso

Music Glossary:
@rglos{tie},
@rglos{laissez vibrer}.

Notation Reference: @ref{Automatic note splitting}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{LaissezVibrerTie},
@rinternals{LaissezVibrerTieColumn},
@rinternals{TieColumn},
@rinternals{Tie}.


@knownissues

Switching staves when a tie is active will not produce a slanted
tie.

Changing clefs or octavations during a tie is not really
well-defined.  In these cases, a slur may be preferable.





@node Writing rests
@subsection Writing rests

Rests are entered as part of the music in music expressions.

@menu
* Rests::
* Invisible rests::
* Full measure rests::
@end menu

@node Rests
@unnumberedsubsubsec Rests
@cindex rest
@cindex rest, entering durations
@cindex maxima
@cindex longa
@cindex breve

@funindex \rest
@funindex r
@funindex \maxima
@funindex \longa
@funindex \breve

Rests are entered like notes with the note name @code{r}.
Durations longer than a whole rest use the predefined
commands shown:

@c \time 16/1 is used to avoid spurious bar lines
@c and long tracts of empty measures
@lilypond[fragment,quote,verbatim]
\new Staff {
  % These two lines are just to prettify this example
  \time 16/1
  \override Staff.TimeSignature #'stencil = ##f
  % Print a maxima rest, equal to four breves
  r\maxima
  % Print a longa rest, equal to two breves
  r\longa
  % Print a breve rest
  r\breve
  r1 r2 r4 r8 r16 r32 r64 r128
}
@end lilypond

@cindex rest, multi-measure
@cindex rest, whole-measure

Whole measure rests, centered in the middle of the measure, must be
entered as multi-measure rests.  They can be used for a single
measure as well as many measures and are discussed in @ref{Full
measure rests}.

@cindex rest, specifying vertical position

To explicitly specify a rest's vertical position, write a note
followed by @code{\rest}.  A rest of the duration of the note will
be placed at the staff position where the note would appear.  This
allows for precise manual formatting of polyphonic music, since the
automatic rest collision formatter will not move these rests.

@lilypond[quote,verbatim,relative=2]
a4\rest d4\rest
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{rest-styles.ly}


@seealso

Notation Reference:
@ref{Full measure rests}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Rest}.


@knownissues

@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited: there
are rests from 128th to maxima (8 x whole).


@node Invisible rests
@unnumberedsubsubsec Invisible rests

@cindex skip
@cindex invisible rest
@cindex rest, invisible
@cindex spacer note
@funindex s
@funindex \skip

An invisible rest (also called a @q{spacer rest}) can be entered
like a note with the note name@tie{}@code{s}:

@lilypond[verbatim,quote,relative=2]
c4 c s c
s2 c
@end lilypond

@cindex lyrics, skip

Spacer rests are available only in note mode and chord mode.  In
other situations, for example, when entering lyrics, @code{\skip}
is used to skip a musical moment.  @code{\skip} requires an
explicit duration.

@lilypond[quote,verbatim,relative=2]
<<
  {
    a2 \skip2 a2 a2
  }
  \new Lyrics {
    \lyricmode {
      foo2 \skip 1 bla2
    }
  }
>>
@end lilypond

A spacer rest implicitly causes @code{Staff} and @code{Voice}
contexts to be created if none exist, just like notes and rests
do:

@lilypond[quote,verbatim,fragment]
s1 s s
@end lilypond

@code{\skip} simply skips musical time; it creates no output of
any kind.

@lilypond[quote,verbatim,fragment]
% This is valid input, but does nothing
\skip 1 \skip1 \skip 1
@end lilypond

@seealso

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{SkipMusic}


@node Full measure rests
@unnumberedsubsubsec Full measure rests

@cindex multi-measure rests
@cindex full-measure rests
@cindex rest, multi-measure
@cindex rest, full-measure
@cindex whole rest for a full measure
@funindex R

Rests for one or more full measures are entered like notes with
the note name uppercase @code{R}:

@lilypond[quote,verbatim,relative=2]
% Rest measures contracted to single measure
\compressFullBarRests
R1*4
R1*24
R1*4
b2^"Tutti" b4 a4
@end lilypond

The duration of full-measure rests is identical to the duration notation
used for notes.  The duration in a multi-measure rest must always be an
integral number of measure-lengths, so augmentation
dots or fractions must often be used:

@lilypond[quote,fragment,verbatim]
\compressFullBarRests
\time 2/4
R1 | R2 |
\time 3/4
R2. | R2.*2 |
\time 13/8
R1*13/8 | R1*13/8*12 |
\time 10/8
R4*5*4 |
@end lilypond

A full-measure rest is printed as either a whole
or breve rest, centered in the measure, depending on the time
signature.

@lilypond[quote,verbatim,fragment]
\time 4/4
R1 |
\time 6/4
R1*3/2 |
\time 8/4
R1*2 |
@end lilypond
@funindex \expandFullBarRests
@funindex \compressFullBarRests
@cindex multi-measure rest, expanding
@cindex multi-measure rest, contracting

By default a multi-measure rest is expanded in the printed score
to show all the rest measures explicitly.
Alternatively, a mult-measure rest can be shown as a single measure
containing a multi-measure rest symbol, with the number of measures of rest
printed above the measure:

@lilypond[quote,fragment,verbatim]
% Default behavior
\time 3/4 r2. | R2.*2 |
\time 2/4 R2 |
\time 4/4
% Rest measures contracted to single measure
\compressFullBarRests
r1 | R1*17 | R1*4 |
% Rest measures expanded
\expandFullBarRests
\time 3/4
R2.*2 |
@end lilypond


@cindex text on multi-measure rest
@cindex multi-measure rest, attaching text
@cindex script on multi-measure rest
@cindex multi-measure rest, script
@cindex fermata on multi-measure rest
@cindex multi-measure rest, attaching fermata

Markups can be added to multi-measure rests.
The predefined command @code{\fermataMarkup}
is provided for adding fermatas.

@lilypond[quote,verbatim,fragment]
\compressFullBarRests
\time 3/4
R2.*10^\markup { \italic "ad lib." }
R2.^\fermataMarkup
@end lilypond

@warning{
Markups attached to a multi-measure rest are
objects of type @code{MultiMeasureRestText}, not
@code{TextScript}.  Overrides must be directed to the correct
object, or they will be ignored.  See the following example.
}

@lilypond[quote,verbatim,fragment]
% This fails, as the wrong object name is specified
\override TextScript #'padding = #5
R1^"wrong"
% This is correct and works
\override MultiMeasureRestText #'padding = #5
R1^"right"
@end lilypond

When a multi-measure rest immediately follows a @code{\partial}
setting, resulting bar-check warnings may not be displayed.

@predefined
@code{\textLengthOn},
@code{\textLengthOff},
@code{\fermataMarkup},
@code{\compressFullBarRests},
@code{\expandFullBarRests}.

@snippets

@cindex church rest
@cindex rest, church
@cindex kirchenpausen

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-form-of-multi--measure-rests.ly}

@cindex multi-measure rests, positioning
@cindex positioning multi-measure rests

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{positioning-multi--measure-rests.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{multi--measure-rest-markup.ly}

@seealso

Music Glossary:
@rglos{multi-measure rest}.

Notation Reference:
@ref{Durations},
@ref{Text},
@ref{Formatting text},
@ref{Text scripts}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{MultiMeasureRest},
@rinternals{MultiMeasureRestNumber},
@rinternals{MultiMeasureRestText}.


@knownissues

If an attempt is made to use fingerings (e.g.,
@code{R1*10-4}) to put numbers over multi-measure rests, the
fingering numeral (4) may collide with the bar counter
numeral (10).

@cindex condensing rests
@cindex rest, condensing ordinary

There is no way to automatically condense multiple ordinary rests
into a single multi-measure rest.

@cindex rest, collisions of

Multi-measure rests do not take part in rest collisions.

@node Displaying rhythms
@subsection Displaying rhythms

@menu
* Time signature::
* Upbeats::
* Unmetered music::
* Polymetric notation::
* Automatic note splitting::
* Showing melody rhythms::
@end menu

@node Time signature
@unnumberedsubsubsec Time signature

@cindex time signature
@cindex meter
@funindex \time

The time signature is set as follows:

@lilypond[quote,verbatim,relative=2]
\time 2/4 c2
\time 3/4 c2.
@end lilypond

@cindex Time signature, visibility of

Time signatures are printed at the beginning of a piece
and whenever the time signature changes.  If a change takes place
at the end of a line a warning time signature sign is printed
there.  This default behavior may be changed, see
@ref{Visibility of objects}.

@lilypond[quote,verbatim,relative=2]
\time 2/4
c2 c
\break
c c
\break
\time 4/4
c c c c
@end lilypond

@funindex \numericTimeSignature
@funindex \defaultTimeSignature
@cindex time signature style

The time signature symbol that is used in 2/2 and 4/4 time can be
changed to a numeric style:

@lilypond[quote,verbatim,relative=2]
% Default style
\time 4/4 c1
\time 2/2 c1
% Change to numeric style
\numericTimeSignature
\time 4/4 c1
\time 2/2 c1
% Revert to default style
\defaultTimeSignature
\time 4/4 c1
\time 2/2 c1
@end lilypond


Mensural time signatures are covered in
@ref{Mensural time signatures}.

@predefined

@code{\numericTimeSignature},
@code{\defaultTimeSignature}.

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-the-time-signature-without-affecting-the-beaming.ly}

@cindex compound time signatures
@cindex time signature, compound

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{compound-time-signatures.ly}


@seealso

Music Glossary:
@rglos{time signature}

Notation Reference:
@ref{Mensural time signatures},
@ref{Time administration}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator}.


@node Upbeats
@unnumberedsubsubsec Upbeats

@cindex anacrusis
@cindex upbeat
@cindex partial measure
@cindex measure, partial
@cindex pickup measure
@cindex measure, change length
@cindex measurePosition
@funindex \partial

Partial or pick-up measures, such as an anacrusis or upbeat, are
entered using the @code{\partial} command, with the syntax

@example
\partial @var{duration}
@end example

where @code{duration} is the rhythmic length of the interval
before the start of the first complete measure:

@lilypond[quote,verbatim,relative=2]
\partial 4 e4 |
a2. c,4 |
@end lilypond

The partial measure can be any duration less than a full measure:

@lilypond[quote,verbatim,relative=2]
\partial 8*3 c8 d e |
a2. c,4 |
@end lilypond

Internally, this is translated into

@example
\set Timing.measurePosition = -@var{duration}
@end example

The property @code{measurePosition} contains a rational number
indicating how much of the measure has passed at this point.  Note
that this is set to a negative number by the @code{\partial}
command: i.e., @code{\partial 4} is internally translated to
@code{-4}, meaning @qq{there is a quarter note left in the measure.}

@seealso

Music Glossary:
@rglos{anacrusis}.

Notation Reference:
@ref{Grace notes}.

Snippets:
@rlsr{Rhythms}.

Internal Reference:
@rinternals{Timing_translator}.

@knownissues

The @code{\partial} command is intended to be used only at the
beginning of a piece.  If you use it after the beginning, some
odd warnings may occur.

@node Unmetered music
@unnumberedsubsubsec Unmetered music

@funindex \cadenzaOn
@funindex \cadenzaOff
@cindex bar lines, turning off
@cindex bar numbering, turning off
@cindex cadenza
@cindex unmetered music

Bar lines and bar numbers are calculated automatically.  For
unmetered music (some cadenzas, for example), this is not desirable.
To turn off automatic calculation of bar lines and bar numbers,
use the command @code{\cadenzaOn}, and use @code{\cadenzaOff}
to turn them on again.

@lilypond[verbatim,relative=2,fragment]
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Bar numbering is resumed at the end of the cadenza as if the
cadenza were not there:

@lilypond[verbatim,relative=2,fragment]
% Show all bar numbers
\override Score.BarNumber #'break-visibility = #all-visible
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

@predefined

@code{\cadenzaOn},
@code{\cadenzaOff}.

@seealso

Music Glossary:
@rglos{cadenza}.

Notation Reference:
@c ref{Controlling visibility of objects}.

Snippets:
@rlsr{Rhythms}.

@knownissues

LilyPond will insert line breaks and page breaks only at a
bar line.  Unless the unmetered music ends before the end of the
staff line, you will need to insert invisible bar lines with

@example
\bar ""
@end example

@noindent
to indicate where breaks can occur.


@node Polymetric notation
@unnumberedsubsubsec Polymetric notation

@c This section necessarily uses \set
@c This is acceptable  -td

@cindex double time signatures
@cindex signatures, polymetric
@cindex polymetric signatures
@cindex meter, polymetric

Polymetric notation is supported, either explicitly or by modifying
the visible time signature symbol and scaling the note durations.

@strong{@i{Staves with different time signatures, equal measure lengths}}

This notation can be created by setting a common time signature
for each staff but replacing the symbol manually by setting
@code{timeSignatureFraction} to the desired fraction and scaling
the printed durations in each staff to the common time
signature; see @ref{Time signature}.  The scaling is done with
@code{\scaleDurations}, which is used in a similar way to
@code{\times}, but does not create a tuplet bracket; see
@ref{Scaling durations}.

In this example, music with the time signatures of 3/4, 9/8, and
10/8 are used in parallel.  In the second staff, shown durations
are multiplied by 2/3, as 2/3 * 9/8 = 3/4, and in the third
staff, shown durations are multiplied by 3/5, as 3/5 * 10/8 = 3/4.
It will often be necessary to insert beams manually, as the
duration scaling affects the autobeaming rules.

@lilypond[quote,verbatim,fragment]
\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c c c |
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(9 . 8)
    \scaleDurations #'(2 . 3)
    \repeat unfold 6 { c8[ c c] }
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = #'(10 . 8)
    \scaleDurations #'(3 . 5) {
      \repeat unfold 2 { c8[ c c] }
      \repeat unfold 2 { c8[ c] } |
      c4. c4. \times 2/3 { c8[ c c] } c4
    }
  }
>>
@end lilypond

@strong{@i{Staves with different time signatures, unequal bar lengths}}

Each staff can be given its own independent time signature by
moving the @code{Timing_translator} and the
@code{Default_bar_line_engraver} to the @code{Staff} context.

@lilypond[quote,verbatim]
\layout {
  \context {
    \Score
    \remove "Timing_translator"
    \remove "Default_bar_line_engraver"
  }
  \context {
    \Staff
    \consists "Timing_translator"
    \consists "Default_bar_line_engraver"
  }
}

% Now each staff has its own time signature.

\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c c c |
  }
  \new Staff {
    \time 2/4
    c4 c |
    c c |
    c c |
  }
  \new Staff {
    \time 3/8
    c4. |
    c8 c c |
    c4. |
    c8 c c |
  }
>>
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{compound-time-signatures.ly}


@seealso

Music Glossary:
@rglos{polymetric},
@rglos{polymetric time signature},
@rglos{meter}.

Notation Reference:
@ref{Time signature},
@ref{Scaling durations}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator},
@rinternals{Default_bar_line_engraver},
@rinternals{Staff}.

@knownissues

When using different time signatures in parallel, notes
at the same moment will be be placed at the same horizontal
location.  However, the bar lines in the different staves
will cause the note spacing to be less regular in each of the
individual staves than would be normal without the different
time signatures.

@node Automatic note splitting
@unnumberedsubsubsec Automatic note splitting

@cindex notes, splitting
@cindex splitting notes

Long notes which overrun bar lines can be converted automatically
to tied notes.  This is done by replacing the
@code{Note_heads_engraver} with the
@code{Completion_heads_engraver}.  In the following
example, notes crossing the bar lines are split and tied.

@lilypond[quote,verbatim,relative=1]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
}

{ c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 }
@end lilypond

This engraver splits all running notes at the bar line, and
inserts ties.  One of its uses is to debug complex scores: if the
measures are not entirely filled, then the ties show exactly how
much each measure is off.

@seealso

Music Glossary: @rglos{tie}

Learning Manual:
@rlearning{Engravers explained},
@rlearning{Adding and removing engravers}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Note_heads_engraver},
@rinternals{Completion_heads_engraver},
@rinternals{Forbid_line_break_engraver}.


@knownissues

Not all durations (especially those containing tuplets) can be
represented exactly with normal notes and dots, but the
@code{Completion_heads_engraver} will not insert tuplets.

The @code{Completion_heads_engraver} only affects notes; it does not
split rests.


@node Showing melody rhythms
@unnumberedsubsubsec Showing melody rhythms

Sometimes you might want to show only the rhythm of a melody.  This
can be done with the rhythmic staff.  All pitches of notes on such a
staff are squashed, and the staff itself has a single line

@lilypond[quote,relative=1,verbatim]
<<
  \new RhythmicStaff {
    \new Voice = "myRhythm" {
      \time 4/4
      c4 e8 f g2
      r4 g g f
      g1
    }
  }
  \new Lyrics {
    \lyricsto "myRhythm" {
      This is my song
      I like to sing
    }
  }
>>
@end lilypond

Guitar chord charts often show the strumming rhythms.  This can
be done with the @code{Pitch_squash_engraver} and
@code{\improvisationOn}.


@lilypond[quote,verbatim]
<<
  \new ChordNames {
    \chordmode {
      c1 f g c
    }
  }

  \new Voice \with {
    \consists Pitch_squash_engraver
  } \relative c'' {
    \improvisationOn
    c4 c8 c c4 c8 c
    f4 f8 f f4 f8 f
    g4 g8 g g4 g8 g
    c4 c8 c c4 c8 c
  }
>>
@end lilypond

@predefined
@code{\improvisationOn},
@code{\improvisationOff}.

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{guitar-strum-rhythms.ly}

@seealso

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{RhythmicStaff},
@rinternals{Pitch_squash_engraver}.

@node Beams
@subsection Beams

@menu
* Automatic beams::
* Setting automatic beam behavior::
* Manual beams::
* Feathered beams::
@end menu

@node Automatic beams
@unnumberedsubsubsec Automatic beams

By default, beams are inserted automatically:

@cindex beams, manual
@cindex manual beams

@lilypond[quote,verbatim,relative=2]
\time 2/4 c8 c c c
\time 6/8 c c c c8. c16 c8
@end lilypond

If these automatic decisions are not satisfactory, beaming can be
entered explicitly; see @ref{Manual beams}.  It is also possible
to define beaming patterns that differ from the defaults.  The
default beaming rules for most common time signatures are defined
in @file{scm/@/auto@/-beam@/.scm}.  If there are no beaming rules
defined for a particular beam's duration in the time signature being
used, its beaming is controlled by the values of three context
properties, @code{measureLength}, @code{beatLength} and
@code{beatGrouping}.  Both the beaming rules and the context
properties can be overridden, see @ref{Setting automatic beam behavior}.

@cindex autoBeamOn
@cindex autoBeamOff

@warning{If beams are used to indicate melismata in songs, then automatic
beaming should be switched off with @code{\autoBeamOff} and the beams
indicated manually.}


@noindent
Automatic beaming may be turned off and on with
@code{\autoBeamOff} and @code{\autoBeamOn} commands:

@lilypond[quote,relative=1,verbatim]
c4 c8 c8. c16 c8. c16 c8
\autoBeamOff
c4 c8 c8. c16 c8.
\autoBeamOn
c16 c8
@end lilypond

@predefined
@code{\autoBeamOff},
@code{\autoBeamOn}.

@snippets

@funindex breakable
@cindex break, line
@cindex line breaks

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beams-across-line-breaks.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{changing-beam-knee-gap.ly}

@seealso

Notation Reference:
@ref{Manual beams},
@ref{Setting automatic beam behavior}.

Installed Files:
@file{scm/@/auto@/-beam@/.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{Beam}.


@knownissues

Automatically kneed cross-staff beams cannot be used together with
hidden staves.  See @ref{Hiding staves}.

Beams can collide with note heads and accidentals in other voices


@node Setting automatic beam behavior
@unnumberedsubsubsec Setting automatic beam behavior

@funindex autoBeaming
@funindex autoBeamSettings
@funindex (end * * * *)
@funindex (begin * * * *)

@cindex automatic beams, tuning
@cindex tuning automatic beaming
@cindex automatic beam generation
@cindex autobeam
@cindex lyrics and beaming


The placement of automatic beams is determined by the rules
described in @ref{Automatic beams}.  There are two mutually
exclusive ways in which these rules may be modified.  The
first, modifying the grouping of beats, applies to uncommon time
signatures, i.e. those for which there are no predefined rules
defining the beam end points.  The second method, modifying the
specification of the beam end points, can be used for any time
signature.  This second method @strong{must} be used for those time
signatures and beam durations combinations for which beam ending
rules are pre-defined, unless these have all been reverted.  There
are predefined rules for time signatures of 3/2, 3/4, 4/4, 2/4,
4/8, 4/16, 6/8, 9/8 and 12/8.

@i{@strong{Modifying the grouping of beats}}

If there are no beam-ending rules defined for the beam duration of a
particular beam in the time signature in use, its beaming is
controlled by three context properties:
@code{measureLength}, @code{beatLength} and @code{beatGrouping}.
These properties may be set in the @code{Score}, @code{Staff} or
@code{Voice} contexts to delimit their scope.

These determine the beaming as follows:

Beams may begin anywhere (unless a beam is already active).  Beams
end at a time determined by the values of @code{beatGrouping} and
@code{beatLength}, as follows:

@itemize

@item If @code{beatGrouping} and @code{beatLength} are consistent
with @code{measureLength}, @code{beatGrouping} is used to determine
the end points of beams.

@item If @code{beatGrouping} and @code{beatLength} are inconsistent
with @code{measureLength}, @code{beatLength} is used to determine
the end points of beams.

@end itemize

@warning{These three properties become effective for a particular
beam @strong{only} if there are no beam-ending rules predefined for
that beam's duration in the time signature in use, or if these
beam-ending rules have all been reverted.}

By default the @code{measureLength} and @code{beatLength} are
derived from the time signature set by the @code{\time} command.
The @code{measureLength} is set to be exactly the same length as
the measure length given by the time signature, and the
@code{beatLength} is set to be the same as one over the denominator
of the time signature.

The default value of @code{beatGrouping} is taken from a table in
@file{scm/@/music@/-functions@/.scm}.  To find this, see
@rlearning{Other sources of information}.  It defines the beat
grouping for 5/8, 6/8, 8/8, 9/8 and 12/8 time signatures.

Both @code{measureLength} and @code{beatLength} are @i{moments},
units of musical duration.  A quantity of type @i{moment} is
created by the scheme function @code{ly:make-moment}.  For more
information about this function, see @ref{Time administration}.

@code{beatGrouping} is a list of integers giving the number of
beats in each group.

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{grouping-beats.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{specifying-context-with-beatgrouping.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{using-beatlength-and-beatgrouping.ly}

@funindex subdivideBeams

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{sub-dividing-beams.ly}

@cindex measure groupings
@cindex beats, grouping
@cindex grouping beats
@cindex measure sub-grouping

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{conducting-signs,-measure-grouping-signs.ly}


@strong{@i{Modifying the beam end points}}

In common time signatures, automatic beams can start on any note
but can end at only a few positions within the measure, namely at
durations specified by the properties in @code{autoBeamSettings}.
These properties consist of a list of rules defining where beams can
end.  The default @code{autoBeamSettings} rules are defined in
@file{scm/@/auto@/-beam@/.scm}.  To find this, see
@rlearning{Other sources of information}.

This method @strong{must} be used for the time signatures for which
beam-ending rules are defined by default, unless these have all
been reverted.  It is also particularly suitable for many other time
signatures if the time signature of the measures changes frequently,
or if the beaming should be different for different beam durations.

In order to add a rule to the list, use

@example
#(override-auto-beam-setting
  '(beam-limit
    beam-numerator  beam-denominator
    time-signature-numerator time-signature-denominator)
  moment-numerator moment-denominator [context])
@end example

@noindent
where

@itemize

@item @code{beam-limit} is the type of automatic beam limit
defined.  This can be either @code{begin} or @code{end} but
only @code{end} is effective.

@item @code{beam-numerator/beam-denominator} is the beam duration
to which the rule is to apply.  A beam is considered to have
the duration of its shortest note.  Set @code{beam-numerator}
and @code{beam-denominator} to @code{'*'} to have this rule apply
to beams of any duration.

@item @code{time-signature-numerator/time-signature-denominator}
specifies the time signature to which this rule should apply.
If @code{time-signature-numerator} and
@code{time-signature-denominator} are set to @code{'*'} this rule
will apply in any time signature.

@item @code{monent-numerator/moment-denominator} is the position
in the bar at which the beam should end.

@item @code{context} is optional, and it specifies the context at which
the change should be made.  The default is @code{'Voice}.

@code{#(score-override-auto-beam-setting '(A B C D) E F)} is equivalent to
@code{#(override-auto-beam-setting '(A B C D) E F 'Score)}.

@end itemize

For example, if automatic beams should always end on the first quarter
note, whatever the time signature or beam duration, use

@lilypond[quote,verbatim,relative=2]
a8 a a a a a a a
#(override-auto-beam-setting '(end * * * *) 1 4)
a8 a a a a a a a
@end lilypond

You can force the beam settings to take effect only on beams whose shortest
note is a certain duration

@lilypond[quote,verbatim,relative=2]
\time 2/4
% end 1/16 beams for all time signatures at the 1/16 moment
#(override-auto-beam-setting '(end 1 16 * *) 1 16)
a16 a a a a a a a |
a32 a a a a16 a a a a a |
% end 1/32 beams for all time signatures at the 1/16 moment
#(override-auto-beam-setting '(end 1 32 * *) 1 16)
a32 a a a a16 a a a a a |
@end lilypond

You can force the beam settings to take effect only in certain time
signatures

@lilypond[quote,verbatim,relative=2]
\time 5/8
% end beams of all durations in 5/8 time signature at the 2/8 moment
#(override-auto-beam-setting '(end * * 5 8) 2 8)
c8 c d d d
\time 4/4
e8 e f f e e d d
\time 5/8
c8 c d d d
@end lilypond

When multiple voices are used the @code{Staff} context must be
specified if the beaming is to be applied to all voices in the
staff:

@lilypond[quote,verbatim,relative=2]
\time 7/8
% rhythm 3-1-1-2
% Context not specified - does not work correctly
#(override-auto-beam-setting '(end * * 7 8) 3 8)
#(override-auto-beam-setting '(end * * 7 8) 4 8)
#(override-auto-beam-setting '(end * * 7 8) 5 8)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>

% Works correctly with context specified
#(override-auto-beam-setting '(end * * 7 8) 3 8 'Staff)
#(override-auto-beam-setting '(end * * 7 8) 4 8 'Staff)
#(override-auto-beam-setting '(end * * 7 8) 5 8 'Staff)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>
@end lilypond

@warning{If any unexpected beam behavior occurs, check the default
automatic beam settings in @file{scm/@/auto@/-beam@/.scm} for
possible interference, because the beam endings defined there will
still apply in addition to your own.}

Any unwanted or conflicting default endings must be reverted for
your time signature(s).  Existing auto-beam rules are removed by
using

@example
#(revert-auto-beam-setting
  '(beam-limit
    beam-numerator  beam-denominator
    time-signature-numerator time-signature-denominator)
  moment-numerator moment-denominator [context])
@end example

@noindent
@code{beam-limit}, @code{beam-numerator}, @code{beam-denominator},
@code{time-signature-numerator}, @code{time-signature-denominator},
@code{moment-numerator}, @code{moment-denominator} and @code{context}
are the same as above.

@lilypond[quote,verbatim,relative=2]
\time 4/4
a16 a a a a a a a a a a a a a a a
% undo a rule ending 1/16 beams in 4/4 time at 1/4 moment
#(revert-auto-beam-setting '(end 1 16 4 4) 1 4)
a16 a a a a a a a a a a a a a a a
@end lilypond

The rule in a @code{revert-auto-beam-setting} statement must exactly
match the original rule.  That is, no wildcard expansion is taken into
account.

@lilypond[quote,verbatim,relative=2]
\time 1/4
#(override-auto-beam-setting '(end 1 16 1 4) 1 8)
a16 a a a
#(revert-auto-beam-setting '(end 1 16 * *) 1 8) % this won't revert it!
a a a a
#(revert-auto-beam-setting '(end 1 16 1 4) 1 8) % this will
a a a a
@end lilypond

@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beam-grouping-in-7-8-time.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{reverting-default-beam-endings.ly}

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{beam-endings-in-score-context.ly}


@predefined

@funindex \autoBeamOff
@code{\autoBeamOff},
@funindex \autoBeamOn
@code{\autoBeamOn}.


@knownissues

If a score ends while an automatic beam has not been ended and is
still accepting notes, this last beam will not be typeset at all.
The same holds for polyphonic voices, entered with @code{<<
@dots{} \\ @dots{} >>}.  If a polyphonic voice ends while an
automatic beam is still accepting notes, it is not typeset.

@seealso

Snippets:
@rlsr{Rhythms}.


@node Manual beams
@unnumberedsubsubsec Manual beams

@cindex beams, manual
@funindex ]
@funindex [

In some cases it may be necessary to override the automatic
beaming algorithm.  For example, the autobeamer will not put beams
over rests or bar lines, and in choral scores the beaming is
often set to follow the meter of the lyrics rather than the
notes. Such beams can be specified manually by
marking the begin and end point with @code{[} and @code{]}

@lilypond[quote,relative=1,verbatim]
{
  r4 r8[ g' a r8] r8 g[ | a] r8
}
@end lilypond


Individual notes may be marked with @code{\noBeam} to prevent them
from being beamed:

@lilypond[quote,verbatim,relative=2]
\time 2/4 c8 c\noBeam c c
@end lilypond

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Even more strict manual control with the beams can be achieved by
setting the properties @code{stemLeftBeamCount} and
@code{stemRightBeamCount}.  They specify the number of beams to
draw on the left and right side, respectively, of the next note.
If either property is set, its value will be used only once, and
then it is erased.  In this example, the last @code{f} is printed
with only one beam on the left side, i.e., the eighth-note beam of
the group as a whole.

@lilypond[quote,relative=2,verbatim]
a8[ r16 f g a]
a8[ r16
\set stemLeftBeamCount = #2
\set stemRightBeamCount = #1
f
\set stemLeftBeamCount = #1
g a]
@end lilypond


@snippets

@lilypondfile[verbatim,lilyquote,ragged-right,texidoc,doctitle]
{flat-flags-and-beam-nibs.ly}

@node Feathered beams
@unnumberedsubsubsec Feathered beams

@cindex beams, feathered
@funindex \featherDurations

Feathered beams are used to indicate that a small group of notes
should be played at an increasing (or decreasing) tempo, without
changing the overall tempo of the piece.  The extent of the
feathered beam must be indicated manually using @code{[} and
@code{]}, and the beam feathering is turned on by specifying a
direction to the @code{Beam} property @code{grow-direction}.

If the placement of the notes and the sound in the MIDI output
is to reflect the ritardando or accelerando indicated by the
feathered beam the notes must be grouped as a
music expression delimited by braces and preceded by a
@code{featheredDurations} command which specifies the ratio
between the durations of the first and last notes in the group.

The square brackets
show the extent of the beam and the braces show
which notes are to have their durations modified.  Normally
these would delimit the same group of notes, but this is not
required: the two commands are independent.

In the following example the eight 16th notes occupy exactly the
same time as a half note, but the first note is one half as long
as the last one, with the intermediate notes gradually
lengthening.  The first four 32nd notes gradually speed up, while
the last four 32nd notes are at a constant tempo.

@lilypond[relative=1,verbatim,quote]
\override Beam #'grow-direction = #LEFT
\featherDurations #(ly:make-moment 2 1)
{ c16[ c c c c c c c] }
\override Beam #'grow-direction = #RIGHT
\featherDurations #(ly:make-moment 2 3)
{ c32[ d e f] }
% revert to non-feathered beams
\override Beam #'grow-direction = #'()
{ g32[ a b c] }
@end lilypond

@noindent
The spacing in the printed output represents the
note durations only approximately, but the MIDI output is exact.

@knownissues

The @code{\featherDurations} command only works with very short
music snippets, and when numbers in the fraction are small.

@seealso

Snippets:
@rlsr{Rhythms}.



@node Bars
@subsection Bars


@menu
* Bar lines::
* Bar numbers::
* Bar and bar number checks::
* Rehearsal marks::
@end menu

@node Bar lines
@unnumberedsubsubsec Bar lines

@cindex bar lines
@funindex \bar
@cindex measure lines
@cindex repeat bars

Bar lines delimit measures, and are also used to indicate
repeats.  Normally, simple bar lines are automatically inserted
into the printed output at places based on the current time
signature.

The simple bar lines inserted automatically can be changed to
other types with the @code{\bar} command.  For example, a closing
double bar line is usually placed at the end of a piece:

@lilypond[quote,relative=1,verbatim]
e4 d c2 \bar "|."
@end lilypond

It is not invalid if the final note in a measure does not
end on the automatically entered bar line: the note is assumed
to carry over into the next measure.  But if a long sequence
of such carry-over measures appears the music can appear compressed
or even flowing off the page.  This is because automatic line
breaks happen only at the end of complete measures, i.e., where
all notes end before the end of a measure.

@warning{An incorrect duration can cause line breaks to be
inhibited, leading to a line of highly compressed music or
music which flows off the page.}

@cindex line breaks
@cindex bar lines, invisible
@cindex measure lines, invisible

Line breaks are also permitted at manually inserted bar lines
even within incomplete measures.  To allow a line break without
printing a bar line, use

@example
\bar ""
@end example

@noindent
This will insert an invisible bar line and allow (but not
force) a line break to occur at this point.  The bar number
counter is not increased.  To force a line break see
@ref{Line breaking}.

This and other special bar lines may be inserted manually at any
point.  When they coincide with the end of a measure they replace
the simple bar line which would have been inserted there
automatically.  When they do not coincide
with the end of a measure the specified bar line is inserted at that
point in the printed output.  Such insertions do not affect
the calculation and placement of subsequent automatic bar lines.

The simple bar line and five types of double bar line are available
for manual insertion:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|" g \bar "||" a \bar ".|" b \bar ".|." c \bar "|.|" d \bar "|." e
@end lilypond

@noindent
together with dotted and dashed bar lines:

@lilypond[quote,relative=1,verbatim]
f1 \bar ":" g \bar "dashed" a
@end lilypond

@noindent
and five types of repeat bar line:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|:" g \bar ":|:" a \bar ":|.|:" b \bar ":|.:" c \bar ":|" d
@end lilypond

@cindex repeats

Although the bar line types signifying repeats may be inserted
manually they do not in themselves cause LilyPond to recognize
a repeated section.  Such repeated sections are better entered
using the various repeat commands (see @ref{Repeats}), which
automatically print the appropriate bar lines.

In addition, you can specify @code{"||:"}, which is equivalent to
@code{"|:"} except at line breaks, where it gives a double bar
line at the end of the line and a start repeat at the beginning of
the next line.

@lilypond[quote,relative=2,verbatim]
\override Score.RehearsalMark #'padding = #3
c c c c
\bar "||:"
c c c c \break
\bar "||:"
c c c c
@end lilypond

In scores with many staves, a @code{\bar} command in one staff is
automatically applied to all staves.  The resulting bar lines are
connected between different staves of a @code{StaffGroup},
@code{PianoStaff}, or @code{GrandStaff}.

@lilypond[quote,fragment,verbatim]
<<
  \new StaffGroup <<
    \new Staff {
      e'4 d'
      \bar "||"
      f' e'
    }
    \new Staff { \clef bass c4 g e g }
  >>
  \new Staff { \clef bass c2 c2 }
>>
@end lilypond


@snippets

@funindex whichBar
@funindex defaultBarType

The command @code{\bar }@var{bartype} is a shortcut for
@code{\set Timing.whichBar = }@var{bartype}.  A bar line is
created whenever the @code{whichBar} property is
set.

The default bar type used for automatically inserted bar lines is
@code{"|"}.  This may be changed at any time
with @code{\set Timing.defaultBarType = }@var{bartype}.

@seealso

Notation Reference:
@ref{Line breaking},
@ref{Repeats},
@ref{Grouping staves}.

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{BarLine} (created at
@rinternals{Staff} level), @rinternals{SpanBar} (across
staves), @rinternals{Timing_translator} (for Timing
properties).


@node Bar numbers
@unnumberedsubsubsec Bar numbers

@cindex bar numbers
@cindex measure numbers
@funindex currentBarNumber

Bar numbers are typeset by default at the start of every line except
the first line.  The number itself is stored in the
@code{currentBarNumber} property, which is normally updated
automatically for every measure.  It may also be set manually:

@lilypond[verbatim,quote,fragment,relative=1]
c1 c c c
\break
\set Score.currentBarNumber = #50
c1 c c c
@end lilypond


@snippets

@funindex barNumberVisibility
@cindex bar numbers, regular spacing

Bar numbers can be typeset at regular intervals instead of just at
the beginning of every line.  To do this the default behavior
must be overridden to permit bar numbers to be printed at places
other than the start of a line.  This is controlled by the
@code{break-visibility} property of @code{BarNumber}.  This takes
three values which may be set to @code{#t} or @code{#f} to specify
whether the corresponding bar number is visible or not.  The order
of the three values is @code{end of line visible}, @code{middle of
line visible}, @code{beginning of line visible}.  In the following
example bar numbers are printed at all possible places:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber #'break-visibility = #'#(#t #t #t)
\set Score.currentBarNumber = #11
\bar ""  % Permit first bar number to be printed
c1 c c c
\break
c c c c
@end lilypond

@c  All the rest of these examples will be added to LSR
@c  and moved into the Snippets.  -gp

@noindent
and here the bar numbers are printed every two measures
except at the end of the line:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber #'break-visibility = #'#(#f #t #t)
\set Score.currentBarNumber = #11
\bar ""  % Permit first bar number to be printed
% Print a bar number every second measure
\set Score.barNumberVisibility = #(every-nth-bar-number-visible 2)
c1 c c c c
\break
c c c c c
@end lilypond

@cindex measure number, format
@cindex bar number, format

The size of the bar number may be changed.  This is illustrated
in the following example, which also shows how to enclose bar
numbers in boxes and circles, and shows an alternative way
of specifying @code{#(#f #t #t)} for @code{break-visibility}.

@lilypond[verbatim,quote,relative=1]
% Prevent bar numbers at the end of a line and permit them elsewhere
\override Score.BarNumber #'break-visibility
  = #end-of-line-invisible

% Increase the size of the bar number by 2
\override Score.BarNumber #'font-size = #2
\repeat unfold 3 { c1 } \bar "|"

% Draw a box round the following bar number(s)
\override Score.BarNumber  #'stencil
  = #(make-stencil-boxer 0.1 0.25 ly:text-interface::print)
\repeat unfold 3 { c1 } \bar "|"

% Draw a circle round the following bar number(s)
\override Score.BarNumber  #'stencil
  = #(make-stencil-circler 0.1 0.25 ly:text-interface::print)
\repeat unfold 4 { c1 } \bar "|."
@end lilypond

@cindex bar number alignment

Bar numbers by default are left-aligned to their parent object.
This is usually the left edge of a line or, if numbers are printed
within a line, the left bar line of the measure.  The numbers may also
be positioned directly on the bar line or right-aligned to the
bar line:

@lilypond[verbatim,quote,relative=1]
\set Score.currentBarNumber = #111
\override Score.BarNumber #'break-visibility = #'#(#t #t #t)
% Increase the size of the bar number by 2
\override Score.BarNumber #'font-size = #2
% Print a bar number every second measure
\set Score.barNumberVisibility = #(every-nth-bar-number-visible 2)
c1 c1
% Center-align bar numbers
\override Score.BarNumber #'self-alignment-X = #0
c1 c1
% Right-align bar numbers
\override Score.BarNumber #'self-alignment-X = #-1
c1 c1
@end lilypond

Bar numbers can be removed entirely by removing the
@code{Bar_number_engraver} from the @code{Score} context.

@lilypond[verbatim,quote]
\layout {
  \context {
    \Score
    \remove "Bar_number_engraver"
  }
}
\relative c''{
  c4 c c c \break
  c4 c c c
}
@end lilypond


@seealso

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{BarNumber}.


@knownissues

Bar numbers may collide with the top of the
@rinternals{StaffGroup} bracket, if there is one.  To solve
this, the @code{padding} property of @rinternals{BarNumber} can
be used to position the number correctly.

Bar numbers may only be printed at bar lines; to print a bar
number at the beginning of a piece, an empty bar line must be
inserted there, and a value other than @code{1} must be placed
in @code{currentBarNumber}:

@lilypond[verbatim,quote,relative=1]
\set Score.currentBarNumber = #50
\bar ""
c1 c c c
c1 c c c
\break
@end lilypond



@node Bar and bar number checks
@unnumberedsubsubsec Bar and bar number checks

@cindex bar check
@funindex barCheckSynchronize
@funindex |

Bar checks help detect errors in the entered durations.
A bar check may be entered using the bar symbol, @code{|},
at any place where a bar line is expected to fall.
If bar check lines are encountered at other places,
a list of warnings is printed in the log file,
showing the line numbers and lines
in which the bar checks failed.  In the next
example, the second bar check will signal an error.

@example
\time 3/4 c2 e4 | g2 |
@end example

Bar checks can also be used in lyrics, for example

@example
\lyricmode @{
  \time 2/4
  Twin -- kle | Twin -- kle |
@}
@end example

An incorrect duration can result in a completely garbled score,
especially if the score is polyphonic, so a good place to start
correcting input is by scanning for failed bar checks and
incorrect durations.

If successive bar checks are off by the same musical interval,
only the first warning message is displayed.  This allows the
warning to focus on the source of the timing error.


@funindex |
@funindex pipeSymbol

It is also possible to redefine the action taken when a bar check
or pipe symbol, @code{|}, is encountered in the input, so that
it does something other than a bar check.  This is done by
assigning a music expression to @code{pipeSymbol}.
In the following example @code{|} is set to insert a double bar
line wherever it appears in the input, rather than checking
for end of bar.

@lilypond[quote,verbatim]
pipeSymbol = \bar "||"
{
  c'2 c'2 |
  c'2 c'2
  c'2 | c'2
  c'2 c'2
}
@end lilypond

When copying large pieces of music, it can be helpful to check
that the LilyPond bar number corresponds to the original that you
are entering from.  This can be checked with
@code{\barNumberCheck}, for example,

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
will print a warning if the @code{currentBarNumber} is not 123
when it is processed.

@seealso

Snippets:
@rlsr{Rhythms}.


@node Rehearsal marks
@unnumberedsubsubsec Rehearsal marks

@cindex rehearsal marks
@cindex mark, rehearsal
@funindex \mark

To print a rehearsal mark, use the @code{\mark} command

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
The letter@tie{}@q{I} is skipped in accordance with engraving
traditions.  If you wish to include the letter @q{I}, then use

@example
\set Score.markFormatter = #format-mark-alphabet
@end example

The mark is incremented automatically if you use @code{\mark
\default}, but you can also use an integer argument to set the
mark manually.  The value to use is stored in the property
@code{rehearsalMark}.

@cindex rehearsal mark format
@cindex rehearsal mark style
@cindex style, rehearsal mark
@cindex format, rehearsal mark
@cindex mark, rehearsal, style
@cindex mark, rehearsal, format

The style is defined by the property @code{markFormatter}.  It is
a function taking the current mark (an integer) and the current
context as argument.  It should return a markup object.  In the
following example, @code{markFormatter} is set to a pre-defined
procedure.  After a few measures, it is set to a procedure that
produces a boxed number.

@lilypond[quote,verbatim,relative=2]
\set Score.markFormatter = #format-mark-numbers
c1 \mark \default
c1 \mark \default
\set Score.markFormatter = #format-mark-box-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-letters
c1
@end lilypond

The file @file{scm/@/translation@/-functions@/.scm} contains the
definitions of @code{format-mark-numbers} (the default format),
@code{format-mark-box-numbers}, @code{format-mark-letters} and
@code{format-mark-box-letters}.  These can be used as inspiration
for other formatting functions.

You may use @code{format-mark-barnumbers},
@code{format-mark-box-barnumbers}, and
@code{format-mark-circle-barnumbers} to get bar numbers instead of
incremented numbers or letters.

Other styles of rehearsal mark can be specified manually

@example
\mark "A1"
@end example

@noindent
@code{Score.markFormatter} does not affect marks specified in this
manner.  However, it is possible to apply a @code{\markup} to the
string.

@example
\mark \markup@{ \box A1 @}
@end example

@cindex segno
@cindex coda
@cindex D.S al Fine

Music glyphs (such as the segno sign) may be printed inside a
@code{\mark}

@lilypond[quote,verbatim,relative=1]
c1 \mark \markup { \musicglyph #"scripts.segno" }
c1 \mark \markup { \musicglyph #"scripts.coda" }
c1 \mark \markup { \musicglyph #"scripts.ufermata" }
c1
@end lilypond

@noindent
See @ref{The Feta font}, for a list of symbols which may be
printed with @code{\musicglyph}.

For common tweaks to the positioning of rehearsal marks, see
@ref{Formatting text}.

@seealso

Notation Reference:
@ref{The Feta font},
@ref{Formatting text}.

Installed Files:
@file{scm/@/translation@/-functions@/.scm} contains
the definition of @code{format-mark-numbers} and
@code{format-mark-letters}.  They can be used as inspiration for
other formatting functions.

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{RehearsalMark}.

@node Special rhythmic concerns
@subsection Special rhythmic concerns


@menu
* Grace notes::
* Aligning to cadenzas::
* Time administration::
@end menu

@node Grace notes
@unnumberedsubsubsec Grace notes

@funindex \grace
@cindex ornaments
@cindex grace notes
@cindex appoggiatura
@cindex acciaccatura

Grace notes are ornaments that are written out. Grace notes
are printed in a smaller font and take up no logical time
in a measure.

@lilypond[quote,relative=2,verbatim]
c4 \grace c16 c4
\grace { c16[ d16] } c2
@end lilypond

Lilypond also supports two special types of grace notes, the
@emph{acciaccatura}--an unmeasured grace note indicated by a slurred
small note with a slashed stem--and the @emph{appoggiatura}, which
takes a fixed fraction of the main note and appears in small print
without a slash.

@lilypond[quote,relative=2,verbatim]
\grace c8 b4
\acciaccatura d8 c4
\appoggiatura e8 d4
\acciaccatura { g16[ f] } e4
@end lilypond

The placement of grace notes is synchronized between different
staves.  In the following example, there are two sixteenth grace
notes for every eighth grace note

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e2 \grace { c16[ d e f] } e2 }
   \new Staff { c2 \grace { g8[ b] } c2 } >>
@end lilypond

@funindex \afterGrace

@cindex grace notes, following

If you want to end a note with a grace, use the @code{\afterGrace}
command.  It takes two arguments: the main note, and the grace
notes following the main note.

@lilypond[quote,verbatim,relative=2]
c1 \afterGrace d1 { c16[ d] } c1
@end lilypond

This will put the grace notes after a space lasting 3/4 of the
length of the main note.  The default fraction 3/4 can be changed by
setting @code{afterGraceFraction}.  The following example shows
the results from setting the space at the default,  at 15/16, and
finally at 1/2 of the main note.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 15 16))
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 1 2))
    c1 \afterGrace d1 { c16[ d] } c1
  }
>>
@end lilypond

The space between the main note and the grace note may also be
specified using spacers. The following example places the grace
note after a space lasting 7/8 of the main note.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  << { d1^\trill_( }
     { s2 s4. \grace { c16[ d] } } >>
  c1)
}
@end lilypond

A @code{\grace} music expression will introduce special
typesetting settings, for example, to produce smaller type, and
set directions.  Hence, when introducing layout tweaks to
override the special settings, they should be placed inside
the grace expression. The overrides should also be reverted
inside the grace expression. Here, the grace note's default stem
direction is overriden and then reverted.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  \acciaccatura {
    \stemDown
    f16->
    \stemNeutral
  }
  g4 e c2
}
@end lilypond


@cindex stem, with slash


@snippets

The slash through the stem found in @emph{acciaccatura}s can be applied
in other situations:

@lilypond[quote,verbatim,relative=2]
\relative c'' {
  \override Stem #'stroke-style = #"grace"
  c8( d2) e8( f4)
}
@end lilypond

The layout of grace expressions can be changed throughout the
music using the function @code{add-grace-property}.  The following
example undefines the @code{Stem} direction for this grace, so
that stems do not always point up.

@lilypond[quote,verbatim,relative=2]
\relative c'' {
  \new Staff {
    #(add-grace-property 'Voice 'Stem 'direction ly:stem::calc-direction)
    #(remove-grace-property 'Voice 'Stem 'direction)
    \new Voice {
       \acciaccatura { f16 } g4
       \grace { d16[ e] } f4
       \appoggiatura { a,32[ b c d] } e2
    }
  }
}
@end lilypond

Another option is to change the variables @code{startGraceMusic},
@code{stopGraceMusic}, @code{startAcciaccaturaMusic},
@code{stopAcciaccaturaMusic}, @code{startAppoggiaturaMusic},
@code{stopAppoggiaturaMusic}.  The default values of these can be
seen in the file @code{ly/@/grace@/-init@/.ly}.  By redefining
them other effects may be obtained.

Grace notes may be forced to align with regular notes
in other staves:

@lilypond[verbatim,quote]
\relative c'' {
  <<
    \override Score.SpacingSpanner #'strict-grace-spacing = ##t
    \new Staff {
      c4
      \afterGrace c4 { c16[ c8 c16] }
      c4 r
    }
    \new Staff {
      c16 c c c c c c c c4 r
    }
  >>
}
@end lilypond


@seealso

Music Glossary:
@rglos{grace notes},
@rglos{acciaccatura},
@rglos{appoggiatura}.

Installed Files: @file{ly/@/grace@/-init@/.ly}.

Snippets: @rlsr{Rhythms}.

Internals Reference: @rinternals{GraceMusic}.


@knownissues

A multi-note beamed @i{acciaccatura} is printed without a slash,
and looks exactly the same as a multi-note beamed
@i{appoggiatura}.

@c TODO Add link to LSR snippet to add slash when available

Grace note synchronization can also lead to surprises.  Staff
notation, such as key signatures, bar lines, etc., are also
synchronized.  Take care when you mix staves with grace notes and
staves without, for example,

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e4 \bar "|:" \grace c16 d2. }
   \new Staff { c4 \bar "|:" d2. } >>
@end lilypond

@noindent
This can be remedied by inserting grace skips of the corresponding
durations in the other staves.  For the above example

@lilypond[quote,relative=2,verbatim]
<< \new Staff { e4 \bar "|:" \grace c16 d2. }
   \new Staff { c4 \bar "|:" \grace s16 d2. } >>
@end lilypond

Grace sections should only be used within sequential music
expressions.  Nesting or juxtaposing grace sections is not
supported, and might produce crashes or other errors.

@node Aligning to cadenzas
@unnumberedsubsubsec Aligning to cadenzas

@cindex cadenza
@cindex cadenza, aligning to
@cindex aligning to cadenza

In an orchestral context, cadenzas present a special problem: when
constructing a score that includes a measured cadenza or other solo
passage, all other instruments should skip just as many notes as the
length of the cadenza, otherwise they will start too soon or too late.

One solution to this problem is to use the functions
@code{mmrest-of-length} and @code{skip-of-length}.  These Scheme
functions take a defined piece of music as an argument and generate a
multi-measure rest or @code{\skip} exactly as long as the piece.

@lilypond[verbatim,quote]
MyCadenza = \relative c' {
  c4 d8 e f g g4
  f2 g4 g
}

\new GrandStaff <<
  \new Staff {
    \MyCadenza c'1
    \MyCadenza c'1
  }
  \new Staff {
    #(ly:export (mmrest-of-length MyCadenza))
    c'1
    #(ly:export (skip-of-length MyCadenza))
    c'1
  }
>>
@end lilypond

@seealso

Music Glossary:
@rglos{cadenza}.

Snippets:
@rlsr{Rhythms}.


@node Time administration
@unnumberedsubsubsec Time administration

@cindex time administration
@cindex timing (within the score)
@cindex music, unmetered
@cindex unmetered music

@funindex currentBarNumber
@funindex measurePosition
@funindex measureLength

Time is administered by the @code{Timing_translator}, which by
default is to be found in the @code{Score} context.  An alias,
@code{Timing}, is added to the context in which the
@code{Timing_translator} is placed.

The following properties of @code{Timing} are used
to keep track of timing within the score.

@cindex bar number
@cindex measure number

@table @code
@item currentBarNumber
The current measure number.  For an example showing the
use of this property see @ref{Bar numbers}.

@item measureLength
The length of the measures in the current time signature.  For a
4/4 time this is@tie{}1, and for 6/8 it is 3/4.  Its value
determines when bar lines are inserted and how automatic beams
should be generated.

@item measurePosition
The point within the measure where we currently are.  This
quantity is reset by subtracting @code{measureLength} whenever
@code{measureLength} is reached or exceeded.  When that happens,
@code{currentBarNumber} is incremented.

@item timing
If set to true, the above variables are updated for every time
step.  When set to false, the engraver stays in the current
measure indefinitely.

@end table

Timing can be changed by setting any of these variables
explicitly.  In the next example, the default 4/4 time
signature is printed, but @code{measureLength} is set to 5/4.
At 4/8 through the third measure, the @code{measurePosition} is
advanced by 1/8 to 5/8, shortening that bar by 1/8.
The next bar line then falls at 9/8 rather than 5/4.

@lilypond[quote,verbatim,relative=1]
\set Score.measureLength = #(ly:make-moment 5 4)
c1 c4
c1 c4
c4 c4
\set Score.measurePosition = #(ly:make-moment 5 8)
b4 b4 b8
c4 c1
@end lilypond

@noindent
As the example illustrates, @code{ly:make-moment n m} constructs a
duration of n/m of a whole note.  For example,
@code{ly:make-moment 1 8} is an eighth note duration and
@code{ly:make-moment 7 16} is the duration of seven sixteenths
notes.


@seealso

This manual: @ref{Bar numbers}, @ref{Unmetered music}

Snippets:
@rlsr{Rhythms}.

Internals Reference: @rinternals{Timing_translator},
@rinternals{Score}

