@c -*- coding: utf-8; mode: texinfo; documentlanguage: ja -*-

@ignore
    Translation of GIT committish: 499a511d4166feaada31114e097f86b5e0c56421

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.12.0"

@c Translators: Yoshiki Sawada
@c Translation status: post-GDP


@node セットアップ
@chapter セットアップ
@translationof Setup

この章では、インストール後に行う LilyPond と他の様々なプログラムのための様々な@c
コンフィグレーション オプションについて議論します。この章はリファレンスと見な@c
して差し支えないかもしれません: あなたに関係のある節だけを読んでください。

@menu
* 特定の OS のためのセットアップ::
* テキスト エディタのサポート::
* ポイント＆クリック::
@end menu

@node 特定の OS のためのセットアップ
@section 特定の OS のためのセットアップ
@translationof Setup for specific Operating Systems

この節では、特定の OS のために必要とされる追加のセットアップを実行する方法につ@c
いて説明します。

@menu
* MacOS X のためのセットアップ::
@end menu


@node MacOS X のためのセットアップ
@subsection MacOS X のためのセットアップ
@translationof Setup for MacOS X

@subsubheading MaxOS 10.3 または 10.4 で Python スクリプトを使用する

MacOS X 用の LilyPond バイナリは Python を提供しませんが、@command{convert-ly} 
には Python 2.4 以降が必要です。そのため、あなたが MacOS 10.3 または 10.4 を@c
使っているのなら、あなたは @uref{http://python.org/download/} から新しいバー@c
ジョンの Python をインストールして、@command{convert-ly} と 
@command{lilypond-book} の最初の行を以下のように編集する必要があります: あなた@c
が新たにインストールした Python バイナリがあなたの @var{PATH} の中にある場合、@c
最初の行を

@example
#!/usr/bin/env python
@end example

@noindent
のように変更し、そうでない場合は、

@example
#!@var{/path/to/newly_installed/python}
@end example

と変更します。


@subsubheading MaxOS X のコマンド ライン

MacOS@tie{}Xではスクリプト --- @command{lilypond-book}, @command{convert-ly},
@command{abc2ly}, あるいは @command{lilypond} 自体のような --- は @code{.app} 
ファイルの中に含まれています。それらは、それらをコマンド ラインから直接呼び出@c
すことによって実行できます。例えば以下のようにです:

@example
@var{path/to}/LilyPond.app/Contents/Resources/bin/lilypond
@end example

@noindent

@command{lilypond-book}, @command{convert-ly}, @command{abc2ly} などを含むその@c
ディレクトリ (訳者: ファイルでは？) の中にある他のスクリプトについても同様です。

他の方法としては、自動的にパスを追加するスクリプトを作成する方法があります。そ@c
のようなスクリプトを保存するためのディレクトリを作成してください:

@example
mkdir -p ~/bin
cd ~/bin
@end example

@code{lilypond} という名前のファイルを作成し、以下を記述してください:

@example
exec @var{path/to}/LilyPond.app/Contents/Resources/bin/lilypond "$@@"
@end example

@code{lilypond-book}, @code{convert-ly}, あなたが使用する他の補助プログラム 
(@code{abc2ly}, @code{midi2ly} など) についても同様にしてください。上記のファ@c
イルの中でただ @code{bin/lilypond} を @code{bin/convert-ly} (あるいは他のプロ@c
グラム名) に置き換えるだけです。

ファイルを実行可能形式にします:

@example
chmod u+x lilypond
@end example

さらに、このディレクトリをあなたのパスに追加します。あなたのホーム ディレクト@c
リの中にある @code{.profile} というファイルを変更 (あるいは作成) して以下の記@c
述を含めます:

@example
export PATH=$PATH:~/bin
@end example

@noindent
このファイルは空行で終わっている必要があります。

@var{path/to} は一般に @code{/Applications/} であるということに注意してくださ@c
い。


@node テキスト エディタのサポート
@section テキスト エディタのサポート
@translationof Text editor support

@cindex editors
@cindex vim
@cindex emacs
@cindex modes, editor
@cindex syntax coloring
@cindex coloring, syntax

LilyPond をサポートするテキスト エディタがいくつかあります。

@menu
* Emacs モード::
* Vim モード::
* jEdit::
* TexShop::
* TextMate::
* LilyKDE::
@end menu

@node Emacs モード
@subsection Emacs モード
@translationof Emacs mode

Emacs は @file{lilypond-mode} を持ちます。これはキーワード自動補完、インデント@c
付け、LilyPond 特有の括弧マッチング、構文のカラーリング、便利なコンパイル 
ショートカット、Info を使った LilyPond マニュアルの閲覧を提供します。あなたの@c
プラットフォームに @file{lilypond-mode} がインストールされていない場合は、以下@c
を読んでください。

音楽を入力して LilyPond を実行するための Emacs モードは @file{elisp} ディレク@c
トリの中にあるソース アーカイブの中に保持されています。それを @var{elispdir} 
にインストールするには @command{make install} を実行します。@c
@file{lilypond-init.el} は @var{load-path}@file{/site-start.d/} に置くか、@c
@file{~/.emacs} または @file{~/.emacs.el} に付加すべきです。

1 ユーザとして、あなたは以下の行を @file{~/.emacs} に付加する (あるいは変更する) 
ことによってあなたのソース パス (例えば @file{~/site-lisp/}) をあなたの 
@var{load-path} に付け加えたいと思うかもしれません:

@c any reason we do not advise:  (push "~/site-lisp" load-path)
@example
(setq load-path (append (list (expand-file-name "~/site-lisp")) load-path))
@end example


@node Vim モード
@subsection Vim モード
@translationof Vim mode

@uref{http://@/www@/.vim@/.org,VIM} から @file{vimrc} と構文カラーリング ツー@c
ルが入手できます。音楽を入力して LilyPond を実行するための Vim モードは 
@code{$VIM} ディレクトリの中にあるソース アーカイブの中に保持されています。

ファイル @file{~/.vim/filetype.vim} が以下の内容を保持している場合、LilyPond 
ファイル タイプは検出されます:

@example
if exists("did_load_filetypes")
  finish
endif
augroup filetypedetect
  au! BufNewFile,BufRead *.ly           setf lilypond
augroup END
@end example

以下の行を @file{~/.vimrc} 付加することによってパスをインクルードしてください。

@example
set runtimepath+=/usr/local/share/lilypond/$@{LILYPOND_VERSION@}/vim/
@end example

@noindent
ここで、@code{$@{LILYPOND_VERSION@}} はあなたが使用している LilyPond のバー@c
ジョンです。LilyPond が @file{/usr/local/} にインストールされていない場合は、@c
パスを適切に書き換えてください。


@node jEdit
@subsection jEdit
@translationof jEdit

LilyPondTool は、LilyPond ソースを編集するために 
@uref{http://@/www@/.jedit@/.org@/,jEdit} テキスト エディタのためのプラグイン@c
として作成された最も機能豊富なテキスト ベース ツールです。その機能にはドキュ@c
メントをより容易にセット アップするための歌詞サポートを持つドキュメント ウィ@c
ザードと、高度なポイント＆クリックをサポートする PDF ビューアが含まれます。ス@c
クリーンショット、デモ、インストール手順については、@c
@uref{http://lilypondtool@/.organum@/.hu} を参照してください


@node TexShop
@subsection TexShop
@translationof TexShop

MaxOS@tie{}X 用の @uref{http://@/www@/.uoregon@/.edu/~koch/texshop/index@/.html,
TexShop} エディタは、
@uref{http://@/www@/.dimi@/.uniud@/.it/vitacolo/freesoftware@/.html} で入手可@c
能な拡張を使うことで、エディタから LilyPond, lilypond-book,
convert-ly を実行できるように拡張することが可能です。


@node TextMate
@subsection TextMate
@translationof TextMate

TextMate 用の LilyPond バンドルがあります。以下を実行することでインストールで@c
きるでしょう:

@example
mkdir -p /Library/Application\ Support/TextMate/Bundles
cd /Library/Application\ Support/TextMate/Bundles
svn co http://macromates.com/svn/Bundles/trunk/Bundles/Lilypond.tmbundle/
@end example


@node LilyKDE
@subsection LilyKDE
@translationof LilyKDE

@uref{http://lilykde.googlecode.com/,LilyKDE} は KDE のテキスト エディタ 
@uref{http://kate-editor.org/,Kate} 用のプラグインです。これは素早く LilyPond 
ドキュメントをセットアップするためのパワフルな楽譜ウィザードと PDF ビューアを@c
持ちます。

LilyKDE は @uref{http://www.volny.cz/smilauer/rumor/,Rumor} を使うことができる@c
ため、MIDI キーボードで演奏することで音楽を入力することができます。

他の機能として、歌詞のハイフン付けする機能や KDE ファイル マネージャから複数の@c
ファイルを含めて LilyPond を実行する機能があります。


@node ポイント＆クリック
@section ポイント＆クリック
@translationof Point and click
@cindex point and click


ポイント＆クリックは PDF ビューアの中で表記をクリックすることで入力表記を見つ@c
け出すことを可能にします。これは楽譜の中でエラーを引き起こす入力をより容易に見@c
つけ出すことを可能にします。

この機能がアクティブな場合、LilyPond は PDF ファイルにハイパーリンクを付け加え@c
ます。これらのハイパーリンクは Web ブラウザに送られ、Web ブラウザはカーソルを@c
持つテキスト エディタを適切な位置に開きます。

この一連の動作を有効にするには、PDF ビューアが LilyPond で提供される 
@file{lilypond-invoke-editor} スクリプトを使ってハイパーリンクを追うようにコン@c
フィグレーションする必要があります。

UNIX の Xpdf では、@file{xpdfrc}@footnote{UNIXでは、このファイルは 
@file{/etc/xpdfrc} かホーム ディレクトリの中の @file{.xpdfrc} としてのどちらか@c
です。} の中に以下の記述が必要です:
 
@example
urlCommand     "lilypond-invoke-editor %s"
@end example

プログラム @file{lilypond-invoke-editor} は小さな援助プログラムです。これは特@c
別な @code{textedit} URI に対してエディタを呼び出します。このプログラムは環境@c
変数 @code{EDITOR} を以下のパターンに従ってテストします:

@table @code
@item emacs
  このプログラムは以下を呼び出します
@example
emacsclient --no-wait +@var{line}:@var{column} @var{file}
@end example
@item vim
  このプログラムは以下を呼び出します
@example
gvim --remote +:@var{line}:norm@var{char} @var{file}
@end example

@item nedit
  このプログラムは以下を呼び出します
@example
  nc -noask +@var{line} @var{file}'
@end example
@end table

環境変数 @code{LYEDITOR} はこれをオーバライドするために使用されます。これには@c
エディタを起動するためのコマンド ラインを含み、
@code{%(file)s}, 
@code{%(column)s}, @code{%(line)s} 
@ignore

@end ignore
はそれぞれ、ファイル、列、行で置換されます。@code{LYEDITOR} に対する設定

@example
emacsclient --no-wait +%(line)s:%(column)s %(file)s
@end example

@noindent
は標準の emacsclient 呼び出しと等価です。


@cindex file size, output

ポイント＆クリック リンクは出力ファイルをかなり大きなものにします。PDF ファイ@c
ルや PS ファイルのサイズを減らすために、@file{.ly} ファイルに以下の記述をする@c
ことでポイント＆クリックを OFF にするかもしれません:

@example
\pointAndClickOff
@end example

@noindent
ポイント＆クリックは以下の記述で明示的に ON になります:

@example
\pointAndClickOn
@end example

他の手段として、コマンド ライン オプションでポイント＆クリックを OFF にできます:

@example
lilypond -dno-point-and-click file.ly
@end example

@warning{あなたは配布する LilyPond ファイルでは常にポイント＆クリックを OFF に@c
すべきです。ポイント＆クリックを ON にすると .pdf ファイルの中にあなたのコン@c
ピュータのパス情報が含まれるため、セキュリティ リスクとなる可能性があります。}
