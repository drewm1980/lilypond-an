@c -*- coding: utf-8; mode: texinfo; documentlanguage: ja -*-

@ignore
    Translation of GIT committish: 499a511d4166feaada31114e097f86b5e0c56421

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.13.4"

@ignore
Tutorial guidelines:  (different from policy.txt!)
- unless you have a really good reason, use either
    @lilypond[verbatim,quote]
  or
    @lilypond[verbatim,quote,relative=2]

  Don't use any other relative=X commands.

- use "aes" and "ees" instead of "as" and "es".  I know it's not
  correct Dutch naming, but let's not confuse people with this
  until we get to the Basic notation chapter.

- Add "Music Glossary: @rglos{foo}" to the *top* of the relevant
  portions of the tutorial.

@end ignore


@c Translators: Yoshiki Sawada
@c Translation status: post-GDP


@node 導入部
@chapter 導入部
@translationof Introduction

この章は LilyPond に取り組むための基本的な入門書です。

@menu
* ファイルをコンパイルする::                    
* LilyPond 用エディタ::         
* 入力ファイルの書き方::      
* このマニュアルの読み方::    
@end menu


@node ファイルをコンパイルする
@section ファイルをコンパイルする
@translationof Compiling a file

FIXME: insert text

@menu
* 入力を作成する::    
* MacOS X::           
* Windows::           
* コマンド ライン::   
@end menu


@node 入力を作成する
@subsection 入力を作成する
@translationof Entering input

@cindex compiling (コンパイルする)
@cindex first example (最初の例)
@cindex example, first (最初の例)
@cindex case sensitive (大文字と小文字を区別する)

@qq{コンパイル} は LilyPond フォーマットで書かれた入力ファイルを印刷可能な@c
ファイルを作り出すため、そして (オプションとして) 演奏可能な MIDI ファイルを@c
作り出すために処理することを意味する用語です。@c
LilyPond 入力ファイルはシンプルなテキストファイルです。@c
最初の例ではシンプルな入力ファイルがどのようなものかを示します。

楽譜を作成するために、我々は記譜法を指定する入力ファイルを書きます。@c
例えば、以下のように書くと:

@example
@{
  c' e' g' e'
@}
@end example

@noindent
結果は以下のようになります:

@c  in this case we don't want verbatim
@lilypond[quote]
{
  c' e' g' e'
}
@end lilypond

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@c strong内で {} を使用しようとした場合、なぜか下記のような表記にしなければ
エラーが発生した
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@warning{LilyPond 入力の音符と歌詞は、
@strong{@code{@{}} @strong{波括弧} @strong{@code{@}}}
で囲まれている必要があります。@c
さらに、あいまいさを避けるために、波括弧は行の最初か最後でない限りは@c
スペースによって囲まれているべきです。@c
波括弧はこのマニュアルのいくつかの例では省略されているかもしれませんが、@c
あなた自身が作成する楽譜では忘れないでください！@c
マニュアルの中にある例を表示する方法についての更なる情報については、@c
@ref{このマニュアルの読み方} を参照してください。}

さらに、LilyPond 入力は@strong{大文字/小文字}の区別 があります。@c
@w{@code{@{ c d e @}}} は有効な入力ですが、@c
@w{@code{@{ C D E @}}} はエラーになります。

@smallspace


@subheading 音楽を入力して出力を閲覧する

@cindex PDF file (PDF ファイル)
@cindex viewing music (音楽を閲覧する)
@cindex text editors (テキスト エディタ)
@cindex running LilyPond under MacOS X (MacOS X で LilyPond を実行する)
@cindex MacOS X, running LilyPond (MacOS X で LilyPond を実行する)
@cindex running LilyPond under Windows (Windows で LilyPond を実行する)
@cindex Windows, running LilyPond (Windows で LilyPond を実行する)
@cindex running LilyPond under Unix (Unix で LilyPond を実行する)
@cindex Unix, running LilyPond (Unix で LilyPond を実行する)

ここでは、実行すべきコマンドと、出力を閲覧または印刷する方法について説明します。

LilyPond に対してより良いサポートを提供するテキスト エディタが@c
いくつかあります。@c
更なる情報は @ref{LilyPond 用エディタ}  を参照してください。

@warning{あなたが初めて LilyPond を実行した場合、1, 2 分かかるかもしれません。@c
なぜなら、まず最初にすべてのシステム フォントが分析されるからです。@c
それから後は、LilyPond はずっと早く実行されます！}


@node MacOS X
@subsection MacOS X
@translationof MacOS X

@command{LilyPond.app} をダブル クリックすると、見本となるファイルが開きます。@c
それを -- 例えば @file{test.ly} という名前で -- Desktop に保存し、@c
それをメニュー コマンド @w{@code{Compile > Typeset File}} で処理します。@c
結果の PDF ファイルがスクリーン上に表示されます。

この先の LilyPond の使用のために、あなたは @qq{New} または @qq{Open} を@c
選択することによって開始すべきです。@c
植字を行う (訳者: コンパイルする) 前に、あなたはあなたのファイルを@c
保存しなければなりません。@c
処理中にエラーが発生した場合、ログ ウィンドを見てください。


@node Windows
@subsection Windows
@translationof Windows

Windows では、デスクトップ上の LilyPond アイコンをダブル クリックした場合、@c
シンプルなテキスト エディタで見本ファイルが開きます。@c
それを -- 例えば @file{test.ly} という名前で -- デスクトップ上に保存し、@c
そのファイルを処理するためにそのファイルをダブル クリックします 
(そのファイルのアイコンはノートのような形をしています)。@c
数秒後、デスクトップ上に @file{test.pdf} というファイルが作成されます。@c
刻譜された楽譜を見るにはこの PDF ファイルをダブル クリックします。@c
@file{test.ly} ファイルを処理するためのもう 1 つの方法は、マウス ポインタを@c
使ってそのファイルを LilyPond アイコンにドラッグ＆ドロップします。

既存の @file{.ly} を編集するには、そのファイルを右クリックして @qq{Edit source} 
を選択します。@c
LilyPond 入力を開始するための空ファイルを作成するには、上記と同じようにして@c
エディタを開き、@qq{ファイル} メニューの中にある @qq{新規作成} を使用するか、@c
デスクトップ上で右クリックして @qq{新規作成 ... テキスト文書} を選択して、@c
そのテキスト ファイルの名前を変更して、ファイル拡張子を @file{.ly} に@c
変更します。@c
LilyPond ソース コードに入力するには前述と同様にアイコンを右クリックします。

ファイルをダブル クリックすると、結果として PDF ファイルが@c
出力されるだけではなく、LilyPond がそのファイルに対して@c
行ったことについての情報を保持する @file{.log} ファイルも生成されます。@c
エラーが発生した場合、このファイルを検証してください。


@node コマンド ライン
@subsection コマンド ライン
@translationof Command-line


@file{test.ly} という名前のテキスト ファイルを作成し、以下を入力します:

@example
@{
  c' e' g' e'
@}
@end example

@file{test.ly} を処理するには以下のようにします:

@example
lilypond test.ly
@end example

@noindent
以下のようなものが表示されます:

@example
lilypond test.ly
GNU LilyPond @version{}
Processing `test.ly'
Parsing...
Interpreting music...
Preprocessing graphical objects...
Finding the ideal number of pages...
Fitting music on 1 page...
Drawing systems...
Layout output to `test.ps'...
Converting to `test.pdf'...
@end example


@node LilyPond 用エディタ
@section LilyPond 用エディタ
@translationof Advanced editors

FIXME: add text

@menu
* Denemo::                      
* LilyPondTool::                
* Emacs::                       
* Vim::                         
@end menu


@node Denemo
@subsection Denemo
@translationof Denemo

利用可能なプラットフォーム:



@node LilyPondTool
@subsection LilyPondTool
@translationof LilyPondTool

利用可能なプラットフォーム:


@node Emacs
@subsection Emacs
@translationof Emacs

利用可能なプラットフォーム: Windows, MacOS X, Unix


@node Vim
@subsection Vim
@translationof Vim

利用可能なプラットフォーム: Windows, MacOS X, Unix


@node 入力ファイルの書き方
@section 入力ファイルの書き方
@translationof How to write input files

FIXME: insert text

@menu
* 簡単な記譜法::                  
* 入力ファイルに取り組む::      
@end menu


@node 簡単な記譜法
@subsection 簡単な記譜法
@translationof Simple notation

@cindex simple notation (簡単な記譜法)
@cindex notation, simple (簡単な記譜法)

LilyPond はいくつかの記譜要素を自動的に追加します。@c
次の例では、我々は 4 つのピッチを指定しただけですが、LilyPond が音部記号、@c
拍子記号、リズムを加えています。

@lilypond[verbatim,quote]
{
  c' e' g' e'
}
@end lilypond

@noindent
この挙動は変更されるかもしれませんが、たいていのケースではこれらの自動値は@c
役に立ちます。


@subheading ピッチ
@c ピッチ

@cindex pitches (ピッチ)
@cindex relative mode (相対モード)
@cindex quote, single (シングル クォート)
@cindex comma (カンマ)
@cindex accidentals and relative mode (臨時記号と相対モード)
@cindex relative mode, and accidentals (臨時記号と相対モード)

@funindex \relative
@funindex relative
@funindex '
@funindex ,

音楽用語集: @rglos{pitch}, @rglos{interval},
@rglos{scale}, @rglos{middle C}, @rglos{octave},
@rglos{accidental}

音符を入力するための最も簡単な方法は @code{\relative} モードを@c
使用することです。@c
このモードでは、後に続く音符は常に前の音符に最も近い場所になるという@c
仮定によって自動的にオクターブが選択されます。@c
つまり、音符は前の音符から 3 譜表スペース (訳者: 1 譜表スペースとは同じ音階の@c
ド→レ、レ→ミ、～の間隔のこと) 以内に置かれます。@c
我々はまず音楽の最も基本的な要素 -- @notation{音階} (ここでは各音符は@c
前の音符からちょうど 1 譜表スペースの位置にきます) -- からはじめます。

@lilypond[verbatim,quote]
% set the starting point to middle C
\relative c' {
  c d e f
  g a b c
}
@end lilypond

最初の音符は@notation{ミドル C} です。@c
一連の音符はそれぞれ前の音符と最も近い場所に置かれています -- 
言い換えると、最初の @code{c} はミドル C に最も近い C です。@c
これに前の音符に最も近い D が続きます。@c
我々は @code{\relative} モードだけを使って@c
より大きな音程を持つ旋律を作ることができます:

@lilypond[verbatim,quote]
\relative c' {
  d f a g
  c b f d
}
@end lilypond

@noindent
旋律の最初の音符が開始ピッチを指定している音符である必要はありません。@c
前の例では、最初の音符 -- @code{d} -- はミドル C に最も近い D です。

@code{@w{\relative c' @{}} コマンドにクォート @code{'} やカンマ @code{,} を@c
付け加える (あるいは取り除く) ことによって、@c
開始オクターブを変更することができます:

@lilypond[verbatim,quote]
% one octave above middle C
\relative c'' {
  e c a c
}
@end lilypond

相対モードは最初のうちは混乱を引き起こす可能性がありますが、@c
たいていの旋律を入力するのに最も容易な方法です。@c
相対計算が実際にどのように行われるのか見てみましょう。@c
B -- ト音記号の譜面の真ん中の譜線上にあります -- から開始すると、C, D, E は@c
上方向に 3 譜表スペース以内にあり、A, G, F は下方向に 3 譜表スペース以内に@c
あります。@c
そのため、B の後に続く音符が C, D, E である場合、その音符は B の上に置かれ、@c
A, G, F である場合は B の下に置かれます。

@lilypond[verbatim,quote]
\relative c'' {
  b c  % c is 1 staff space up, so is the c above
  b d  % d is 2 up or 5 down, so is the d above
  b e  % e is 3 up or 4 down, so is the e above
  b a  % a is 6 up or 1 down, so is the a below
  b g  % g is 5 up or 2 down, so is the g below
  b f  % f is 4 up or 3 down, so is the f below
}
@end lilypond

これらの音符のいずれかにシャープやフラットが付いたとしても@c
まったく同じことが起こります。@c
相対位置の算出時に@notation{臨時記号}は@strong{完全に無視}されます。@c
譜表上の他のいずれかの位置にある音符からの譜表スペース数もまったく同じです。

3 譜表スペースよりも大きな音程を加えるために、シングル クォート @code{'} 
(あるいはアポストロフィ) を音符名に付け加えることによって@c
@notation{オクターブ}を上げることができます。@c
音符名にカンマ @code{,} を付け加えることによってオクターブを@c
下げることができます。

@lilypond[verbatim,quote]
\relative c'' {
  a a, c' f,
  g g'' a,, f'
}
@end lilypond

@noindent
音符を 2 オクターブ (あるいはそれ以上) 変えるには、複数化した @code{''} や 
@code{,,} を使用します -- しかしながら、1 つのダブル クォート @code{"} 
ではなく、2 つのシングル クォートを使用するよう注意してください！@c
また、@code{@w{\relative c'}} の中の最初の値もこのように@c
変更されるかもしれません。
@c " - keeps quotes in order for context-sensitive editor -td


@subheading 演奏時間 (リズム)
@c Durations (rhythms)
@c 演奏時間 (原語: Durations, リズム)

@cindex note durations (音符の演奏時間)
@cindex durations (演奏時間)
@cindex rhythms (リズム)
@cindex whole note (全音符)
@cindex half note (半音符)
@cindex quarter note (4 分音符)
@cindex dotted note (付点音符)
@cindex notating durations (演奏時間を記譜する)

音楽用語集: @rglos{beam}, @rglos{duration},
@rglos{whole note}, @rglos{half note}, @rglos{quarter note},
@rglos{dotted note}
@c 連桁 (beam), 演奏時間 (duration), 全音符 (whole note), 半音符 (half note), 
@c 4 分音符 (quarter note), 付点音符 (dotted note)

音符の@notation{演奏時間}は音符名の後の番号によって指定されます。@c
@notation{全音符}には @code{1} を、@notation{半音符}には @code{2} を、@c
@notation{4 分音符}には @code{4} を、などです。@c
@notation{連桁} 
(符幹と符幹をつなぐ横棒。符幹は符頭から上下にでる縦棒。符頭は音符の玉) 
は自動的に追加されます。

あなたが演奏時間を指定しなかった場合、@c
前の音符の演奏時間が次の音符の演奏時間に対しても使用されます。@c
最初の音符のデフォルトの演奏時間は 4 分音符です。

@lilypond[verbatim,quote]
\relative c'' {
  a1
  a2 a4 a8 a
  a16 a a a a32 a a a a64 a a a a a a a a2
}
@end lilypond

@notation{付点音符}を作成するには、@c
演奏時間数にドット @code{.} を付け加えます。@c
付点音符の演奏時間は明記されなければなりません (つまり、数字で)。

@lilypond[verbatim,quote]
\relative c'' {
  a a a4. a8
  a8. a16 a a8. a8 a4.
}
@end lilypond


@subheading 休符
@c Rests

@cindex rest (休符)
@cindex notating rests (休符を記譜する)

音楽用語集: @rglos{rest}
@c 休符 (rest)

@notation{休符}は @code{r} という名前の音符のような形で入力されます:

@lilypond[verbatim,quote]
\relative c'' {
  a r r2
  r8 a r4 r4. r8
}
@end lilypond


@subheading 拍子記号
@c Time signature

@cindex time signature (拍子記号)

@funindex \time
@funindex time

音楽用語集: @rglos{time signature}
@c 拍子記号 (time signature)

@notation{拍子記号}は @code{\time} コマンドでセットすることができます:

@lilypond[verbatim,quote]
\relative c'' {
  \time 3/4
  a4 a a
  \time 6/8
  a4. a
  \time 4/4
  a4 a a a
}
@end lilypond


@subheading 音部記号
@c Clef

@cindex clef (音部記号)
@cindex treble (ト音記号、高音部記号)
@cindex alto (アルト)
@cindex tenor (テナー)
@cindex bass (バス)

@funindex \clef
@funindex clef

音楽用語集: @rglos{clef}
@c : 音部記号 (clef)

@notation{音部記号}は @code{\clef} コマンドを使ってセットすることができます:

@lilypond[verbatim,quote]
\relative c' {
  \clef treble
  c1
  \clef alto
  c1
  \clef tenor
  c1
  \clef bass
  c1
}
@end lilypond


@subheading すべてをまとめて
@c All together

以上の要素をすべて集めたちょっとした例をお見せします:

@lilypond[verbatim,quote]
\relative c, {
  \time 3/4
  \clef bass
  c2 e8 c' g'2.
  f4 e d c4 c, r4
}
@end lilypond


@seealso
記譜法リファレンス: @ruser{Writing pitches},
@ruser{Writing rhythms}, @ruser{Writing rests},
@ruser{Time signature}, @ruser{Clef}
@c ピッチを書く, リズムを書く, 休符を書く, 拍子記号, 音部記号


@node 入力ファイルに取り組む
@subsection 入力ファイルに取り組む
@translationof Working on input files

@cindex curly braces (波括弧)
@cindex braces, curly (波括弧)
@cindex comments (コメント)
@cindex line comment (行コメント)
@cindex comment, line (行コメント)
@cindex block comment (ブロック コメント)
@cindex comment, block (ブロック コメント)
@cindex case sensitive (大文字と小文字を区別する)
@cindex whitespace insensitive (空白を無視する)
@cindex expressions (表記)

@funindex { ... }
@funindex %
@funindex %@{ ... %@}

LilyPond 入力ファイルは多くの一般的なプログラミング言語のソース ファイルと@c
同じようなものです。@c
それらは大文字/小文字の区別があり、空白はたいてい無視されます。@c
表記は波括弧 @{ @} で囲まれ、@code{%} または @w{@code{%@{ .. %@}}} で@c
コメントになります。

上の文章があなたにとって意味不明だとしても、心配ありません！@c
我々がそれらの用語の意味を説明します:

@itemize

@item
@strong{大文字/小文字の区別}:
あなたが小文字 (つまり、@w{@code{a, b, s, t)}} で入力するか、@c
大文字 (つまり、@w{@code{A, B, S, T}}) で入力するかの違いです: 
@w{@code{@{ c d e @}}} は有効な入力ですが、@w{@code{@{ C D E @}}} では@c
エラーになります。

@item
@strong{空白は無視される}:
あなたがどれくらい多くのスペース (または新しい行) を追加しても@c
問題にならないということです。@c
@w{@code{@{ c d e @}}} は @w{@code{@{ c @tie{}} @tie{} @tie{} d e @}} や@c
以下と同じ意味になります:

@example
@{ c                        d
                   e   @}
@end example

@noindent
もちろん、このような書き方をすると読みにくいです。@c
見やすい書き方は、@c
コード ブロックにタブか 2 つのスペースでインデントを付けることです:

@example
@{
  c d e
@}
@end example

@item
@strong{表記}:
LilyPond 入力の各部分は @strong{@{ 波括弧 @}} で囲まれている必要があります。@c
これらの波括弧は LilyPond に入力が単一の音楽表記であることを教えます。@c
これはちょうど数学での括弧 @code{()} のようなものです。@c
あいまいさを避けるために、波括弧は行の先頭か終端にないかぎりスペースで@c
囲まれているべきです。

波括弧で囲まれた表記が後に続く LilyPond コマンド (@w{@code{\relative @{ @}}} 
など) もまた単一の音楽表記としてカウントされます。

@cindex comments (コメント)
@cindex line comment (行コメント)
@cindex block comment (ブロック コメント)
@item
@strong{コメント}:
コメントは音楽入力を読む人間のための注釈です。@c
これは構文解析中には無視されるため、譜刻される出力には影響を与えません。@c
コメントには 2 つのタイプがあります。@c
パーセント記号 @code{%} は行コメントになります。@code{%} の後の文字は@c
無視されます。@c
慣習上、行コメントはそのコメントが参照するコードの上に置かれます。

@example
a4 a a a
% this comment refers to the Bs
b2 b
@end example

ブロック コメントは音楽入力のある部分全体をコメントにします。@c
@code{%@{} と @code{%@}} で囲まれた部分は無視されます。@c
しかしながら、ブロック コメントを @q{ネスト} させることはできません。@c
このことはあるブロック コメントを他のブロック コメントの中に@c
置くことはできないということを意味します。@c
そうした場合、最初の @code{%@}} は両方のブロック コメントを@c
終わらせてしまいます。@c
以下のコード断片はコメントの使用例を示しています:

@example
% notes for twinkle twinkle follow
% 以下はキラキラ星です
  c4 c g' g a a g2

%@{
  This line, and the notes below are ignored,
  since they are in a block comment.
  この行と以下の音符は無視されます。
  なぜなら、これらはブロック コメントの中にあるからです

  f f e e d d c2
%@}
@end example

@end itemize


@node このマニュアルの読み方
@section このマニュアルの読み方
@translationof How to read the manual

FIXME: fluff here

@menu
* 波括弧を省略する::             
* クリック可能な例::             
* キーボード ナビゲーション::    
* マニュアルの概要::             
@end menu


@node 波括弧を省略する
@unnumberedsubsec 波括弧を省略する
@translationof Omitting braces


@cindex how to read the manual (このマニュアルの読み方)
@cindex manual, reading (マニュアルを読む)
@cindex reading the manual (このマニュアルを読む)
@cindex examples, clickable (クリック可能な例)
@cindex clickable examples (クリック可能な例)
@cindex tips for constructing files (ファイルを構築するための Tips)
@cindex templates (テンプレート)
@cindex constructing files, tips (ファイルを構築するための Tips)
@cindex files, tips for constructing (ファイルを構築するための Tips)

@c @ref{Working on input files}
@ref{入力ファイルに取り組む} で見てきたように、LilyPond 入力は @{ @} マークか 
@code{@w{\relative c'' @{ ... @}}} で囲まれていなければなりません。@c
このマニュアルの残りの部分では、たいていの例はこのことを省略しています。@c
このマニュアルにある例を複製するためにあなたは表示されいている入力を@c
コピーするかもしれませんが、あなたは以下のように @code{@w{\relative c'' @{ @}}} 
を付け加えなければなりません:

@example
\relative c'' @{
  ... example goes here...
  ... 例がここに来ます ...
@}
@end example

なぜ波括弧を省略するのか？@c
このマニュアルの中のたいていの例はより大きな音楽の途中に@c
挿入することができます。@c
これらの例に対して @code{@w{\relative c'' @{ @}}} を付け加えることには@c
意味がありません -- あなたはある @code{\relative} を他の @code{\relative} の
中に置くべきではありません！@c
すべての例の周りに @code{@w{\relative c'' @{ @}}} を置いてしまうと、@c
あなたは小さな例をコピーして、それをより大きなあなた自身の音楽の中に@c
ペーストすることができなくなってしまいます。@c
たいていの人は資料を既存の楽曲に付け加えようとしますので、@c
我々はそのようにマニュアルを形作っています。


@node クリック可能な例
@unnumberedsubsec クリック可能な例
@translationof Clickable examples

多くの人々はすでにあるプログラムを試したり、いじったりすることで@c
プログラムを学びます。@c
これは LilyPond でも可能です。@c
このマニュアルの HTML バージョンの中にある画像をクリックすると、@c
画像を生成するために使用された正確な LilyPond 入力を見ることができます。@c
以下の画像を試してみてください:

@c no verbatim here
@lilypond[quote]
\relative c'' {
  c-\markup { \bold \huge { Click here.  } }
}
@end lilypond

@q{ly 断片} セクションにある記述をカット＆ペーストすることによって、@c
あなたは LilyPond を経験するための開始テンプレートを入手できます。@c
まったく同じもの (線の太さなどもすべて同じ) を出力させるには、@c
@qq{Start cut-&-pastable section} からファイルの最後までをコピーしてください。

@ignore
@seealso
@ref{LilyPond 入力ファイルの記述に対する提案}
に入力ファイルを構築するための更なる TIPS があります。@c
しかしながら、まずはこのチュートリアルの残りの部分を読み終えることが大切です。
@c LilyPond 入力ファイルの書き方の提案
@end ignore

@node キーボード ナビゲーション
@unnumberedsubsec キーボード ナビゲーション
@translationof Keyboard navigation


@node マニュアルの概要
@unnumberedsubsec マニュアルの概要
@translationof Overview of manuals

FIXME: a brief discussion about the rest of the LM, and pointers
to specific places.  like NR for general reference, AU for
suggestions for writing files, etc.


