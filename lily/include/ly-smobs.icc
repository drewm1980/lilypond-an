/*
  This file is part of LilyPond, the GNU music typesetter.

  Copyright (C) 1999--2010 Han-Wen Nienhuys <hanwen@xs4all.nl>

  LilyPond is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  LilyPond is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with LilyPond.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef LY_SMOBS_ICC
#define LY_SMOBS_ICC

#include "smobs.hh"

#define IMPLEMENT_TYPE_P(CL, FUNCNAME)					\
  SCM CL ## _type_p_proc;						\
  void init_type_ ## CL ()						\
  {									\
    SCM subr = scm_c_define_gsubr (FUNCNAME, 1, 0, 0,			\
				   (Scheme_function_unknown) CL::smob_p); \
    CL ## _type_p_proc = subr;						\
    ly_add_function_documentation (subr, FUNCNAME, "(SCM x)",		\
				   "Is @var{x} a @code{" #CL "} object?"); \
    scm_c_export (FUNCNAME, NULL);					\
  }									\
  ADD_SCM_INIT_FUNC (init_type_ ## CL, init_type_ ## CL)

#define IMPLEMENT_BASE_SMOBS(CL)					\
  void \
  CL ## _type_adder ()			\
  {\
    ly_add_type_predicate ((void*) &CL::unsmob, #CL);	\
  }\
  ADD_SCM_INIT_FUNC(CL ## _type_adder_ctor, \
		    CL ## _type_adder);\
  const char *CL::smob_name_ = #CL;					\
  scm_t_bits CL::smob_tag_;						\
  SCM									\
  CL::smob_p (SCM s)							\
  {									\
    if (SCM_NIMP (s) && SCM_CELL_TYPE (s) == smob_tag_)			\
      return SCM_BOOL_T;						\
    else								\
      return SCM_BOOL_F;						\
									\
  }									\
									\
  void									\
  CL::init_smobs ()							\
  {									\
    smob_tag_ = scm_make_smob_type (#CL, 0);				\
    scm_set_smob_mark (smob_tag_, CL::mark_smob);			\
    scm_set_smob_free (smob_tag_, CL::free_smob);			\
    scm_set_smob_print (smob_tag_, CL::print_smob);			\
    scm_set_smob_equalp (smob_tag_, CL::equal_p);			\
  }									\
									\
  size_t								\
  CL::free_smob (SCM ses)						\
  {									\
    CL *s = (CL *) SCM_CELL_WORD_1 (ses);				\
    delete s;								\
    /*    scm_gc_unregister_collectable_memory (s, sizeof (CL), #CL " smob"); */ \
    return SMOB_FREE_RETURN_VAL (CL);					\
  }									\
									\
  ADD_SCM_INIT_FUNC (CL, CL::init_smobs)

#define IMPLEMENT_SIMPLE_SMOBS(CL)					\
  IMPLEMENT_BASE_SMOBS (CL);						\
  SCM CL::smobbed_copy () const						\
  {									\
    CL *ptr = new CL (*this);						\
    SCM s;								\
    s = scm_cons (SCM_PACK (CL::smob_tag_), SCM_PACK (ptr));		\
    scm_gc_register_collectable_memory ((CL *)this, sizeof (CL), #CL " smob"); \
									\
    return s;								\
  }

#define IMPLEMENT_SMOBS(CL)						\
  IMPLEMENT_BASE_SMOBS (CL)						\
    void								\
  CL::smobify_self ()							\
  {									\
    protection_cons_ = SCM_EOL;						\
    self_scm_ = unprotected_smobify_self ();				\
    protect ();								\
  }									\
  void									\
  CL::protect ()							\
  {									\
    protect_smob (self_scm_, &protection_cons_);			\
  }									\
  SCM									\
  CL::unprotect ()							\
  {									\
    unprotect_smob (self_scm_, &protection_cons_);			\
    return self_scm_;							\
  }									\
  SCM									\
  CL::unprotected_smobify_self ()					\
  {									\
    /*									\
      This is local. We don't assign to self_scm_ directly, to assure	\
      that S isn't GC-ed from under us.					\
									\
      We don't use smobbed_self () to ensure that mark_smob () doesn't  \
      have to deal half-initialized objects: scm_done_malloc ( ) might  \
      trigger GC.the warning in smobs.hh is just to be doubleplus       \
      goodly sure                                                       \
    */									\
    SCM s;								\
    SCM_NEWSMOB (s, CL::smob_tag_, this);				\
    self_scm_ = s;							\
    scm_gc_register_collectable_memory (this, sizeof (CL), #CL " smob"); \
    return s;								\
  }

#define IMPLEMENT_DEFAULT_EQUAL_P(CL)		\
  SCM						\
  CL::equal_p (SCM a, SCM b)			\
  {						\
    return a == b ? SCM_BOOL_T : SCM_BOOL_F;	\
  }

#endif /* LY_SMOBS_ICC */

