dnl configure.in   -*-shell-script-*-
dnl Process this file with autoconf to produce a configure script.

# Bootstrap the init proces.
AC_INIT

# Bootstrap StepMake configure
# For user package:
AC_CONFIG_AUX_DIR([stepmake/bin])

# For stepmake package:
# AC_CONFIG_AUX_DIR(bin)


STEPMAKE_INIT

# List a file that identifies your package.
AC_CONFIG_SRCDIR([lily/main.cc])

# Move to aclocal.m4?
AC_CONFIG_HEADER([$CONFIGFILE.hh:config.hh.in])

# Uncomment the configuration options your package needs.

DOCUMENTATION=yes
AC_ARG_ENABLE(documentation,
    [  --enable-documentation  build Documentation.  Default: on],
    [DOCUMENTATION=$enableval])
AC_SUBST(DOCUMENTATION)

gui_b=no
AC_ARG_ENABLE(gui,
    [  --enable-gui            compile with experimental GNOME output.  Default: off],
    [gui_b=$enableval])


AC_ARG_WITH(ncsb-dir,
    [  --with-ncsb-dir=DIR     location of Century Schoolbook fonts.],
    [NCSB_DIR=$withval],
    [NCSB_DIR=""])

reloc_b=no
AC_ARG_ENABLE(relocation,
    [  --enable-relocation     compile with dynamic relocation.  Default: off],
    [reloc_b=$enableval])

rpath_b=no
AC_ARG_ENABLE(rpath,
    [  --enable-rpath          hardcode runtime library path.  Default: off],
    [rpath_b=$enableval])

LINK_GXX_STATICALLY=no
AC_ARG_ENABLE(static-gxx,
    [  --enable-static-gxx     link libstdc++.a statically. Default: off],
    [LINK_GXX_STATICALLY=$enableval])
AC_SUBST(LINK_GXX_STATICALLY)

# must come before any header checks
STEPMAKE_COMPILE

AC_CHECK_PROG(FCLIST, fc-list, fc-list)
AC_MSG_CHECKING([New Century Schoolbook PFB files])
AC_SUBST(NCSB_SOURCE_FILES)
if test "$NCSB_DIR" != "" ;  then
  NCSB_SOURCE_FILES=""
  for f in c059013l c059016l c059033l c059036l; do
    if test ! -f "$NCSB_DIR/$f.pfb"; then
      STEPMAKE_WARN($NCSB_DIR does not contain $f.pfb.)
    else
      NCSB_SOURCE_FILES="$NCSB_DIR/$f.pfb $NCSB_SOURCE_FILES"
    fi
  done
else
  if test "$FCLIST" != ""; then
    for style in Roman Italic "Bold Italic" Bold; do
      NCSB_FILE=`$FCLIST "Century Schoolbook L:style=$style:foundry=urw:fontformat=Type 1" file \
                | head -n 1`
      NCSB_FILE=`echo $NCSB_FILE | sed 's/^\(.*\):$/\1/g'`
      NCSB_FILE=`$PYTHON "$srcdir/scripts/auxiliar/readlink.py" $NCSB_FILE`
      NCSB_SOURCE_FILES="$NCSB_FILE $NCSB_SOURCE_FILES"
    done
  else
    AC_MSG_RESULT(not found)
    echo "Can't find Century Schoolbook files. Install FontConfig's fc-list,"
    echo "or use --with-ncsb-dir"
  fi
fi
AC_MSG_RESULT($NCSB_SOURCE_FILES)



STEPMAKE_PYTHON(REQUIRED, 2.4)
STEPMAKE_GCC(REQUIRED, 3.4)

STEPMAKE_CXX(REQUIRED)
STEPMAKE_GXX(REQUIRED, 3.4)
STEPMAKE_CXXTEMPLATE
STEPMAKE_STL_DATA_METHOD
STEPMAKE_LIB(REQUIRED)
STEPMAKE_DLOPEN
# Do not use bison 1.50 and 1.75.
# 1.29 is required fr %locations, but I'm not sure it's enough --ns
STEPMAKE_BISON(OPTIONAL, 1.29)
STEPMAKE_FLEX(REQUIRED)
STEPMAKE_FLEXLEXER(REQUIRED)
STEPMAKE_FLEXLEXER_LOCATION
AC_LANG_C
STEPMAKE_LOCALE
STEPMAKE_GETTEXT
STEPMAKE_MSGFMT(REQUIRED)
STEPMAKE_TEXMF(REQUIRED)
STEPMAKE_TEXMF_DIRS
STEPMAKE_GUILE_DEVEL(REQUIRED, 1.8.2)


## check rational bugfix.
save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$GUILE_CFLAGS $CPPFLAGS"
AC_MSG_CHECKING(GUILE rational bugfix)
AC_TRY_CPP(
#include <libguile.h>
#ifdef SCM_FRACTION_REDUCED_BIT
#error
#endif
,
AC_MSG_RESULT(ok),
REQUIRED="$REQUIRED GUILE-with-rational-bugfix"
AC_MSG_RESULT(Must have patched GUILE rational support. See INSTALL.txt))
CPPFLAGS="$save_CPPFLAGS"


STEPMAKE_PYTHON_DEVEL(REQUIRED)

STEPMAKE_PATH_PROG(GHOSTSCRIPT, gs, OPTIONAL, 8.60)

STEPMAKE_PATH_PROG(FONTFORGE, fontforge, REQUIRED, 20050624)

STEPMAKE_PATH_PROG(T1ASM, t1asm, REQUIRED)

AC_CHECK_HEADERS([assert.h grp.h libio.h pwd.h sys/stat.h wchar.h fpu_control.h])
AC_LANG_PUSH(C++)
AC_CHECK_HEADERS([sstream boost/lambda/lambda.hpp])
AC_LANG_POP(C++)
AC_HEADER_STAT
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([chroot fopencookie funopen gettext isinf memmem snprintf vsnprintf wcrtomb])

STEPMAKE_PROGS(PKG_CONFIG, pkg-config, REQUIRED, 0.9.0)

if test "$gui_b" = "yes"; then
    STEPMAKE_GTK2(gtk+-2.0, REQUIRED, 2.4.0)
fi

AC_MSG_CHECKING(whether to enable dynamic relocation)
if test "$reloc_b" = "yes"; then
    AC_DEFINE(ARGV0_RELOCATION)
fi
AC_MSG_RESULT($reloc_b)

AC_MSG_CHECKING(for rpath linkage)
if test "$rpath_b" = "yes"; then
    LDFLAGS="$LDFLAGS -Wl,-rpath -Wl,\\\$\$ORIGIN/../lib"
elif test "$rpath_b" != "no"; then
    LDFLAGS="$LDFLAGS -Wl,-rpath -Wl,$rpath_b"
fi
AC_MSG_RESULT($rpath_b)

HOST_ARCH=`$CC -dumpmachine`
AC_SUBST(HOST_ARCH)

STEPMAKE_PANGO_FT2(pangoft2, REQUIRED, 1.6.0)
#STEPMAKE_PANGO(pango, REQUIRED, 1.6.0)
STEPMAKE_FONTCONFIG(fontconfig, REQUIRED, 2.2.0)
STEPMAKE_FREETYPE2(freetype2, REQUIRED, 2.1.10)

STEPMAKE_WINDOWS

## Optional tools for building documentation, website, extra fonts.

# guile executable for some scripts
STEPMAKE_GUILE(OPTIONAL)

# perl for help2man.
STEPMAKE_PERL(OPTIONAL)

STEPMAKE_PROGS(MAKEINFO, makeinfo, REQUIRED, 4.11)
STEPMAKE_PROGS(TEXI2HTML, texi2html, OPTIONAL, 1.82)

AC_DEFINE_UNQUOTED(FLOWER_VERSION, "${FULL_FLOWER_VERSION}")

# must also have local.make if configure fails.
touch local.make

if test "$reloc_b$rpath_b" = "yesno"; then
    STEPMAKE_WARN([Using --enable-relocation without --enable-rpath.  LilyPond may have trouble finding libraries.])
fi

# Gather requirements and generate output.
STEPMAKE_END

test -n "$CONFIGURATION" && mc=" conf=$CONFIGURATION" || mc=""

if make top-doc 1>/dev/null 2>&1; then
    rm -f INSTALL.txt && ln Documentation/topdocs/out/INSTALL.txt .
    rm -f README.txt && ln Documentation/topdocs/out/README.txt .
fi

cat <<EOF

Type:
    make$mc all       to build LilyPond
    make$mc install   to install LilyPond
    make$mc help      to see all possible targets

Edit local.make for local Makefile overrides.


EOF
